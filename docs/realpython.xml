<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Real Python</title>
<link>https://realpython.com/</link>


<item>
<title>How to Check if a Python String Contains a Substring</title>
<link>https://realpython.com/python-string-contains-substring/</link>
<guid>https://realpython.com/python-string-contains-substring/</guid>
<content:encoded><![CDATA[
<div> Python, substring, in operator, case sensitivity, regular expressions  
总结:<br /><br />本文介绍了如何使用Python中的in操作符来检查一个字符串是否包含另一个子字符串。通过转换输入文本为小写，可以消除大小写敏感性。还介绍了.count()方法用于计算子字符串出现的次数，.index()方法找到第一个出现的位置。此外，还介绍了re模块中的正则表达式以及pandas中的.str.contains()方法用于更复杂的子字符串搜索。这些方法和工具可以有效地在Python字符串中检查子字符串，满足不同需求，从简单检查到复杂数据分析。 <div>
<div><p>To check if a string contains another string in Python, use the <code>in</code> <a href="https://realpython.com/python-in-operator/">membership operator</a>. This is the recommended method for confirming the presence of a <a href="https://en.wikipedia.org/wiki/Substring">substring</a> within a string. The <code>in</code> operator is intuitive and readable, making it a straightforward way to evaluate substring existence.</p>
<p>Additionally, you can use string methods like <code>.count()</code> and <code>.index()</code> to gather more detailed information about substrings, such as their frequency and position. For more complex substring searches, use regular expressions with the <code>re</code> module. When you’re dealing with tabular data, then <a href="https://realpython.com/learning-paths/pandas-data-science/">pandas</a> provides efficient tools for searching for substrings within DataFrame columns.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>The <strong><code>in</code> membership operator</strong> is the recommended way to check if a Python string contains a substring.</li>
<li><strong>Converting input text</strong> to lowercase generalizes substring checks by <strong>removing case sensitivity</strong>.</li>
<li>The <code>.count()</code> method <strong>counts occurrences</strong> of a substring, while <code>.index()</code> finds the first occurrence’s <strong>position</strong>.</li>
<li><strong>Regular expressions</strong> in the <code>re</code> module allow for advanced substring searches based on <strong>complex conditions</strong>.</li>
<li>The <code>.str.contains()</code> method in <strong>pandas</strong> identifies which DataFrame entries contain a specific substring.</li>
</ul>
<p>Understanding these methods and tools enables you to effectively check for substrings in Python strings, catering to various needs from simple checks to complex data analysis.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-string-contains-substring-code/">Click here to download the free sample code</a> that you’ll use to check if a string contains a substring.</p>
</div>
<h2 id="how-to-confirm-that-a-python-string-contains-another-string">How to Confirm That a Python String Contains Another String<a class="headerlink" href="#how-to-confirm-that-a-python-string-contains-another-string" title="Permanent link"></a></h2>
<p>If you need to check whether a string contains a substring, use Python’s <a href="https://realpython.com/python-in-operator/">membership operator <code>in</code></a>. In Python, this is the recommended way to confirm the existence of a substring in a string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">raw_file_content</span> <span class="o">=</span> <span class="s2">"""Hi there and welcome.</span>
<span class="gp">... </span><span class="s2">This is a special hidden file with a SECRET secret.</span>
<span class="gp">... </span><span class="s2">I don't want to tell you The Secret,</span>
<span class="gp">... </span><span class="s2">but I do want to secretly tell you that I have one."""</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="s2">"secret"</span> <span class="ow">in</span> <span class="n">raw_file_content</span>
</span><span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <code>in</code> membership operator gives you a quick and readable way to check whether a substring is present in a string. You may notice that the line of code almost reads like English.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> If you want to check whether the substring is <em>not</em> in the string, then you can use <a href="https://realpython.com/python-in-operator/#pythons-not-in-operator"><code>not in</code></a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"secret"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">raw_file_content</span>
<span class="go">False</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Because the substring <code>"secret"</code> is present in <code>raw_file_content</code>, the <code>not in</code> operator returns <code>False</code>.</p>
</div>
<p>When you use <code>in</code>, the expression returns a <a href="https://realpython.com/python-boolean/">Boolean value</a>:</p>
<ul>
<li><code>True</code> if Python found the substring</li>
<li><code>False</code> if Python didn’t find the substring</li>
</ul>
<p>You can use this intuitive syntax in <a href="https://realpython.com/python-conditional-statements/">conditional statements</a> to make decisions in your code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="s2">"secret"</span> <span class="ow">in</span> <span class="n">raw_file_content</span><span class="p">:</span>
<span class="gp">... </span>   <span class="nb">print</span><span class="p">(</span><span class="s2">"Found!"</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">Found!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code snippet, you use the membership operator to check whether <code>"secret"</code> is a substring of <code>raw_file_content</code>. If it is, then you’ll print a message to the <a href="https://realpython.com/terminal-commands/">terminal</a>. Any indented code will only execute if the Python string that you’re checking contains the substring that you provide.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Python considers <a href="https://docs.python.org/3.12/reference/expressions.html#membership-test-operations">empty strings always as a substring</a> of any other string, so checking for the empty string in a string returns <code>True</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">""</span> <span class="ow">in</span> <span class="s2">"secret"</span>
<span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This may be surprising because Python considers <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing">emtpy strings as false</a>, but it’s an edge case that is helpful to keep in mind.</p>
</div>
<p>The membership operator <code>in</code> is your best friend if you just need to check whether a Python string contains a substring.</p>
<p>However, what if you want to know more about the substring? If you read through the text stored in <code>raw_file_content</code>, then you’ll notice that the substring occurs more than once, and even in different variations!</p>
<p>Which of these occurrences did Python find? Does capitalization make a difference? How often does the substring show up in the text? And what’s the location of these substrings? If you need the answer to any of these questions, then keep on reading.</p>
<h2 id="generalize-your-check-by-removing-case-sensitivity">Generalize Your Check by Removing Case Sensitivity<a class="headerlink" href="#generalize-your-check-by-removing-case-sensitivity" title="Permanent link"></a></h2>
<p>Python strings are case sensitive. If the substring that you provide uses different capitalization than the same word in your text, then Python won’t find it. For example, if you check for the lowercase word <code>"secret"</code> on a <a href="https://realpython.com/python-strings/#case-conversion">title-case version</a> of the original text, the membership operator check returns <code>False</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">title_cased_file_content</span> <span class="o">=</span> <span class="s2">"""Hi There And Welcome.</span>
<span class="gp">... </span><span class="s2">This Is A Special Hidden File With A Secret Secret.</span>
<span class="gp">... </span><span class="s2">I Don't Want To Tell You The Secret,</span>
<span class="gp">... </span><span class="s2">But I Do Want To Secretly Tell You That I Have One."""</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"secret"</span> <span class="ow">in</span> <span class="n">title_cased_file_content</span>
<span class="go">False</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Despite the fact that the word <em>secret</em> appears multiple times in the title-case text <code>title_cased_file_content</code>, it <em>never</em> shows up in all lowercase. That’s why the check that you perform with the membership operator returns <code>False</code>. Python can’t find the all-lowercase string <code>"secret"</code> in the provided text.</p>
<p>Humans have a different approach to language than computers do. This is why you’ll often want to disregard capitalization when you check whether a string contains a substring in Python.</p>
</div><h2><a href="https://realpython.com/python-string-contains-substring/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-string-contains-substring/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-12-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Exceptions: An Introduction</title>
<link>https://realpython.com/python-exceptions/</link>
<guid>https://realpython.com/python-exceptions/</guid>
<content:encoded><![CDATA[
<div> exceptions try except else finally Python
Python中，异常是指在语法正确的代码执行过程中发生错误时引发的错误。你可以使用try、except、else和finally关键字来处理异常。通过try...except块，你能够执行代码并处理可能出现的异常。Python 3相对于Python 2引入了更多内置的异常，使得错误处理更加精细。捕获所有异常的坏习惯是使用except Exception或裸except子句。结合try、except和pass让程序可以在不处理异常的情况下继续静默运行。使用try...except本身并不是坏事，但应该谨慎使用，只处理已知问题。总结：Python中异常处理是保证程序在遇到错误时正常运行的重要机制，通过try...except块、else和finally关键字，可以有效处理异常，避免程序崩溃。 <div>
<div><p>Python exceptions provide a mechanism for handling errors that occur during the execution of a program. Unlike syntax errors, which are detected by the parser, Python raises exceptions when an error occurs in syntactically correct code. Knowing how to raise, catch, and handle exceptions effectively helps to ensure your program behaves as expected, even when encountering errors.</p>
<p>In Python, you handle exceptions using a <code>try</code> … <code>except</code> block. This structure allows you to execute code normally while responding to any exceptions that may arise. You can also use <code>else</code> to run code if no exceptions occur, and the <code>finally</code> clause to execute code regardless of whether an exception was raised.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>Exceptions in Python occur when <strong>syntactically correct code</strong> results in an <strong>error</strong>.</li>
<li>You can <strong>handle exceptions</strong> using the <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> <strong>keywords</strong>.</li>
<li><strong>The <code>try</code> … <code>except</code> block</strong> lets you execute code and handle exceptions that arise.</li>
<li><strong>Python 3</strong> introduced more built-in exceptions compared to <strong>Python 2</strong>, making error handling more granular.</li>
<li>It’s <strong>bad practice</strong> to <strong>catch all exceptions</strong> at once using <code>except Exception</code> or the bare <code>except</code> clause.</li>
<li>Combining <code>try</code>, <code>except</code>, and <code>pass</code> allows your program to <strong>continue silently</strong> without handling the exception.</li>
<li>Using <code>try</code> … <code>except</code> is not inherently bad, but you should <strong>use it judiciously</strong> to handle only <strong>known issues</strong> appropriately.</li>
</ul>
<p>In this tutorial, you’ll get to know Python exceptions and all relevant keywords for exception handling by walking through a practical example of handling a platform-related exception. Finally, you’ll also learn how to create your own custom Python exceptions.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-exceptions-code/">Click here to download the free sample code</a> that shows you how exceptions work in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Exceptions: An Introduction” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-exceptions/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="An Introduction to Python Exceptions" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python_Exceptions_Watermark.47f814fbeced.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-exceptions/"><span class="my-0 h4">Python Exceptions: An Introduction</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python exceptions. You'll cover the difference between syntax errors and exceptions and learn how to raise exceptions, make assertions, and use the try and except block.</p>
    </div>
  </div>

</div>

<h2 id="understanding-exceptions-and-syntax-errors">Understanding Exceptions and Syntax Errors<a class="headerlink" href="#understanding-exceptions-and-syntax-errors" title="Permanent link"></a></h2>
<p><a href="https://realpython.com/invalid-syntax-python/">Syntax errors</a> occur when the parser detects an incorrect statement. Observe the following example:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python Traceback</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="x">&gt;&gt;&gt; print(0 / 0))</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>
<span class="w">    </span><span class="nb">print</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">))</span>
<span class="w">                </span><span class="pm">^</span>
<span class="gr">SyntaxError</span>: <span class="n">unmatched ')'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The arrow indicates where the parser ran into the <strong>syntax error</strong>. Additionally, the error message gives you a hint about what went wrong. In this example, there was one bracket too many. Remove it and run your code again:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">ZeroDivisionError</span>: <span class="n">division by zero</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This time, you ran into an <strong>exception error</strong>. This type of error occurs whenever syntactically correct Python code results in an error. The last line of the message indicates what type of exception error you ran into.</p>
<p>Instead of just writing <em>exception error</em>, Python details what <em>type</em> of exception error it encountered. In this case, it was a <code>ZeroDivisionError</code>. Python comes with <a href="https://docs.python.org/3/library/exceptions.html">various built-in exceptions</a> as well as the possibility to create user-defined exceptions.</p>
<h2 id="raising-an-exception-in-python">Raising an Exception in Python<a class="headerlink" href="#raising-an-exception-in-python" title="Permanent link"></a></h2>
<p>There are scenarios where you might want to stop your program by raising an exception if a condition occurs. You can do this with the <a href="https://realpython.com/python-raise-exception/"><code>raise</code></a> keyword:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/raise.3931e8819e08.png" target="_blank"><img alt="Illustration of  raise statement usage" class="img-fluid mx-auto d-block " height="311" src="https://files.realpython.com/media/raise.3931e8819e08.png" width="1394" /></a></figure>

<p>You can even complement the statement with a custom message. Assume that you’re writing a tiny toy program that expects only numbers up to <code>5</code>. You can raise an error when an unwanted condition occurs:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">low.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="n">number</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">"The number should not exceed 5. (</span><span class="si">{</span><span class="n">number</span><span class="si">=}</span><span class="s2">)"</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you raised an <code>Exception</code> object and passed it an informative custom message. You built the message using an <a href="https://realpython.com/python-f-strings/">f-string</a> and a <a href="https://realpython.com/python-f-strings/#self-documenting-expressions-for-debugging">self-documenting expression</a>.</p>
<p>When you run <code>low.py</code>, you’ll get the following output:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python Traceback</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"./low.py"</span>, line <span class="m">3</span>, in <span class="n">&lt;module&gt;</span>
<span class="w">    </span><span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">"The number should not exceed 5. (</span><span class="si">{</span><span class="n">number</span><span class="si">=}</span><span class="s2">)"</span><span class="p">)</span>
<span class="gr">Exception</span>: <span class="n">The number should not exceed 5. (number=10)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The program comes to a halt and displays the exception to your <a href="https://realpython.com/terminal-commands/">terminal</a> or <a href="https://realpython.com/python-repl/">REPL</a>, offering you helpful clues about what went wrong. Note that the final call to <a href="https://realpython.com/python-print/"><code>print()</code></a> never executed, because Python raised the exception before it got to that line of code.</p>
<p>With the <code>raise</code> keyword, you can raise any exception object in Python and stop your program when an unwanted condition occurs.</p>
<h2 id="debugging-during-development-with-assert">Debugging During Development With <code>assert</code><a class="headerlink" href="#debugging-during-development-with-assert" title="Permanent link"></a></h2>
</div><h2><a href="https://realpython.com/python-exceptions/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-exceptions/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-12-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python's F-String for String Interpolation and Formatting</title>
<link>https://realpython.com/python-f-strings/</link>
<guid>https://realpython.com/python-f-strings/</guid>
<content:encoded><![CDATA[
<div> f-strings, interpolation, formatting, Python, expressions
<br />
Python的f-strings提供了一种简洁高效的方式将变量、对象和表达式直接插入字符串中。通过在字符串前加上f或F，您可以在大括号{}中嵌入表达式，这些表达式在运行时进行评估。相比之下，f-strings比旧方法（如%操作符或字符串方法）更快、更易读。此外，f-strings支持使用Python的字符串格式进行高级字符串格式化。总之，学完本教程后，您将了解到Python中的f-strings的特点和优势，包括插值和格式化。通过熟悉这些特点，您将能够在Python项目中有效地使用f-strings。
<br /><br />
总结: f-strings是一种在Python中插值和格式化字符串的有效和简洁的方法。通过使用f-strings，您可以在字符串中插入动态内容，并进行高级的字符串格式化。Python的f-strings使得代码更易读、更高效。 <div>
<div><p>Python <strong>f-strings</strong> offer a concise and efficient way to interpolate variables, objects, and expressions directly into strings. By prefixing a string with <code>f</code> or <code>F</code>, you can embed expressions within curly braces (<code>{}</code>), which are evaluated at runtime. </p>
<p>This makes f-strings faster and more readable compared to older approaches like the <a href="https://realpython.com/python-modulo-string-formatting/">modulo (<code>%</code>)</a> operator or the string <a href="https://realpython.com/python-formatted-output/#using-the-format-method-for-string-interpolation"><code>.format()</code></a> method. Additionally, f-strings support advanced string formatting using Python’s string <a href="https://realpython.com/python-format-mini-language/">format mini-language</a>.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>An f-string in Python is a string literal <strong>prefixed with <code>f</code> or <code>F</code></strong>, allowing for the <strong>embedding of expressions</strong> within <strong>curly braces <code>{}</code></strong>.</li>
<li>To include dynamic content in an f-string, place your expression or variable inside the braces to <strong>interpolate</strong> its value into the string.</li>
<li>An <strong>f-string error</strong> in Python often occurs due to syntax issues, such as <strong>unmatched braces</strong> or <strong>invalid expressions</strong> within the string.</li>
<li><strong>F-string calculation</strong> in Python involves <strong>writing expressions</strong> within the curly braces of an f-string, which Python evaluates at runtime.</li>
<li><strong>Python 3.12</strong> improved f-strings by allowing <strong>nested expressions</strong> and the use of <strong>backslashes</strong>.</li>
</ul>
<p>This tutorial will guide you through the features and advantages of f-strings, including interpolation and formatting. By familiarizing yourself with these features, you’ll be able to effectively use f-strings in your Python projects.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-f-string-code/">Click here to download the free sample code</a> that shows you how to do string interpolation and formatting with Python’s f-strings.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python F-Strings” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/f-strings/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="F-Strings in Python 3.6" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-f-Strings-Guide_Watermark.2c8be8b1d392.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/f-strings/"><span class="my-0 h4">Python F-Strings</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your knowledge of Python f-strings. With this knowledge, you'll be able to include all sorts of Python expressions inside your strings.</p>
    </div>
  </div>

</div>

<h2 id="interpolating-and-formatting-strings-before-python-36">Interpolating and Formatting Strings Before Python 3.6<a class="headerlink" href="#interpolating-and-formatting-strings-before-python-36" title="Permanent link"></a></h2>
<p>Before Python 3.6, you had two main tools for interpolating values, variables, and expressions inside string literals:</p>
<ol>
<li>The <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting">string interpolation operator</a> (<code>%</code>), or modulo operator</li>
<li>The <a href="https://docs.python.org/3/library/stdtypes.html#str.format"><code>str.format()</code></a> method</li>
</ol>
<p>You’ll get a refresher on these two string interpolation tools in the following sections. You’ll also learn about the string formatting capabilities that these tools offer in Python.</p>
<h3 id="the-modulo-operator">The Modulo Operator (<code>%</code>)<a class="headerlink" href="#the-modulo-operator" title="Permanent link"></a></h3>
<p>The modulo operator (<code>%</code>) was the first tool for string interpolation and formatting in Python and has been in the language since the beginning. Here’s what using this operator looks like in practice:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Jane"</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, </span><span class="si">%s</span><span class="s2">!"</span> <span class="o">%</span> <span class="n">name</span>
<span class="go">'Hello, Jane!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this quick example, you use the <code>%</code> operator to interpolate the value of your <code>name</code> variable into a string literal. The interpolation operator takes two operands:</p>
<ul>
<li>A string literal containing one or more conversion specifiers</li>
<li>The object or objects that you’re interpolating into the string literal</li>
</ul>
<p>The <strong>conversion specifiers</strong> work as replacement fields. In the above example, you use the <code>%s</code> combination of characters as a conversion specifier. The <code>%</code> symbol marks the start of the specifier, while the <code>s</code> letter is the <strong>conversion type</strong> and tells the operator that you want to convert the input object into a string.</p>
<p>If you want to insert more than one object into your target string, then you can use a <a href="https://realpython.com/python-tuple/">tuple</a>. Note that the number of objects in the tuple must match the number of format specifiers in the string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Jane"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, </span><span class="si">%s</span><span class="s2">! You're </span><span class="si">%s</span><span class="s2"> years old."</span> <span class="o">%</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
<span class="go">'Hello, Jane! You're 25 years old.'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you use a tuple of values as the right-hand operand to <code>%</code>. Note that you’ve used a string and an integer. Because you use the <code>%s</code> specifier, Python converts both objects to strings.</p>
<p>You can also use dictionaries as the right-hand operand in your interpolation expressions. To do this, you need to create conversion specifiers that enclose key names in parentheses:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, </span><span class="si">%(name)s</span><span class="s2">! You're </span><span class="si">%(age)s</span><span class="s2"> years old."</span> <span class="o">%</span> <span class="p">{</span><span class="s2">"name"</span><span class="p">:</span> <span class="s2">"Jane"</span><span class="p">,</span> <span class="s2">"age"</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="go">"Hello, Jane! You're 25 years old."</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This syntax provides a readable approach to string interpolation with the <code>%</code> operator. You can use descriptive key names instead of relying on the positional order of values.</p>
<p>When you use the <code>%</code> operator for string interpolation, you can use conversion specifiers. They provide some string formatting capabilities that take advantage of <strong>conversion types</strong>, <strong>conversion flags</strong>, and some characters like the period (<code>.</code>) and the asterisk (<code>*</code>). Consider the following example:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Balance: $</span><span class="si">%.2f</span><span class="s2">"</span> <span class="o">%</span> <span class="mf">5425.9292</span>
<span class="go">'Balance: $5425.93'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="s2">"Name: </span><span class="si">%s</span><span class="se">\n</span><span class="s2">Age: </span><span class="si">%5s</span><span class="s2">"</span> <span class="o">%</span> <span class="p">(</span><span class="s2">"John"</span><span class="p">,</span> <span class="mi">35</span><span class="p">))</span>
<span class="go">Name: John</span>
<span class="go">Age:    35</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-f-strings/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-f-strings/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>What Does if __name__ == "__main__" Do in Python?</title>
<link>https://realpython.com/if-name-main-python/</link>
<guid>https://realpython.com/if-name-main-python/</guid>
<content:encoded><![CDATA[
<div> Python, if __name__, "__main__", idiom, script，
  
总结:<br /><br />Python的if __name__ == "__main__"习惯用法允许代码仅在脚本执行时运行，而不在导入模块时运行。通过将代码封装在if __name__ == "__main__"内，可以确保仅在预期上下文中运行。此习惯用法有助于防止在模块导入期间意外执行代码。将脚本特定逻辑放在此习惯用法下有助于不影响模块导入。最佳实践建议尽量少使用此习惯用法，并将其放在脚本底部以提高清晰度。 <div>
<div><p>The <code>if __name__ == "__main__"</code> idiom is a Python construct that helps control code execution in scripts. It’s a conditional statement that allows you to define code that runs only when the file is executed as a script, not when it’s imported as a module.</p>
<p>When you run a Python script, the interpreter assigns the value <code>"__main__"</code> to the <code>__name__</code> variable. If Python imports the code as a module, then it sets <code>__name__</code> to the module’s name instead. By encapsulating code within <code>if __name__ == "__main__"</code>, you can ensure that it only runs in the intended context.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>Python’s <code>if __name__ == "__main__"</code> idiom allows code to run <strong>only when the script is executed</strong>, not when it’s imported.</li>
<li>The idiom checks if <strong>the <code>__name__</code> variable equals <code>"__main__"</code></strong>, confirming that the script is the <strong>top-level module</strong>.</li>
<li>Using this idiom helps <strong>prevent unintended code execution</strong> during module imports.</li>
<li>It’s useful for adding <strong>script-specific logic</strong>, such as user input or test cases, without affecting module imports.</li>
<li>Best practices suggest <strong>using this idiom minimally</strong> and placing it at the bottom of the script for clarity.</li>
</ul>
<p>You’ve likely encountered Python’s <code>if __name__ == "__main__"</code> idiom when reading other people’s code. No wonder—<a href="https://github.com/search?q=__name__+%3D%3D+%22__main__%22&amp;type=code">it’s widespread</a>! Understanding Python’s <code>if __name__ == "__main__"</code> idiom will help you to manage script execution and module imports effectively. In this tutorial you’ll explore its mechanics, appropriate usage, and best practices.</p>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Name-Main Idiom” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-name-main-idiom/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What Does if __name__ == &quot;__main__&quot; Do in Python?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/The-Name-Main-Idiom_Watermarked.9d5e12c539b3.jpg" style="background: #ffc774;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-name-main-idiom/"><span class="my-0 h4">Python Name-Main Idiom</span></a> 
      <p class="text-muted mb-0 small">Test your knowledge of Python's if __name__ == "__main__" idiom by answering a series of questions! You've probably encountered the name-main idiom and might have even used it in your own scripts. But did you use it correctly?</p>
    </div>
  </div>

</div>

<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/if-name-main-python-code/">Click here to download the free sample code</a> that you’ll use to learn about the name-main idiom.</p>
</div>
<h2 id="in-short-it-allows-you-to-execute-code-when-the-file-runs-as-a-script-but-not-when-its-imported-as-a-module">In Short: It Allows You to Execute Code When the File Runs as a Script, but Not When It’s Imported as a Module<a class="headerlink" href="#in-short-it-allows-you-to-execute-code-when-the-file-runs-as-a-script-but-not-when-its-imported-as-a-module" title="Permanent link"></a></h2>
<p>For most practical purposes, you can think of the conditional block that you open with <code>if __name__ == "__main__"</code> as a way to store code that should only run when your file is executed as a script.</p>
<p>You’ll see what that means in a moment. For now, say you have the following file:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">echo.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">repetitions</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
<span class="linenos"> 2</span><span class="w">    </span><span class="sd">"""Imitate a real-world echo."""</span>
<span class="linenos"> 3</span>    <span class="n">echoes</span> <span class="o">=</span> <span class="p">[</span><span class="n">text</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="p">:]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">repetitions</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
<span class="linenos"> 4</span>    <span class="k">return</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">echoes</span> <span class="o">+</span> <span class="p">[</span><span class="s2">"."</span><span class="p">])</span>
<span class="linenos"> 5</span>
<span class="linenos"> 6</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
<span class="linenos"> 7</span>    <span class="n">text</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">"Yell something at a mountain: "</span><span class="p">)</span>
<span class="linenos"> 8</span>    <span class="nb">print</span><span class="p">(</span><span class="n">echo</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you define a function, <code>echo()</code>, that mimics a real-world echo by gradually printing fewer and fewer of the final letters of the input text.</p>
<p>Below that, in lines 6 to 8, you use the <code>if __name__ == "__main__"</code> idiom. This code starts with the conditional statement <code>if __name__ == "__main__"</code> in line 6. In the indented lines, 7 and 8, you then collect user input and call <code>echo()</code> with that input. These two lines will execute when you run <code>echo.py</code> as a script from your command line:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>echo.py
<span class="go">Yell something at a mountain: HELLOOOO ECHOOOOOOOOOO</span>
<span class="go">ooo</span>
<span class="go">oo</span>
<span class="go">o</span>
<span class="go">.</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>When you run the file as a script by passing the file object to your Python interpreter, the expression <code>__name__ == "__main__"</code> returns <code>True</code>. The code block under <code>if</code> then runs, so Python collects user input and calls <code>echo()</code>.</p>
<p>Try it out yourself! You can download all the code files that you’ll use in this tutorial from the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/if-name-main-python-code/">Click here to download the free sample code</a> that you’ll use to learn about the name-main idiom.</p>
</div>
<p>At the same time, if you import <code>echo()</code> in another module or a console session, then the nested code won’t run:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">echo</span> <span class="kn">import</span> <span class="n">echo</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">echo</span><span class="p">(</span><span class="s2">"Please help me I'm stuck on a mountain"</span><span class="p">))</span>
<span class="go">ain</span>
<span class="go">in</span>
<span class="go">n</span>
<span class="go">.</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this case, you want to use <code>echo()</code> in the context of another script or interpreter session, so you won’t need to collect user input. Running <code>input()</code> would mess with your code by producing a side effect when importing <code>echo</code>.</p>
<p>When you nest the code that’s specific to the script usage of your file under the <code>if __name__ == "__main__"</code> idiom, then you avoid running code that’s irrelevant for imported modules.</p>
<p>Nesting code under <code>if __name__ == "__main__"</code> allows you to cater to different use cases:</p>
<ul>
<li><strong>Script:</strong> When run as a script, your code prompts the user for input, calls <code>echo()</code>, and prints the result.</li>
<li><strong>Module:</strong> When you import <code>echo</code> as a module, then <code>echo()</code> gets defined, but no code executes. You provide <code>echo()</code> to the main code session without any side effects.</li>
</ul>
<p>By implementing the <code>if __name__ == "__main__"</code> idiom in your code, you set up an additional entry point that allows you to use <code>echo()</code> right from the command line.</p>
<p>There you go! You’ve now covered the most important information about this topic. Still, there’s more to find out, and there are some subtleties that can help you build a deeper understanding of this code specifically and Python more generally.</p>
</div><h2><a href="https://realpython.com/if-name-main-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/if-name-main-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #230: marimo: Reactive Notebooks and Deployable Web Apps in Python</title>
<link>https://realpython.com/podcasts/rpp/230/</link>
<guid>https://realpython.com/podcasts/rpp/230/</guid>
<content:encoded><![CDATA[
<div> notebooks, Python development, common issues, reactive marimo notebook, Akshay Agrawal
<br />
notebooks在Python开发中存在常见问题，Akshay Agrawal介绍了用于Python的开源响应式marimo笔记本。使用marimo笔记本可以了解当前状态、共享可复制的结果以及创建交互式应用程序。 <div>
<p>What are common issues with using notebooks for Python development? How do you know the current state, share reproducible results, or create interactive applications? This week on the show, we speak with Akshay Agrawal about the open-source reactive marimo notebook for Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-29T12:00:00+00:00</pubDate>
</item>
<item>
<title>Continuous Integration and Deployment for Python With GitHub Actions</title>
<link>https://realpython.com/github-actions-python/</link>
<guid>https://realpython.com/github-actions-python/</guid>
<content:encoded><![CDATA[
<div> GitHub Actions, Python, CI/CD, automation, workflows
<br />
CI/CD是现代软件开发中必不可少的实践。GitHub Actions为Python开发者提供了自动化工作流的功能，使团队能够在不断变化的环境中保持软件质量。通过GitHub Workflows，开发者可以实现CI/CD流程的自动化，并能够定制化工作流程。使用GitHub Actions，开发团队可以有效执行软件开发过程，提高生产力和代码可靠性。Workflow文件由触发器、作业和步骤组成，必须遵循预定的结构才能成功运行。GitHub Actions具有庞大的生态系统、灵活性和低或零成本，因此成为GitHub上开源项目首选的CI/CD解决方案。总的来说，GitHub Actions为Python开发者提供了管理代码库的自动化工作流的强大工具。<br /><br />总结: <div>
<div><p>Creating software is an achievement worth celebrating. But software is never static. Bugs need to be fixed, features need to be added, and security demands regular updates. In today’s landscape, with agile methodologies dominating, robust <a href="https://realpython.com/learning-paths/python-devops/">DevOps</a> systems are crucial for managing an evolving codebase. That’s where GitHub Actions shine, empowering Python developers to automate workflows and ensure their projects adapt seamlessly to change.</p>
<p><strong>GitHub Actions</strong> for Python empowers developers to automate workflows efficiently. This enables teams to maintain software quality while adapting to constant change.</p>
<p><strong>Continuous Integration and Continuous Deployment (CI/CD)</strong> systems help produce well-tested, high-quality software and streamline deployment. GitHub Actions makes CI/CD accessible to all, allowing automation and customization of workflows directly in your repository. This free service enables developers to execute their software development processes efficiently, improving productivity and code reliability.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Use <strong>GitHub Actions</strong> and <strong>workflows</strong></li>
<li>Automate <strong>linting, testing, and deployment</strong> of a Python project</li>
<li><strong>Secure credentials</strong> used for automation</li>
<li>Automate <strong>security and dependency updates</strong></li>
</ul>
<p>This tutorial will use an existing codebase, <a href="https://pypi.org/project/realpython-reader/">Real Python Reader</a>, as a starting point for which you’ll create a CI/CD pipeline. You can <a href="https://github.com/realpython/reader/fork">fork the Real Python Reader code on GitHub</a> to follow along. Be sure to deselect the <em>Copy the <code>master</code> branch only</em> option when forking. Alternatively, if you prefer, you can <a href="https://realpython.com/pypi-publish-python-package/">build your own Real Python Reader</a> using a previous tutorial.</p>
<p>In order to get the most out of this tutorial, you should be comfortable with <a href="https://realpython.com/what-is-pip/"><code>pip</code></a>, <a href="https://realpython.com/pypi-publish-python-package/">building Python packages</a>, <a href="https://realpython.com/python-git-github-intro/">Git</a>, and have some familiarity with <a href="https://realpython.com/python-yaml/">YAML</a> syntax.</p>
<p>Before you dig into GitHub Actions, it may be helpful to take a step back and learn about the benefits of CI/CD. This will help you understand the kinds of problems that GitHub Actions can solve.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/github-actions-python-code/">Click here to download the free sample code </a> you’ll use to learn about CI/CD for Python With GitHub Actions.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “GitHub Actions for Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/github-actions-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Continuous Integration and Deployment for Python With GitHub Actions" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Using-GitHub-Actions-to-Release-a-Python-Package_Watermarked.76b89b43805f.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/github-actions-python/"><span class="my-0 h4">GitHub Actions for Python</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of GitHub Actions for Python. By working through this quiz, you'll revisit how to use GitHub Actions and workflows to automate linting, testing, and deployment of a Python project.</p>
    </div>
  </div>

</div>

<h2 id="unlocking-the-benefits-of-cicd">Unlocking the Benefits of CI/CD<a class="headerlink" href="#unlocking-the-benefits-of-cicd" title="Permanent link"></a></h2>
<p><strong>Continuous Integration (CI)</strong> and <strong>Continuous Deployment (CD)</strong>, commonly known as <strong>CI/CD</strong>, are essential practices in modern software development. These practices automate the integration of code changes, the execution of tests, and the deployment of applications. This helps teams and open-source contributors to deliver code changes more frequently in a reliable and structured way.</p>
<p>Moreover, when publishing open-source Python packages, CI/CD will ensure that all pull requests (PRs) and contributions to your package will meet the needs of the project while standardizing the code quality.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about what a pull request is and how to create one, you can read <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">GitHub’s official documentation</a>.</p>
</div>
<p>More frequent deployments with smaller code changes <strong>reduce the risk of unintended breaking changes</strong> that can occur with larger, more complex releases. For example, even though developers can format all code using the same linting tools and rules, policy can automatically block PRs from being merged if the code’s tests don’t pass.</p>
<p>In the next section, you’ll learn how GitHub Workflows can help you implement CI/CD on a repository hosted on GitHub.</p>
<h2 id="exploring-github-workflows">Exploring GitHub Workflows<a class="headerlink" href="#exploring-github-workflows" title="Permanent link"></a></h2>
<p>GitHub Workflows are a powerful feature of <a href="https://docs.github.com/en/actions">GitHub Actions</a>. They allow you to define custom automation workflows for your repositories. Whether you want to build, test, or deploy your code, GitHub Workflows provide a flexible and customizable solution that any project on GitHub can use for free, whether the repository is public or private.</p>
<p>Even though there are many CI/CD providers, GitHub Actions has become the default among open-source projects on GitHub because of its expansive ecosystem, flexibility, and low or no cost.</p>
<h3 id="anatomy-of-a-workflow-file">Anatomy of a Workflow File<a class="headerlink" href="#anatomy-of-a-workflow-file" title="Permanent link"></a></h3>
<p>Workflow files are declaratively written YAML files with a predefined structure that must be adhered to for a workflow to run successfully. Your YAML workflow files are stored and defined in a <code>.github/workflows/</code> folder in your project’s root directory. </p>
<p>Your workflow folder can have multiple workflow files, each of which will perform a certain task. You can name these workflow files anything you’d like. However, for the sake of simplicity and readability, it’s common practice to name them after the tasks they achieve, such as <code>test.yml</code>.</p>
<p>Each file has a few elements that are required, but many, many more that are optional. The GitHub Actions <a href="https://docs.github.com/en/actions">documentation</a> is thorough and well-written, so be sure to check it out after you’ve finished reading this tutorial.</p>
<p>There are three main parts that make up the bulk of a workflow file: <strong>triggers</strong>, <strong>jobs</strong>, and <strong>steps</strong>. You’ll cover these in the next sections.</p>
<h3 id="workflow-triggers">Workflow Triggers<a class="headerlink" href="#workflow-triggers" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/github-actions-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/github-actions-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-27T14:00:00+00:00</pubDate>
</item>
<item>
<title>Managing Dependencies With Python Poetry</title>
<link>https://realpython.com/courses/managing-dependencies-with-poetry/</link>
<guid>https://realpython.com/courses/managing-dependencies-with-poetry/</guid>
<content:encoded><![CDATA[
<div> Python Poetry, external packages, version control, project management, dependency manager
<br />
Python项目依赖外部包时需要确保使用正确的版本，因为升级后可能存在不兼容性。Python Poetry是一个依赖管理工具，帮助你在项目中指定、安装和解决外部包。通过pyproject.toml配置项目，固定项目依赖版本，从poetry.lock文件安装依赖，使用Poetry CLI运行基本命令。总结: Python Poetry是一个依赖管理工具，可以帮助创建、管理Python项目中的外部包依赖，并控制版本，确保项目在不同环境中始终使用正确的依赖版本。 <div>
<p>When your Python project relies on external packages, you need to make sure you&rsquo;re using the right version of each package. After an update, a package might not work as it did before. A <strong>dependency manager</strong> like Python Poetry helps you specify, install, and resolve external packages in your projects. This way, you can be sure that you always work with the correct dependency version on every machine.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Create a <strong>new project</strong> using Poetry</li>
<li>Add Poetry to an <strong>existing project</strong></li>
<li>Configure your project through <strong><code>pyproject.toml</code></strong></li>
<li>Pin your project&rsquo;s <strong>dependency versions</strong></li>
<li>Install dependencies from a <strong><code>poetry.lock</code></strong> file</li>
<li>Run basic Poetry commands using the <strong>Poetry CLI</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-26T14:00:00+00:00</pubDate>
</item>
<item>
<title>Speed Up Your Python Program With Concurrency</title>
<link>https://realpython.com/python-concurrency/</link>
<guid>https://realpython.com/python-concurrency/</guid>
<content:encoded><![CDATA[
<div> 并发，多任务，Python，线程，异步<br />
<br />
总结:<br />
本教程介绍了Python中的并发概念及不同形式（线程、异步任务、多进程）的实现方式。并发可提高程序性能和响应速度，对优化I/O绑定或CPU绑定的程序至关重要。多线程和异步任务可在单个处理器上实现并发，而多进程可以利用多个CPU核心实现真正的并行。合理选择并发模型可根据程序需求提升性能。 <div>
<div><p>Concurrency refers to the ability of a program to manage multiple tasks at once, improving performance and responsiveness. It encompasses different models like threading, asynchronous tasks, and multiprocessing, each offering unique benefits and trade-offs. In Python, threads and asynchronous tasks facilitate concurrency on a single processor, while multiprocessing allows for true parallelism by utilizing multiple CPU cores.</p>
<p>Understanding concurrency is crucial for optimizing programs, especially those that are I/O-bound or CPU-bound. Efficient concurrency management can significantly enhance a program’s performance by reducing wait times and better utilizing system resources.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Understand</strong> the different forms of <strong>concurrency</strong> in Python</li>
<li><strong>Implement</strong> multi-threaded and asynchronous solutions for <strong>I/O-bound</strong> tasks</li>
<li><strong>Leverage</strong> multiprocessing for <strong>CPU-bound</strong> tasks to achieve true parallelism</li>
<li><strong>Choose</strong> the appropriate concurrency model based on your program’s needs</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with <a href="https://realpython.com/learning-paths/python-basics/">Python basics</a>, including <a href="https://realpython.com/defining-your-own-python-function/">functions</a> and <a href="https://realpython.com/python-for-loop/">loops</a>. A rudimentary understanding of system processes and CPU operations will also be helpful. You can download the sample code for this tutorial by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-concurrency-code/">Click here to download the free sample code</a> that you’ll use to learn about speeding up your Python program with concurrency.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Concurrency” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-concurrency/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Speed Up Your Python Program With Concurrency" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/An-Overview-of-Concurrency-in-Python_Watermarked.c54c399ccb32.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-concurrency/"><span class="my-0 h4">Python Concurrency</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python concurrency. You'll revisit the different forms of concurrency in Python, how to implement multi-threaded and asynchronous solutions for I/O-bound tasks, and how to achieve true parallelism for CPU-bound tasks.</p>
    </div>
  </div>

</div>

<h2 id="exploring-concurrency-in-python">Exploring Concurrency in Python<a class="headerlink" href="#exploring-concurrency-in-python" title="Permanent link"></a></h2>
<p>In this section, you’ll get familiar with the terminology surrounding concurrency. You’ll also learn that concurrency can take different forms depending on the problem it aims to solve. Finally, you’ll discover how the different concurrency models translate to Python.</p>
<h3 id="what-is-concurrency">What Is Concurrency?<a class="headerlink" href="#what-is-concurrency" title="Permanent link"></a></h3>
<p>The dictionary definition of concurrency is <strong>simultaneous occurrence</strong>. In Python, the things that are occurring simultaneously are called by different names, including these:</p>
<ul>
<li><strong>Thread</strong></li>
<li><strong>Task</strong></li>
<li><strong>Process</strong></li>
</ul>
<p>At a high level, they all refer to a sequence of instructions that run in order. You can think of them as different <strong>trains of thought</strong>. Each one can be stopped at certain points, and the CPU or brain that’s processing them can switch to a different one. The state of each train of thought is saved so it can be restored right where it was interrupted.</p>
<p>You might wonder why Python uses different words for the same concept. It turns out that threads, tasks, and processes are only the same if you view them from a high-level perspective. Once you start digging into the details, you’ll find that they all represent slightly different things. You’ll see more of how they’re different as you progress through the examples.</p>
<p>Now, you’ll consider the <em>simultaneous</em> part of that definition. You have to be a little careful because, when you get down to the details, you’ll discover that only multiple <a href="https://en.wikipedia.org/wiki/Process_(computing)">system processes</a> can enable Python to run these trains of thought at literally the same time.</p>
<p>In contrast, <a href="https://en.wikipedia.org/wiki/Thread_(computing)">threads</a> and <a href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)">asynchronous tasks</a> always run on a single processor, which means they can only run one at a time. They just cleverly find ways to take turns to speed up the overall process. Even though they don’t run different trains of thought simultaneously, they still fall under the concept of <strong>concurrency</strong>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Threads in most other programming languages often run in parallel. To learn why Python threads can’t, check out <a href="https://realpython.com/python-gil/">What Is the Python Global Interpreter Lock (GIL)?</a></p>
<p>If you’re curious about even more details, then you can also read about <a href="https://realpython.com/python-parallel-processing/">Bypassing the GIL for Parallel Processing in Python</a> or check out the experimental <a href="https://realpython.com/python313-free-threading-jit/">free threading</a> introduced in <a href="https://realpython.com/python313-new-features/">Python 3.13</a>.</p>
</div>
<p>The way the threads, tasks, or processes take turns differs. In a multi-threaded approach, the operating system actually knows about each thread and can interrupt it at any time to start running a different thread. This mechanism is also true for processes. It’s called <a href="https://en.wikipedia.org/wiki/Preemption_%28computing%29#Preemptive_multitasking">preemptive multitasking</a> since the operating system can preempt your thread or process to make the switch.</p>
<p>Preemptive multitasking is handy in that the code in the thread doesn’t need to do anything special to make the switch. It can also be difficult because of that <em>at any time</em> phrase. The <a href="https://en.wikipedia.org/wiki/Context_switch">context switch</a> can happen in the middle of a single Python statement, even a trivial one like <code>x = x + 1</code>. This is because Python statements typically consist of several low-level <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a> instructions.</p>
<p>On the other hand, asynchronous tasks use <a href="https://en.wikipedia.org/wiki/Cooperative_multitasking">cooperative multitasking</a>. The tasks must cooperate with each other by announcing when they’re ready to be switched out without the operating system’s involvement. This means that the code in the task has to change slightly to make it happen.</p>
<p>The benefit of doing this extra work upfront is that you always know where your task will be swapped out, making it easier to reason about the flow of execution. A task won’t be swapped out in the middle of a Python statement unless that statement is appropriately marked. You’ll see later how this can simplify parts of your design.</p>
<h3 id="what-is-parallelism">What Is Parallelism?<a class="headerlink" href="#what-is-parallelism" title="Permanent link"></a></h3>
<p>So far, you’ve looked at concurrency that happens on a single <a href="https://en.wikipedia.org/wiki/Processor_(computing)">processor</a>. What about all of those <a href="https://en.wikipedia.org/wiki/Multi-core_processor">CPU cores</a> your cool, new laptop has? How can you make use of them in Python? The answer is to execute separate processes!</p>
<p>A <strong>process</strong> can be thought of as almost a completely different program, though technically, it’s usually defined as a collection of resources including memory, <a href="https://en.wikipedia.org/wiki/File_descriptor">file handles</a>, and things like that. One way to think about it is that each process runs in its own Python interpreter.</p>
<p>Because they’re different processes, each of your trains of thought in a program leveraging <strong>multiprocessing</strong> can run on a different CPU core. Running on a different core means that they can actually run at the same time, which is fabulous. There are some complications that arise from doing this, but Python does a pretty good job of smoothing them over most of the time.</p>
</div><h2><a href="https://realpython.com/python-concurrency/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-concurrency/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-25T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python range(): Represent Numerical Ranges</title>
<link>https://realpython.com/python-range/</link>
<guid>https://realpython.com/python-range/</guid>
<content:encoded><![CDATA[
<div> range, loop, interval, sequence, efficient<br />
<br />
range()函数在Python中生成一个整数范围，常用于循环迭代。它可以生成从0开始到指定停止值之前的数字序列，也可以通过reversed()实现反向序列。使用负步数如range(start, stop, -1)可以实现从起始值向停止值倒数。range()不仅仅用于迭代，还可在其他编程场景中使用，使代码更高效和可读。掌握range()可以简化代码，同时也要考虑其他替代方案的适用性。通过本教程，你将了解range是Python中表示整数区间的对象，掌握range()的用法用于产生可转换为列表的数字序列，以及如何利用range参数start、stop和step来定义序列的起始、终止和间隔。可通过负步长值实现逆向范围，也可以用reversed()实现反转。 <div>
<div><p>In Python, the <code>range()</code> function generates a sequence of numbers, often used in loops for iteration. By default, it creates numbers starting from 0 up to but not including a specified stop value. You can also reverse the sequence with <code>reversed()</code>. If you need to count backwards, then you can use a negative step, like <code>range(start, stop, -1)</code>, which counts down from <code>start</code> to <code>stop</code>.</p>
<p>The <code>range()</code> function is not just about iterating over numbers. It can also be used in various programming scenarios beyond simple loops. By mastering <code>range()</code>, you can write more efficient and readable Python code. Explore how <code>range()</code> can simplify your code and when alternatives might be more appropriate.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>A range in Python is an object representing an <strong>interval of integers</strong>, often used for looping.</li>
<li>The <code>range()</code> function can be used to <strong>generate sequences</strong> of numbers that can be <strong>converted to lists</strong>.</li>
<li><code>for i in range(5)</code> is a loop that <strong>iterates</strong> over the numbers from 0 to 4, inclusive.</li>
<li>The <strong>range parameters</strong> <code>start</code>, <code>stop</code>, and <code>step</code> define where the sequence begins, ends, and the interval between numbers.</li>
<li>Ranges can go <strong>backward</strong> in Python by using a negative step value and <strong>reversed</strong> by using <code>reversed()</code>.</li>
</ul>
<p>A range is a Python object that represents an interval of integers. Usually, the numbers are consecutive, but you can also specify that you want to space them out. You can create ranges by calling <code>range()</code> with one, two, or three arguments, as the following examples show:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0, 1, 2, 3, 4]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In each example, you use <a href="https://realpython.com/python-list/#using-the-list-constructor"><code>list()</code></a> to explicitly list the individual elements of each range. You’ll study these examples in more detail later on.</p>
<p>A range can be an effective tool. However, throughout this tutorial, you’ll also explore alternatives that may work better in some situations. You can click the link below to download the code that you’ll see in this tutorial:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-range-code/">Click here to download the free sample code</a> that shows you how to represent numerical ranges in Python.</p>
</div>
<h2 id="construct-numerical-ranges">Construct Numerical Ranges<a class="headerlink" href="#construct-numerical-ranges" title="Permanent link"></a></h2>
<p>In Python, <code>range()</code> is <strong>built in</strong>. This means that you can always call <code>range()</code> without doing any preparations first. Calling <code>range()</code> constructs a <strong>range object</strong> that you can put to use. Later, you’ll see practical examples of how to use range objects.</p>
<p>You can provide <code>range()</code> with one, two, or three <strong>integer</strong> arguments. This corresponds to three different use cases:</p>
<ol>
<li>Ranges counting from zero</li>
<li>Ranges of consecutive numbers</li>
<li>Ranges stepping over numbers</li>
</ol>
<p>You’ll learn how to use each of these next.</p>
<h3 id="count-from-zero">Count From Zero<a class="headerlink" href="#count-from-zero" title="Permanent link"></a></h3>
<p>When you call <code>range()</code> with one argument, you create a range that counts from zero and up to, but not including, the number you provided:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">range(0, 5)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, you’ve created a range from zero to five. To see the individual elements in the range, you can use <code>list()</code> to convert the range to a <a href="https://realpython.com/python-list/">list</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="go">[0, 1, 2, 3, 4]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Inspecting <code>range(5)</code> shows that it contains the numbers zero, one, two, three, and four. Five itself is not a part of the range. One nice property of these ranges is that the argument, <code>5</code> in this case, is the same as the number of elements in the range.</p>
<h3 id="count-from-start-to-stop">Count From Start to Stop<a class="headerlink" href="#count-from-start-to-stop" title="Permanent link"></a></h3>
<p>You can call <code>range()</code> with two arguments. The first value will be the start of the range. As before, the range will count up to, but not include, the second value:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="go">range(1, 7)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The representation of a range object just shows you the arguments that you provided, so it’s not super helpful in this case. You can use <code>list()</code> to inspect the individual elements:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-range/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-range/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>Efficient String Concatenation in Python</title>
<link>https://realpython.com/python-string-concatenation/</link>
<guid>https://realpython.com/python-string-concatenation/</guid>
<content:encoded><![CDATA[
<div> 字符串、拼接、Python、操作、方法
<br />
拼接字符串是Python中的基本操作，可使用+运算符或+=运算符来将多个字符串组合成一个字符串。.join()方法通常用于有效地连接字符串列表。还可以使用StringIO来处理大型数据集或使用print()函数进行快速屏幕输出。+=可以将字符串附加到现有字符串上，.join()方法用于在Python中连接列表中的字符串。通过str()函数将其他数据类型转换为字符串以避免在使用连接操作时出现类型错误。总之，Python中的字符串拼接可以通过+运算符和+=运算符进行，同时要注意类型转换问题，以实现字符串的有效连接。总结: <div>
<div><p>Python <strong>string concatenation</strong> is a fundamental operation that combines multiple strings into a single string. In Python, you can concatenate strings using the <code>+</code> operator or the <code>+=</code> operator for appending. For more efficient concatenation of multiple strings, the <code>.join()</code> method is recommended, especially when working with strings in a list. Other techniques include using <code>StringIO</code> for large datasets or the <code>print()</code> function for quick screen outputs.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>You can <strong>concatenate strings</strong> in Python using the <code>+</code> operator and the <code>+=</code> operator.</li>
<li>You can use <code>+=</code> to <strong>append a string</strong> to an existing string.</li>
<li>The <code>.join()</code> method is used to <strong>combine strings in a list</strong> in Python.</li>
<li>You can handle a <strong>stream of strings</strong> efficiently by using <code>StringIO</code> as a container with a file-like interface.</li>
</ul>
<p>To get the most out of this tutorial, you should have a basic understanding of Python, especially its built-in <a href="https://realpython.com/python-strings/">string</a> data type.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-string-concatenation-code/">Click here to download the free sample code</a> that shows you how to efficiently concatenate strings in Python.</p>
</div>
<h2 id="doing-string-concatenation-with-pythons-plus-operator">Doing String Concatenation With Python’s Plus Operator (<code>+</code>)<a class="headerlink" href="#doing-string-concatenation-with-pythons-plus-operator" title="Permanent link"></a></h2>
<p><strong>String concatenation</strong> is a pretty common operation consisting of joining two or more strings together end to end to build a final string. Perhaps the quickest way to achieve concatenation is to take two separate strings and combine them with the plus operator (<code>+</code>), which is known as the <strong>concatenation operator</strong> in this context:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, "</span> <span class="o">+</span> <span class="s2">"Pythonista!"</span>
<span class="go">'Hello, Pythonista!'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">head</span> <span class="o">=</span> <span class="s2">"String Concatenation "</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tail</span> <span class="o">=</span> <span class="s2">"is Fun in Python!"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">head</span> <span class="o">+</span> <span class="n">tail</span>
<span class="go">'String Concatenation is Fun in Python!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Using the concatenation operator to join two strings provides a quick solution for concatenating only a few strings. </p>
<p>For a more realistic example, say you have an output line that will <a href="https://realpython.com/python-print/">print</a> an informative message based on specific criteria. The beginning of the message might always be the same. However, the end of the message will vary depending on different criteria. In this situation, you can take advantage of the concatenation operator:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">age_group</span><span class="p">(</span><span class="n">age</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">result</span> <span class="o">=</span> <span class="s2">"a Child!"</span>
<span class="gp">... </span>    <span class="k">elif</span> <span class="mi">9</span> <span class="o">&lt;</span> <span class="n">age</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">result</span> <span class="o">=</span> <span class="s2">"an Adolescent!"</span>
<span class="gp">... </span>    <span class="k">elif</span> <span class="mi">19</span> <span class="o">&lt;</span> <span class="n">age</span> <span class="o">&lt;=</span> <span class="mi">65</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">result</span> <span class="o">=</span> <span class="s2">"an Adult!"</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">result</span> <span class="o">=</span> <span class="s2">"in your Golden Years!"</span>
<span class="hll"><span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">"You are "</span> <span class="o">+</span> <span class="n">result</span><span class="p">)</span>
</span><span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">age_group</span><span class="p">(</span><span class="mi">29</span><span class="p">)</span>
<span class="go">You are an Adult!</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age_group</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span>
<span class="go">You are an Adolescent!</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age_group</span><span class="p">(</span><span class="mi">68</span><span class="p">)</span>
<span class="go">You are in your Golden Years!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the above example, <code>age_group()</code> prints a final message constructed with a common prefix and the string resulting from the <a href="https://realpython.com/python-conditional-statements/">conditional statement</a>. In this type of use case, the plus operator is your best option for quick string concatenation in Python.</p>
<p>The concatenation operator has an augmented version that provides a shortcut for concatenating two strings together. The <strong>augmented concatenation operator</strong> (<code>+=</code>) has the following syntax:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="n">string</span> <span class="o">+=</span> <span class="n">other_string</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This expression will concatenate the content of <code>string</code> with the content of <code>other_string</code>. It’s equivalent to saying <code>string = string + other_string</code>.</p>
<p>Here’s a short example of how the augmented concatenation operator works in practice:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">word</span> <span class="o">=</span> <span class="s2">"Py"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">word</span> <span class="o">+=</span> <span class="s2">"tho"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">word</span> <span class="o">+=</span> <span class="s2">"nis"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">word</span> <span class="o">+=</span> <span class="s2">"ta"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">word</span>
<span class="go">'Pythonista'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, every <a href="https://realpython.com/python-assignment-operator/#augmented-assignments-for-concatenation-and-repetition">augmented assignment</a> adds a new syllable to the final word using the <code>+=</code> operator. This concatenation technique can be useful when you have several strings in a <a href="https://realpython.com/python-lists-tuples/">list</a> or any other <a href="https://realpython.com/python-iterators-iterables/#getting-to-know-python-iterables">iterable</a> and want to concatenate them in a <a href="https://realpython.com/python-for-loop/"><code>for</code> loop</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">concatenate</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">" "</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">sentence</span> <span class="o">=</span> <span class="n">iterable</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
<span class="gp">... </span>        <span class="n">sentence</span> <span class="o">+=</span> <span class="p">(</span><span class="n">sep</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">sentence</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">concatenate</span><span class="p">([</span><span class="s2">"Hello,"</span><span class="p">,</span> <span class="s2">"World!"</span><span class="p">,</span> <span class="s2">"I"</span><span class="p">,</span> <span class="s2">"am"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"Pythonista!"</span><span class="p">])</span>
<span class="go">'Hello, World! I am a Pythonista!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Inside the loop, you use the augmented concatenation operator to quickly concatenate several strings in a loop. <a href="#efficiently-concatenating-many-strings-with-join-in-python">Later</a> you’ll learn about <code>.join()</code>, which is an even better way to concatenate a list of strings.</p>
<p>Python’s concatenation operators can only concatenate string objects. If you use them with a different data type, then you get a <a href="https://realpython.com/python-traceback/#typeerror"><code>TypeError</code></a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"The result is: "</span> <span class="o">+</span> <span class="mi">42</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">TypeError</span>: <span class="n">can only concatenate str (not "int") to str</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"Your favorite fruits are: "</span> <span class="o">+</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"grape"</span><span class="p">]</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">TypeError</span>: <span class="n">can only concatenate str (not "list") to str</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The concatenation operators don’t accept operands of different types. They only concatenate strings. A work-around to this issue is to explicitly use the built-in <code>str()</code> function to convert the target object into its <a href="https://realpython.com/python-repr-vs-str/#how-can-you-access-an-objects-string-representations">string representation</a> before running the actual concatenation:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"The result is: "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">'The result is: 42'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>By calling <code>str()</code> with your integer number as an argument, you’re retrieving the string representation of <code>42</code>, which you can then concatenate to the initial string because both are now string objects.</p>
</div><h2><a href="https://realpython.com/python-string-concatenation/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-string-concatenation/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>How to Iterate Through a Dictionary in Python</title>
<link>https://realpython.com/iterate-through-dictionary-python/</link>
<guid>https://realpython.com/iterate-through-dictionary-python/</guid>
<content:encoded><![CDATA[
<div> 迭代、字典、Python、键值对、方法<br />
迭代字典可以直接用for循环键或使用.items()来获取键值对，使用.keys()、.values()、.items()方法可以不同方式迭代字典，.items()适合获取键值对，最快的方法是使用.items()和元组解压缩来同时获取键和值。字典是Python中非常重要和有用的数据结构，可以用来解决各种编程问题。字典将键映射到值并存储在集合中，键必须是可哈希类型，而值可以是任何Python类型，可灵活添加、删除和更新字典内容。重新使用Python 3.6版本后，字典项的顺序与插入时一致，而在3.6之前则是无序的，了解如何迭代字典可以更高效地访问和操作数据。总结: 迭代字典时，使用.items()方法能最快捷地获取键值对，字典提供了高效地存储和访问数据的方式，也是Python中重要的数据结构。 <div>
<div><p>Python offers several ways to iterate through a dictionary, such as using <code>.items()</code> to access key-value pairs directly and <code>.values()</code> to retrieve values only.</p>
<p>By understanding these techniques, you’ll be able to efficiently access and manipulate dictionary data. Whether you’re updating the contents of a dictionary or filtering data, this guide will equip you with the tools you need.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>You can <strong>directly iterate</strong> over the <strong>keys</strong> of a Python dictionary using a <code>for</code> loop and access values with <code>dict_object[key]</code>.</li>
<li>You can iterate through a Python dictionary in different ways using the <strong>dictionary methods</strong> <code>.keys()</code>, <code>.values()</code>, and <code>.items()</code>.</li>
<li>You should <strong>use <code>.items()</code></strong> to access <strong>key-value pairs</strong> when iterating through a Python dictionary.</li>
<li>The <strong>fastest way</strong> to access both keys and values when you iterate over a dictionary in Python is to <strong>use <code>.items()</code></strong> with <strong>tuple unpacking</strong>.</li>
</ul>
<p>To get the most out of this tutorial, you should have a basic understanding of Python <a href="https://realpython.com/python-dicts/">dictionaries</a>, know how to use Python <a href="https://realpython.com/python-for-loop/"><code>for</code></a> loops, and be familiar with <a href="https://realpython.com/list-comprehension-python/">comprehensions</a>. Knowing other tools like the built-in <a href="https://realpython.com/python-map-function/"><code>map()</code></a> and <a href="https://realpython.com/python-filter-function/"><code>filter()</code></a> functions, as well as the <a href="https://realpython.com/python-itertools/"><code>itertools</code></a> and <a href="https://realpython.com/python-collections-module/"><code>collections</code></a> modules, is also a plus.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/iterate-through-dictionary-python-code/">Click here to download the sample code</a> that shows you how to iterate through a dictionary with Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Dictionary Iteration” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-dictionary-iteration/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="How to Iterate Through a Dictionary in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/How-to-Iterate-Through-A-Dictionary-in-Python_Watermarked.06d6547f531b.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-dictionary-iteration/"><span class="my-0 h4">Python Dictionary Iteration</span></a> 
      <p class="text-muted mb-0 small">Dictionaries are one of the most important and useful data structures in Python. Learning how to iterate through a Dictionary can help you solve a wide variety of programming problems in an efficient way. Test your understanding on how you can use them better!</p>
    </div>
  </div>

</div>

<h2 id="getting-started-with-python-dictionaries">Getting Started With Python Dictionaries<a class="headerlink" href="#getting-started-with-python-dictionaries" title="Permanent link"></a></h2>
<p>Dictionaries are a cornerstone of Python. Many aspects of the language are built around dictionaries. <a href="https://realpython.com/python-modules-packages/">Modules</a>, <a href="https://realpython.com/python-classes/">classes</a>, objects, <a href="https://realpython.com/python-scope-legb-rule/#globals"><code>globals()</code></a>, and <a href="https://realpython.com/python-scope-legb-rule/#locals"><code>locals()</code></a> are all examples of how dictionaries are deeply wired into Python’s implementation.</p>
<p>Here’s how the Python <a href="https://docs.python.org/3/index.html">official documentation</a> defines a dictionary:</p>
<blockquote>
<p>An associative array, where arbitrary keys are mapped to values. The keys can be any object with <code>__hash__()</code> and <code>__eq__()</code> methods. (<a href="https://docs.python.org/3/glossary.html#term-dictionary">Source</a>)</p>
</blockquote>
<p>There are a couple of points to notice in this definition:</p>
<ol>
<li>Dictionaries map <strong>keys</strong> to <strong>values</strong> and store them in an array or <strong>collection</strong>. The key-value pairs are commonly known as <strong>items</strong>.</li>
<li>Dictionary keys must be of a <a href="https://docs.python.org/3/glossary.html#term-hashable">hashable</a> type, which means that they must have a hash value that never changes during the key’s lifetime.</li>
</ol>
<p>Unlike <a href="https://docs.python.org/3/glossary.html#term-sequence">sequences</a>, which are <a href="https://realpython.com/python-iterators-iterables/#getting-to-know-python-iterables">iterables</a> that support element access using integer indices, dictionaries are indexed by keys. This means that you can access the values stored in a dictionary using the associated key rather than an integer index.</p>
<p>The keys in a dictionary are much like a <a href="https://realpython.com/python-sets/"><code>set</code></a>, which is a collection of hashable and unique objects. Because the keys need to be hashable, you can’t use <a href="https://docs.python.org/3/glossary.html#term-mutable">mutable</a> objects as dictionary keys.</p>
<p>On the other hand, dictionary values can be of any Python type, whether they’re hashable or not. There are literally no restrictions for values. You can use anything as a value in a Python dictionary.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> The concepts and topics that you’ll learn about in this section and throughout this tutorial refer to the <a href="https://realpython.com/cpython-source-code-guide/">CPython</a> implementation of Python. Other implementations, such as <a href="https://realpython.com/pypy-faster-python/">PyPy</a>, <a href="http://ironpython.net/">IronPython</a>, and <a href="http://www.jython.org/index.html">Jython</a>, could exhibit different dictionary behaviors and features that are beyond the scope of this tutorial.</p>
</div>
<p>Before Python 3.6, dictionaries were <em>unordered</em> data structures. This means that the order of items typically wouldn’t match the insertion order:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Python 3.5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"color"</span><span class="p">:</span> <span class="s2">"blue"</span><span class="p">,</span> <span class="s2">"fruit"</span><span class="p">:</span> <span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"pet"</span><span class="p">:</span> <span class="s2">"dog"</span><span class="p">}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span>
<span class="go">{'color': 'blue', 'pet': 'dog', 'fruit': 'apple'}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Note how the order of items in the resulting dictionary doesn’t match the order in which you originally inserted the items.</p>
<p>In Python 3.6 and greater, the keys and values of a dictionary retain the same order in which you insert them into the underlying dictionary. From 3.6 onward, dictionaries are compact <em>ordered</em> data structures:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Python 3.6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"color"</span><span class="p">:</span> <span class="s2">"blue"</span><span class="p">,</span> <span class="s2">"fruit"</span><span class="p">:</span> <span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"pet"</span><span class="p">:</span> <span class="s2">"dog"</span><span class="p">}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span>
<span class="go">{'color': 'blue', 'fruit': 'apple', 'pet': 'dog'}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Keeping the items in order is a pretty useful feature. However, if you work with code that supports older Python versions, then you must not rely on this feature, because it can generate buggy behaviors. With newer versions, it’s completely safe to rely on the feature.</p>
<p>Another important feature of dictionaries is that they’re <a href="https://realpython.com/python-mutable-vs-immutable-types/#dictionaries">mutable</a> data types. This means that you can add, delete, and update their items <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in place</a> as needed. It’s worth noting that this mutability also means that you can’t use a dictionary as a key in another dictionary.</p>
<h2 id="understanding-how-to-iterate-through-a-dictionary-in-python">Understanding How to Iterate Through a Dictionary in Python<a class="headerlink" href="#understanding-how-to-iterate-through-a-dictionary-in-python" title="Permanent link"></a></h2>
</div><h2><a href="https://realpython.com/iterate-through-dictionary-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/iterate-through-dictionary-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #229: The Joy of Tinkering &amp; Python Free-Threading Performance</title>
<link>https://realpython.com/podcasts/rpp/229/</link>
<guid>https://realpython.com/podcasts/rpp/229/</guid>
<content:encoded><![CDATA[
<div> Python, software development, learning, frameworks, collaboration
<br />
Python编程与软件开发的激情源泉，包括尝试新框架、建立小型项目、与其他开发者合作。Christopher Trudeau本周回顾了PyCoder's Weekly的文章和项目，分享了关于保持Python编程热情的建议与经验。 <div>
<p>What keeps your spark alive for developing software and learning Python? Do you like to try new frameworks, build toy projects, or collaborate with other developers? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-22T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Expression vs Statement in Python: What's the Difference?</title>
<link>https://realpython.com/quizzes/python-expression-vs-statement/</link>
<guid>https://realpython.com/quizzes/python-expression-vs-statement/</guid>
<content:encoded><![CDATA[
<div> 关键词: expressions, statements, Python, differences, code
总结:<br /><br />本文讨论了Python中表达式和语句的区别。表达式是一段代码，会产生一个值，而语句通常用于执行某些操作。文章强调了在代码中有效使用表达式和语句的重要性，以及它们在Python中的用法。通过这篇文章，读者能够重新审视Python中表达式和语句的关键差异，并学会如何在代码中有效地运用它们。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-expression-vs-statement/">Expression vs Statement in Python: What&rsquo;s the Difference?</a></p>
<p>By working through this quiz, you&rsquo;ll revisit the key differences between expressions and statements in Python, and how to use them effectively in your code.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-21T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Interacting With Python</title>
<link>https://realpython.com/quizzes/interacting-with-python/</link>
<guid>https://realpython.com/quizzes/interacting-with-python/</guid>
<content:encoded><![CDATA[
<div> Python, interaction, REPL, script files, IDEs

<br /><br />总结:
本文介绍了Python交互模式下的交互方式，包括使用REPL、Python脚本文件以及集成开发环境（IDEs）和代码编辑器。同时还探讨了其他一些可能有用的选项，如Jupyter Notebooks。阅读本文将帮助您重新审视与Python交互相关的关键概念。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of the different ways you can <a href="https://realpython.com/interacting-with-python/">interact with Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit key concepts related to Python interaction in interactive mode using the Read-Eval-Print Loop (REPL), through Python script files, and within Integrated Development Environments (IDEs) and code editors.</p>
<p>You&rsquo;ll also test your knowledge of some other options that may be useful, such as Jupyter Notebooks.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-21T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: NumPy Practical Examples: Useful Techniques</title>
<link>https://realpython.com/quizzes/numpy-example/</link>
<guid>https://realpython.com/quizzes/numpy-example/</guid>
<content:encoded><![CDATA[
<div> NumPy, Arrays, Techniques, Tutorial, Research
<br />
NumPy是Python中用于处理数组的强大库，本文介绍了NumPy数组的一些技巧和技术。通过此教程，你可以复习NumPy数组的理解，并扩展知识。除了教程内容，你可能还需要在外部进行一些研究以回答所有问题。挑战自我，让学习之旅带领你前行。
<br /><br />总结: NumPy是一个强大的Python库，用于处理数组。本文介绍了NumPy数组的技巧和技术，包括教程内容和扩展性研究。挑战自我，让学习带领你前行。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of the techniques covered in the tutorial
<a href="https://realpython.com/numpy-example/">NumPy Practical Examples: Useful Techniques</a>.</p>
<p>By working through the questions, you&rsquo;ll review your understanding of NumPy arrays and also expand on what you learned in the tutorial. </p>
<p>You&rsquo;ll need to do some research outside of the tutorial to answer all the questions. Embrace this challenge and let it take you on a learning journey.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-20T12:00:00+00:00</pubDate>
</item>
<item>
<title>NumPy Practical Examples: Useful Techniques</title>
<link>https://realpython.com/numpy-example/</link>
<guid>https://realpython.com/numpy-example/</guid>
<content:encoded><![CDATA[
<div> NumPy, scientific computing, multidimensional arrays, structured arrays, Jupyter Notebook<br />
<br />
总结:<br />
本文介绍了NumPy库在科学计算中的应用，并重点展示了一些其他教程中未经常强调的功能。读者将学习如何从文件中创建多维数组，识别和删除数组中的重复数据，使用结构化数组和分析图表等。在设置工作环境后，介绍了如何通过文件数据填充三维NumPy数组的方式。文章还提供了交互式测验和设置工作环境的指导。这篇教程对于想要加深对NumPy的了解和提高编程技能的读者来说会很有帮助。 <div>
<div><p>The <a href="https://numpy.org/doc/stable/reference/index.html#python-api">NumPy library</a> is a Python library used for scientific computing. It provides you with a multidimensional array object for storing and analyzing data in a wide variety of ways. In this tutorial, you’ll see examples of some features NumPy provides that aren’t always highlighted in other tutorials. You’ll also get the chance to practice your new skills with various exercises.  </p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Create <strong>multidimensional arrays</strong> from data stored in files</li>
<li>Identify and remove <strong>duplicate data</strong> from a NumPy array</li>
<li>Use <strong>structured NumPy arrays</strong> to reconcile the differences between datasets</li>
<li>Analyze and chart specific parts of <strong>hierarchical</strong> data</li>
<li>Create <strong>vectorized</strong> versions of your own functions</li>
</ul>
<p>If you’re new to NumPy, it’s a good idea to familiarize yourself with <a href="https://realpython.com/numpy-tutorial/">the basics of data science in Python</a> before you start. Also, you’ll be using <a href="https://realpython.com/python-matplotlib-guide/">Matplotlib</a> in this tutorial to create charts. While it’s not essential, getting acquainted with Matplotlib beforehand might be beneficial.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/numpy-example-useful-practical-techniques-code/">Click here to download the free sample code </a> that you’ll use to work through NumPy practical examples.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “NumPy Practical Examples: Useful Techniques” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/numpy-example/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="NumPy Practical Examples: Useful Techniques" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/NumPy-Code-Examples_Watermarked.8a37d754f2e1.jpg" style="background: #b8aae5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/numpy-example/"><span class="my-0 h4">NumPy Practical Examples: Useful Techniques</span></a> 
      <p class="text-muted mb-0 small">This quiz will challenge your knowledge of working with NumPy arrays. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.</p>
    </div>
  </div>

</div>

<h2 id="setting-up-your-working-environment">Setting Up Your Working Environment<a class="headerlink" href="#setting-up-your-working-environment" title="Permanent link"></a></h2>
<p>Before you can get started with this tutorial, you’ll need to do some initial setup. In addition to NumPy, you’ll need to install the <a href="https://matplotlib.org/stable/users/index.html">Matplotlib library</a>, which you’ll use to chart your data. You’ll also be using Python’s <a href="https://realpython.com/python-pathlib/"><code>pathlib</code> library</a> to access your computer’s file system, but there’s no need to install <code>pathlib</code> because it’s part of Python’s standard library.</p>
<p>You might consider using a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> to make sure your tutorial’s setup doesn’t interfere with anything in your existing Python environment.</p>
<p>Using a Jupyter Notebook within <a href="https://realpython.com/using-jupyterlab/">JupyterLab</a> to run your code instead of a <a href="https://realpython.com/python-repl/">Python REPL</a> is another useful option. It allows you to experiment and document your findings, as well as quickly view and edit files. The downloadable version of the code and exercise solutions are presented in Jupyter Notebook format.</p>
<p>The commands for setting things up on the common platforms are shown below:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<p>Fire up a <code>Windows PowerShell(Admin)</code> or <code>Terminal(Admin)</code> prompt, depending on the version of Windows that you’re using. Now type in the following commands:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-m</span> <span class="n">venv</span> <span class="n">venv</span><span class="p">\</span>
<span class="gp">PS&gt; </span><span class="n">venv</span><span class="p">\</span><span class="n">Scripts</span><span class="p">\</span><span class="n">activate</span>
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">numpy</span> <span class="n">matplotlib</span> <span class="n">jupyterlab</span>
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt; </span><span class="n">jupyter</span> <span class="n">lab</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here you create a virtual environment named <code>venv\</code>, which you then activate. If the activation is successful, then the virtual environment’s name will precede your Powershell prompt. Next, you install <code>numpy</code> and <code>matplotlib</code> into this virtual environment, followed by the optional <code>jupyterlab</code>. Finally, you start JupyterLab.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> When you activate your virtual environment, you may receive an error stating that your system can’t run the script. Modern versions of Windows don’t allow you to run scripts downloaded from the Internet as a security feature. </p>
<p>To <a href="https://realpython.com/python-coding-setup-windows/#loosening-your-execution-policy">fix this</a>, you need to type the command <code>Set-ExecutionPolicy RemoteSigned</code>, then answer <code>Y</code> to the question. Your computer will now run scripts that Microsoft has verified. Once you’ve done this, the <code>venv\Scripts\activate</code> command should work.  </p>
</div>
</div>
<div class="tab-pane fade " id="linux-macos-1">
<p>Fire up a terminal and type in the following commands:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv/
<span class="gp">$ </span><span class="nb">source</span><span class="w"> </span>venv/bin/activate
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>numpy<span class="w"> </span>matplotlib<span class="w"> </span>jupyterlab
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>jupyter<span class="w"> </span>lab
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here you create a virtual environment named <code>venv/</code>, which you then activate. If the activation is successful, then the virtual environment’s name will precede your command prompt. Next, you install <code>numpy</code> and <code>matplotlib</code> into this virtual environment, followed by the optional <code>jupyterlab</code>. Finally, you start JupyterLab.</p>
</div>
</div>
<p>You’ll notice that your prompt is preceded by <code>(venv)</code>. This means that anything you do from this point forward will stay in this environment and remain separate from other Python work you have elsewhere.</p>
<p>Now that you have everything set up, it’s time to begin the main part of your learning journey.</p>
<h2 id="numpy-example-1-creating-multidimensional-arrays-from-files">NumPy Example 1: Creating Multidimensional Arrays From Files<a class="headerlink" href="#numpy-example-1-creating-multidimensional-arrays-from-files" title="Permanent link"></a></h2>
<p>When you create a NumPy array, you create a highly-optimized data structure. One of the reasons for this is that a NumPy array stores all of its elements in a contiguous area of memory.  This <a href="https://en.wikipedia.org/wiki/Memory_management_(operating_systems)">memory management technique</a> means that the data is stored in the same memory region, making access times fast. This is, of course, highly desirable, but an issue occurs when you need to expand your array.</p>
<p>Suppose you need to import multiple files into a multidimensional array. You could read them into separate arrays and then combine them using <a href="https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html"><code>np.concatenate()</code></a>. However, this would create a <em>copy</em> of your original array before expanding the copy with the additional data. The copying is necessary to ensure the updated array will still exist contiguously in memory since the original array may have had non-related content adjacent to it.</p>
<p>Constantly copying arrays each time you add new data from a file can make processing slow and is wasteful of your system’s memory. The problem becomes worse the more data you add to your array. Although this copying process is built into NumPy, you can minimize its effects with these two steps:</p>
<ol>
<li>
<p>When setting up your initial array, determine how large it needs to be <em>before</em> populating it. You may even consider over-estimating its size to support any future data additions. Once you know these sizes, you can create your array upfront.</p>
</li>
<li>
<p>The second step is to populate it with the source data. This data will be slotted into your existing array without any need for it to be expanded.</p>
</li>
</ol>
<p>Next, you’ll explore how to populate a three-dimensional NumPy array. </p>
<h3 id="populating-arrays-with-file-data">Populating Arrays With File Data<a class="headerlink" href="#populating-arrays-with-file-data" title="Permanent link"></a></h3>
<p>In this first example, you’ll use the data from three files to populate a three-dimensional array. The content of each file is shown below, and you’ll also find these files in the downloadable materials:</p>
<p>The first file has two rows and three columns with the following content:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--red">
    <span class="mr-2 noselect">CSV</span>
    <span class="mr-2"><code style="color: inherit;">file1.csv</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code>1.1, 1.2, 1.3
1.4, 1.5, 1.6
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/numpy-example/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/numpy-example/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-20T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Dictionary Comprehensions: How and When to Use Them</title>
<link>https://realpython.com/quizzes/python-dictionary-comprehension/</link>
<guid>https://realpython.com/quizzes/python-dictionary-comprehension/</guid>
<content:encoded><![CDATA[
<div> Python、dictionary comprehensions、Python developer、Pythonic、tool

<br />
Python中的字典推导式是Python开发者的重要工具，它提供了一种Pythonic的方式来操作字典，可以成为你编程工具包中有价值的补充。字典推导式可以帮助你简化字典的创建和生成过程，让代码更具可读性和简洁性。作为一名Python开发者，掌握并理解字典推导式的用法对于提高编程效率和质量至关重要。通过掌握这一工具，你可以更加灵活地处理字典数据，提升自己的Python编程技能。总结:  Python开发者应该学会如何利用字典推导式来操作字典，以提高代码的可读性和简洁性。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-dictionary-comprehension/">Python Dictionary Comprehensions: How and When to Use Them</a>.</p>
<p>Understanding dictionary comprehensions is crucial for you as a Python developer because they provide a Pythonic tool for dictionary manipulation and can be a valuable addition to your programming toolkit.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-13T12:00:00+00:00</pubDate>
</item>
<item>
<title>Working With TOML and Python</title>
<link>https://realpython.com/courses/working-with-toml-python/</link>
<guid>https://realpython.com/courses/working-with-toml-python/</guid>
<content:encoded><![CDATA[
<div> TOML, Python community, configuration file format, pyproject.toml, tomli, tomllib, tomli_w, tomlkit

要点：TOML是Python社区广泛使用的配置文件格式，在构建和分发软件时会用到pyproject.toml。学习理解TOML语法，使用tomli和tomllib解析TOML文档，使用tomli_w将数据结构写入TOML，使用tomlkit控制TOML文件。

<br /><br />总结：TOML是Python社区喜爩的配置文件格式，学习掌握TOML语法，使用不同工具处理TOML文件，适用于构建和分发软件。 <div>
<p>TOML&mdash;Tom&rsquo;s Obvious Minimal Language&mdash;is a reasonably new configuration file format that the Python community has embraced over the last couple of years. TOML plays an essential part in the Python ecosystem. Many of your favorite tools rely on TOML for configuration, and you&rsquo;ll use <code>pyproject.toml</code> when you build and distribute your own packages.</p>
<p><strong>In this video course, you&rsquo;ll learn more about TOML and how you can use it. In particular, you&rsquo;ll:</strong></p>
<ul>
<li>Learn and understand the <strong>syntax</strong> of TOML</li>
<li>Use <code>tomli</code> and <code>tomllib</code> to <strong>parse</strong> TOML documents</li>
<li>Use <code>tomli_w</code> to <strong>write</strong> data structures as TOML</li>
<li>Use <code>tomlkit</code> when you need <strong>more control</strong> over your TOML files</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-19T14:00:00+00:00</pubDate>
</item>
<item>
<title>Interacting With Python</title>
<link>https://realpython.com/interacting-with-python/</link>
<guid>https://realpython.com/interacting-with-python/</guid>
<content:encoded><![CDATA[
<div> interactive, script file, IDE, Jupyter Notebook, online interpreters
<br />
Python有多种交互方式，包括交互式模式、脚本文件执行、集成开发环境（IDE）、Jupyter Notebook和在线解释器。在交互式模式中，可以直接在解释器中键入代码并执行。你可以用命令行执行脚本文件中的代码。通过IDE，你可以更好地组织和编辑代码。Jupyter Notebook提供交互性强的编程体验。在线解释器可以用于快速测试代码。最经典的初学者练习是打印"Hello, World!"到控制台。在Python交互式模式中，可以直接输入简短代码片段并获得输出。 <div>
<div><p>There are multiple ways of interacting with Python, and each can be useful for different scenarios. You can quickly explore functionality in Python’s interactive mode using the <a href="https://realpython.com/python-repl/">built-in Read-Eval-Print Loop (REPL)</a>, or you can write larger applications to a script file using an <a href="https://realpython.com/python-ides-code-editors-guide/">editor or Integrated Development Environment (IDE)</a>.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Use Python <strong>interactively</strong> by typing code directly into the interpreter</li>
<li>Execute code contained in a <strong>script file</strong> from the <strong>command line</strong></li>
<li>Work within a Python <strong>Integrated Development Environment (IDE)</strong></li>
<li>Assess additional options, such as the <strong>Jupyter Notebook</strong> and <strong>online interpreters</strong></li>
</ul>
<p>Before working through this tutorial, make sure that you have a functioning <a href="https://realpython.com/installing-python/">Python installation</a> at hand. Once you’re set up with that, it’s time to write some Python code!</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/interacting-with-python-code/">Click here to get the free sample code</a> that you’ll use to learn about interacting with Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Interacting With Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/interacting-with-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Interacting With Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Interacting-with-Python_Watermarked.0007ad8964b8.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/interacting-with-python/"><span class="my-0 h4">Interacting With Python</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the different ways of interacting with Python. By working through this quiz, you'll revisit key concepts related to Python interaction in interactive mode using the REPL, through Python script files, and within IDEs and code editors.</p>
    </div>
  </div>

</div>

<h2 id="hello-world">Hello, World!<a class="headerlink" href="#hello-world" title="Permanent link"></a></h2>
<p>There’s a long-standing custom in computer programming that the first code written in a newly installed language is a short program that displays the text <code>Hello, World!</code> to the console.</p>
<p>In Python, running a <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">“Hello, World!” program</a> only takes a single line of code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="s2">"Hello, World!"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, <code>print()</code> will display the text <em>Hello, World!</em> in quotes to your screen. In this tutorial, you’ll explore several ways to execute this code.</p>
<h2 id="running-python-in-interactive-mode">Running Python in Interactive Mode<a class="headerlink" href="#running-python-in-interactive-mode" title="Permanent link"></a></h2>
<p>The quickest way to start interacting with Python is in a <a href="https://realpython.com/python-repl/">Read-Eval-Print Loop (REPL)</a> environment. This means starting up the interpreter and typing commands to it directly.</p>
<p>When you interact with Python in this way, the interpreter will:</p>
<ul>
<li><strong>R</strong>ead the command you enter</li>
<li><strong>E</strong>valuate and execute the command</li>
<li><strong>P</strong>rint the output (if any) to the console</li>
<li><strong>L</strong>oop back and repeat the process</li>
</ul>
<p>The interactive session continues like this until you instruct the interpreter to stop. Using Python in this interactive mode is a great way to test short snippets of Python code and get more familiar with the language.</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<p>When you install Python using an installer, the <em>Start</em> menu shows a program group labeled <em>Python 3.x</em>. The label may vary depending on the particular installation you chose. Click on that item to start the Python interpreter.</p>
<p>Alternatively, you can open your <em>Command Prompt</em> or <em>PowerShell</em> application and type the <code>py</code> command to launch it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">py</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
<div class="tab-pane fade " id="linux-macos-1">
<p>To start the Python interpreter, open your <em>Terminal</em> application and type <code>python3</code> to launch it from the command line:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python3
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
</div>
<p>If you’re unfamiliar with this application, then you can use your operating system’s search function to find it.</p>
<p>After pressing <span class="keys"><kbd class="key-enter">Enter</kbd></span>, you should see a response from the Python interpreter similar to the one below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="go">Python 3.13.0 (main, Oct 14 2024, 10:34:31) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin</span>
<span class="go">Type "help", "copyright", "credits" or "license" for more information.</span>
<span class="hll"><span class="gp">&gt;&gt;&gt;</span>
</span></code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>If you’re <em>not</em> seeing the <code>&gt;&gt;&gt;</code> prompt, then you’re not talking to the Python interpreter. This could be because Python is either not installed or not in the path of your terminal window session.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> If you need additional help to get to this point, then you can check out the <a href="https://realpython.com/installing-python/">How to Install Python on Your System: A Guide</a> tutorial.</p>
</div>
<p>If you’re seeing the prompt, then you’re off and running! With these next steps, you’ll execute the statement that displays <code>"Hello, World!"</code> to the console:</p>
<ol>
<li>Ensure that Python displays the <code>&gt;&gt;&gt;</code> prompt, and that you position your cursor after it.</li>
<li>Type the command <code>print("Hello, World!")</code> exactly as shown.</li>
<li>Press the <span class="keys"><kbd class="key-enter">Enter</kbd></span> key.</li>
</ol>
</div><h2><a href="https://realpython.com/interacting-with-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/interacting-with-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-18T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using the Python zip() Function for Parallel Iteration</title>
<link>https://realpython.com/python-zip-function/</link>
<guid>https://realpython.com/python-zip-function/</guid>
<content:encoded><![CDATA[
<div> zip()、iterables、tuples、dictionaries、lazy
<br />
zip()函数在Python中将来自多个可迭代对象的元素合并成元组，在处理多个序列时非常有效。dict(zip())可以通过将键和值从两个序列配对来创建字典。zip()在Python中是惰性的，意味着它返回一个迭代器而不是一个列表。虽然Python中没有unzip()函数，但可以使用解包操作符*来反转这个过程。zip_longest()是处理长度不等的可迭代对象的替代方法。zip()函数的标志是zip(*iterables, strict=False)。调用zip()时，返回一个生成由每个迭代器的元素组成的元组的迭代器。没传入参数时返回一个空的迭代器。通过本教程，你将了解如何使用zip()进行并行迭代以及处理长度不等的可迭代对象，并发现在与字典一起使用zip()时的便利性。对列表、元组或其他数据结构进行操作时，理解zip()函数会提高编码技能和简化Python项目。 
<br /><br />总结:zip()函数可以将多个可迭代对象合并成元组，用于并行迭代和字典创建。通过dict(zip())创建字典，zip()是惰性的，返回迭代器而不是列表。没有unzip()函数，但可以使用解包操作符*进行反转。zip_longest()处理长度不等的可迭代对象。 <div>
<div><p>Python’s <code>zip()</code> function combines elements from multiple iterables. Calling <code>zip()</code> generates an iterator that yields tuples, each containing elements from the input iterables. This function is essential for tasks like parallel iteration and dictionary creation, offering an efficient way to handle multiple sequences in Python programming.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li><code>zip()</code> in Python aggregates elements from multiple iterables into tuples, facilitating <strong>parallel iteration</strong>.</li>
<li><code>dict(zip())</code> <strong>creates dictionaries</strong> by pairing keys and values from two sequences.</li>
<li><code>zip()</code> is <strong>lazy</strong> in Python, meaning it returns an iterator instead of a list.</li>
<li>There’s no <code>unzip()</code> function in Python, but the same <code>zip()</code> function can <strong>reverse the process</strong> using the unpacking operator <code>*</code>.</li>
<li>Alternatives to <code>zip()</code> include <code>itertools.zip_longest()</code> for handling iterables of <strong>unequal lengths</strong>.</li>
</ul>
<p>In this tutorial, you’ll explore how to use <code>zip()</code> for parallel iteration. You’ll also learn how to handle iterables of unequal lengths and discover the convenience of using <code>zip()</code> with dictionaries. Whether you’re working with lists, tuples, or other data structures, understanding <code>zip()</code> will enhance your coding skills and streamline your Python projects.</p>
<div class="alert alert-warning">
<p><strong>Free Bonus:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-mastery-course/">5 Thoughts On Python Mastery</a>, a free course for Python developers that shows you the roadmap and the mindset you’ll need to take your Python skills to the next level.</p>
</div>
<h2 id="understanding-the-python-zip-function">Understanding the Python <code>zip()</code> Function<a class="headerlink" href="#understanding-the-python-zip-function" title="Permanent link"></a></h2>
<p><code>zip()</code> is available in the <a href="https://docs.python.org/3/library/builtins.html">built-in namespace</a>. If you use <code>dir()</code> to inspect  <code>__builtins__</code>, then you’ll see <code>zip()</code> at the end of the list:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">dir</span><span class="p">(</span><span class="n">__builtins__</span><span class="p">)</span>
<span class="go">['ArithmeticError', 'AssertionError', 'AttributeError', ..., 'zip']</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You can see that <code>'zip'</code> is the last entry in the list of available objects.</p>
<p>According to the <a href="https://docs.python.org/3/library/functions.html#zip">official documentation</a>, Python’s <code>zip()</code> function behaves as follows:</p>
<blockquote>
<p>Returns an iterator of tuples, where the <em>i</em>-th tuple contains the <em>i</em>-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator. (<a href="https://docs.python.org/3/library/functions.html#zip">Source</a>)</p>
</blockquote>
<p>You’ll unpack this definition throughout the rest of the tutorial. As you work through the code examples, you’ll see that Python zip operations work just like the physical zipper on a bag or pair of jeans. Interlocking pairs of teeth on both sides of the zipper are pulled together to close an opening. In fact, this visual analogy is perfect for understanding <code>zip()</code>, since the function was named after physical zippers!</p>
<h2 id="using-zip-in-python">Using <code>zip()</code> in Python<a class="headerlink" href="#using-zip-in-python" title="Permanent link"></a></h2>
<p>The signature of Python’s <code>zip()</code> function is <code>zip(*iterables, strict=False)</code>. You’ll learn more about <code>strict</code> later. The function takes in <a href="https://docs.python.org/3/glossary.html#term-iterable">iterables</a> as arguments and returns an <strong>iterator</strong>. This iterator generates a series of tuples containing elements from each iterable. <code>zip()</code> can accept any type of iterable, such as <a href="https://realpython.com/read-write-files-python/">files</a>, <a href="https://realpython.com/python-lists-tuples/">lists, tuples</a>, <a href="https://realpython.com/python-dicts/">dictionaries</a>, <a href="https://realpython.com/python-sets/">sets</a>, and so on.</p>
<h3 id="passing-n-arguments">Passing <code>n</code> Arguments<a class="headerlink" href="#passing-n-arguments" title="Permanent link"></a></h3>
<p>If you use <code>zip()</code> with <code>n</code> arguments, then the function will return an iterator that generates tuples of length <code>n</code>. To see this in action, take a look at the following code block:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipped</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipped</span>  <span class="c1"># Holds an iterator object</span>
<span class="go">&lt;zip object at 0x7fa4831153c8&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">zipped</span><span class="p">)</span>
<span class="go">&lt;class 'zip'&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">zipped</span><span class="p">)</span>
<span class="go">[(1, 'a'), (2, 'b'), (3, 'c')]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, you use <code>zip(numbers, letters)</code> to create an iterator that produces tuples of the form <code>(x, y)</code>. In this case, the <code>x</code> values are taken from <code>numbers</code> and the <code>y</code> values are taken from <code>letters</code>. Notice how the Python <code>zip()</code> function returns an iterator. To retrieve the final list object, you need to use <code>list()</code> to consume the iterator.</p>
<p>If you’re working with sequences like lists, tuples, or <a href="https://realpython.com/python-strings/">strings</a>, then your iterables are guaranteed to be evaluated from left to right. This means that the resulting list of tuples will take the form <code>[(numbers[0], letters[0]), (numbers[1], letters[1]),..., (numbers[n], letters[n])]</code>. However, for other types of iterables (like <a href="https://realpython.com/python-sets/">sets</a>), you might see some weird results:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">s1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"b"</span><span class="p">,</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">))</span>
<span class="go">[(1, 'a'), (2, 'c'), (3, 'b')]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, <code>s1</code> and <code>s2</code> are <code>set</code> objects, which don’t keep their elements in any particular order. This means that the tuples returned by <code>zip()</code> will have elements that are paired up randomly. If you’re going to use the Python <code>zip()</code> function with unordered iterables like sets, then this is something to keep in mind.</p>
<h3 id="passing-no-arguments">Passing No Arguments<a class="headerlink" href="#passing-no-arguments" title="Permanent link"></a></h3>
<p>You can call <code>zip()</code> with no arguments as well. In this case, you’ll simply get an empty iterator:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">zipped</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipped</span>
<span class="go">&lt;zip object at 0x7f196294a488&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">zipped</span><span class="p">)</span>
<span class="go">[]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, you call <code>zip()</code> with no arguments, so your <code>zipped</code> <a href="https://realpython.com/python-variables/">variable</a> holds an empty iterator. If you consume the iterator with <code>list()</code>, then you’ll see an empty list as well.</p>
</div><h2><a href="https://realpython.com/python-zip-function/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-zip-function/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using the len() Function in Python</title>
<link>https://realpython.com/len-python-function/</link>
<guid>https://realpython.com/len-python-function/</guid>
<content:encoded><![CDATA[
<div> len()、Python、数据类型、序列、容器
len()函数是Python中的一个内置函数，用于返回对象的长度。它可以用于不同的数据类型，如字符串、列表或字典。可以使用len()获取字符串、列表、元组和range对象等序列数据类型的长度。在使用len()时，对于大多数数据类型，函数的时间复杂度是常数时间O(1)，因为它访问对象的长度属性。总结: len()函数是Python中的内置函数，用于获取对象的长度，可用于各种数据类型，包括字符串、列表、元组和range对象等序列数据类型。它的时间复杂度通常是常数时间O(1)。通过实践，掌握len()可以让你更好地理解Python的数据结构，编写更强大、更灵活的程序。 <div>
<div><p>The <code>len()</code> function in Python is a powerful and efficient tool used to determine the number of items in objects, such as sequences or collections. You can use <code>len()</code> with various data types, including strings, lists, dictionaries, and third-party types like NumPy arrays and pandas DataFrames. Understanding how <code>len()</code> works with different data types helps you write more efficient and concise Python code.</p>
<p>Using <code>len()</code> in Python is straightforward for built-in types, but you can extend it to your custom classes by implementing the <code>.__len__()</code> method. This allows you to customize what <em>length</em> means for your objects. For example, with pandas DataFrames, <code>len()</code> returns the number of rows. Mastering <code>len()</code> not only enhances your grasp of Python’s data structures but also empowers you to craft more robust and adaptable programs.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li>The <code>len()</code> function in Python returns the number of items in an object, such as strings, lists, or dictionaries.</li>
<li>To get the length of a string in Python, you use <code>len()</code> with the string as an argument, like <code>len("example")</code>.</li>
<li>To find the length of a list in Python, you pass the list to <code>len()</code>, like <code>len([1, 2, 3])</code>.</li>
<li>The <code>len()</code> function operates in constant time, <em>O(1)</em>, as it accesses a length attribute in most cases.</li>
</ul>
<p>In this tutorial, you’ll learn when to use the <code>len()</code> Python function and how to use it effectively. You’ll discover which built-in data types are valid arguments for <code>len()</code> and which ones you can’t use. You’ll also learn how to use <code>len()</code> with third-party types like <code>ndarray</code> in <a href="https://realpython.com/numpy-tutorial/">NumPy</a> and <code>DataFrame</code> in <a href="https://realpython.com/pandas-python-explore-dataset/">pandas</a>, and with your own classes.</p>
<div class="alert alert-warning"><p><strong>Free Bonus:</strong> <a class="alert-link" href="">Click here to get a Python Cheat Sheet</a> and learn the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.</p></div>

<h2 id="getting-started-with-pythons-len">Getting Started With Python’s <code>len()</code><a class="headerlink" href="#getting-started-with-pythons-len" title="Permanent link"></a></h2>
<p>The function <a href="https://docs.python.org/3.9/library/functions.html?highlight=len#len"><code>len()</code></a> is one of Python’s built-in functions. It returns the length of an object. For example, it can return the number of items in a list. You can use the function with many different data types. However, not all data types are valid arguments for <code>len()</code>.</p>
<p>You can start by looking at the help for this function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">len</span><span class="p">)</span>
<span class="go">Help on built-in function len in module builtins:</span>
<span class="go">len(obj, /)</span>
<span class="go">    Return the number of items in a container.</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The function takes an object as an argument and returns the length of that object. The <a href="https://docs.python.org/3/library/functions.html?highlight=len#len">documentation</a> for <code>len()</code> goes a bit further:</p>
<blockquote>
<p>Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set). (<a href="https://docs.python.org/3/library/functions.html?highlight=len#len">Source</a>)</p>
</blockquote>
<p>When you use built-in data types and many third-party types with <code>len()</code>, the function doesn’t need to iterate through the data structure. The length of a container object is stored as an attribute of the object. The value of this attribute is modified each time items are added to or removed from the data structure, and <code>len()</code> returns the value of the length attribute. This ensures that <code>len()</code> works efficiently.</p>
<p>In the following sections, you’ll learn about how to use <code>len()</code> with sequences and collections. You’ll also learn about some data types that you cannot use as arguments for the <code>len()</code> Python function.</p>
<h3 id="using-len-with-built-in-sequences">Using <code>len()</code> With Built-in Sequences<a class="headerlink" href="#using-len-with-built-in-sequences" title="Permanent link"></a></h3>
<p>A <strong>sequence</strong> is a container with ordered items. <a href="https://realpython.com/python-lists-tuples/">Lists, tuples</a>, and <a href="https://realpython.com/python-strings/">strings</a> are three of the basic built-in sequences in Python. You can find the length of a sequence by calling <code>len()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">greeting</span> <span class="o">=</span> <span class="s2">"Good Day!"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
<span class="go">9</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">office_days</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Tuesday"</span><span class="p">,</span> <span class="s2">"Thursday"</span><span class="p">,</span> <span class="s2">"Friday"</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">office_days</span><span class="p">)</span>
<span class="go">3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">london_coordinates</span> <span class="o">=</span> <span class="p">(</span><span class="mf">51.50722</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1275</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">london_coordinates</span><span class="p">)</span>
<span class="go">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>When finding the length of the string <code>greeting</code>, the list <code>office_days</code>, and the tuple <code>london_coordinates</code>, you use <code>len()</code> in the same manner. All three data types are valid arguments for <code>len()</code>.</p>
<p>The function <code>len()</code> always returns an integer as it’s counting the number of items in the object that you pass to it. The function returns <code>0</code> if the argument is an empty sequence:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">([])</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(())</span>
<span class="go">0</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the examples above, you find the length of an empty string, an empty list, and an empty tuple. The function returns <code>0</code> in each case.</p>
<p>A <code>range</code> object is also a sequence that you can create using <a href="https://realpython.com/python-range/"><code>range()</code></a>. A <code>range</code> object doesn’t store all the values but generates them when they’re needed. However, you can still find the length of a <code>range</code> object using <code>len()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">10</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This range of numbers includes the integers from <code>1</code> to <code>19</code> with increments of <code>2</code>. The length of a <code>range</code> object can be determined from the start, stop, and step values.</p>
<p>In this section, you’ve used the <code>len()</code> Python function with strings, lists, tuples, and <code>range</code> objects. However, you can also use the function with any other built-in sequence.</p>
</div><h2><a href="https://realpython.com/len-python-function/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/len-python-function/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Namespaces and Scope in Python</title>
<link>https://realpython.com/quizzes/python-namespaces-scope/</link>
<guid>https://realpython.com/quizzes/python-namespaces-scope/</guid>
<content:encoded><![CDATA[
<div> Python, namespaces, symbolic names, objects, variable scope
<br />
命名空间是Python中组织符号名称和对象的方式，Python在创建新命名空间时会如何操作，命名空间是如何实现的，变量作用域决定了符号名称的可见性。总结: Python中的命名空间是一种组织符号名称和对象的机制，Python会在特定情况下创建新的命名空间，命名空间的实现方式包括作用域链和字典等，变量的作用域决定了符号名称在代码中的可见性。通过理解Python的命名空间机制，我们可以更好地管理符号名称和对象，提高代码的可读性和维护性。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-namespaces-scope/">Python Namespaces and Scope</a>.</p>
<p>You&rsquo;ll revisit how Python organizes symbolic names and objects in namespaces, when Python creates a new namespace, how namespaces are implemented, and how variable scope determines symbolic name visibility.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-14T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #228: Maintaining the Foundations of Python &amp; Cautionary Tales</title>
<link>https://realpython.com/podcasts/rpp/228/</link>
<guid>https://realpython.com/podcasts/rpp/228/</guid>
<content:encoded><![CDATA[
<div> Python, open-source, community, funding, lessons

Python语言作为一个开源项目，其持续发展和社区建设是其成功的重要因素。通过与JetBrains的Paul Everitt讨论，我们了解到了如何在开源项目和社区中实现可持续发展。从Python的历史和WordPress社区目前面临的困境中，我们可以学到很多经验教训。重点在于如何有效管理开源项目的资金和资源，建立积极的社区氛围。Python Software Foundation的成立标志着Python社区不断壮大和成熟。通过学习这些经验，我们可以更好地规划和管理开源项目和社区，确保其长期发展和成功。<br /><br />总结: 通过Python及WordPress社区的例子，探讨了开源项目与社区的可持续发展之道，重点在于有效管理资源和建立积极社区氛围，Python Software Foundation的成立是一个成功的案例。 <div>
<p>How do you build a sustainable open-source project and community? What lessons can be learned from Python's history and the current mess that the WordPress community is going through? This week on the show, we speak with Paul Everitt from JetBrains about navigating open-source funding and the start of the Python Software Foundation.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Basic Input and Output in Python</title>
<link>https://realpython.com/quizzes/python-input-output/</link>
<guid>https://realpython.com/quizzes/python-input-output/</guid>
<content:encoded><![CDATA[
<div> input() print() readline 输出格式化 使用<br /><br />总结: 本文介绍了如何使用Python内置函数input()和print()进行操作，以及如何使用readline来改善用户体验。同时还讨论了如何使用print()函数的sep和end关键字参数来格式化输出。学习这些技巧可以帮助提高Python编程的效率和用户交互体验。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of how to use Python&rsquo;s built-in functions <code>input()</code> and <code>print()</code> for <a href="https://realpython.com/python-input-output/">basic input and output</a> operations.</p>
<p>You&rsquo;ll also revisit how to use <code>readline</code> to improve the user experience when collecting input, and how to format output using the <code>sep</code> and <code>end</code> keyword arguments of <code>print()</code>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-13T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Dictionary Comprehensions: How and When to Use Them</title>
<link>https://realpython.com/python-dictionary-comprehension/</link>
<guid>https://realpython.com/python-dictionary-comprehension/</guid>
<content:encoded><![CDATA[
<div> 创建、转换、筛选、字典推导、Python<br />
字典推导是Python中一种快速创建、转换和筛选字典的简洁方法。它可以显著提高代码的简洁性和可读性，比起使用普通的for循环处理字典更为高效。文章介绍了使用字典推导来创建字典、转换现有字典以及通过条件筛选键值对等技巧。字典推导是Python开发中重要的工具，可以有效地操控字典，是编程工具箱中有价值的补充。文章从创建字典、使用for循环、字典构造函数dict()、字典推导、总结了使用字典推导的重要性和灵活性。总结: 字典推导是Python编程中强大的工具，可以简化字典操作，提高代码的简洁性和可读性。 <div>
<div><p>Dictionary comprehensions are a concise and quick way to create, transform, and filter dictionaries in Python. They can significantly enhance your code’s conciseness and readability compared to using regular <code>for</code> loops to process your dictionaries.</p>
<p>Understanding dictionary comprehensions is crucial for you as a Python developer because they’re a Pythonic tool for dictionary manipulation and can be a valuable addition to your programming toolkit.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Create</strong> dictionaries using dictionary comprehensions</li>
<li><strong>Transform</strong> existing dictionaries with comprehensions</li>
<li><strong>Filter</strong> key-value pairs from dictionaries using conditionals</li>
<li><strong>Decide</strong> when to use dictionary comprehensions</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with basic Python concepts, such as <a href="https://realpython.com/python-for-loop/"><code>for</code></a> loops, <a href="https://realpython.com/python-iterators-iterables/">iterables</a>, and <a href="https://realpython.com/python-dicts/">dictionaries</a>, as well as <a href="https://realpython.com/list-comprehension-python/">list comprehensions</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-dictionary-comprehension-code/">Click here to download the free sample code</a> that you’ll use to learn about dictionary comprehensions in Python.</p>
</div>
<h2 id="creating-and-transforming-dictionaries-in-python">Creating and Transforming Dictionaries in Python<a class="headerlink" href="#creating-and-transforming-dictionaries-in-python" title="Permanent link"></a></h2>
<p>In Python programming, you’ll often need to create, populate, and transform dictionaries. To do this, you can use dictionary literals, the <code>dict()</code> <a href="https://realpython.com/python-multiple-constructors/">constructor</a>, and <code>for</code> loops. In the following sections, you’ll take a quick look at how to use these tools. You’ll also learn about dictionary comprehensions, which are a powerful way to manipulate dictionaries in Python.</p>
<h3 id="creating-dictionaries-with-literals-and-dict">Creating Dictionaries With Literals and <code>dict()</code><a class="headerlink" href="#creating-dictionaries-with-literals-and-dict" title="Permanent link"></a></h3>
<p>To create new dictionaries, you can use literals. A dictionary literal is a series of key-value pairs enclosed in curly braces. The syntax of a dictionary literal is shown below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python Syntax</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="p">{</span><span class="n">key_1</span><span class="p">:</span> <span class="n">value_1</span><span class="p">,</span> <span class="n">key_2</span><span class="p">:</span> <span class="n">value_2</span><span class="p">,</span><span class="o">...</span><span class="p">,</span> <span class="n">key_N</span><span class="p">:</span> <span class="n">value_N</span><span class="p">}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The keys must be <a href="https://realpython.com/python-hash-table/#use-hashable-keys">hashable</a> objects and are commonly strings. The values can be any Python object, including other dictionaries. Here’s a quick example of a dictionary:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"color"</span><span class="p">:</span> <span class="s2">"blue"</span><span class="p">,</span> <span class="s2">"fruit"</span><span class="p">:</span> <span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"pet"</span><span class="p">:</span> <span class="s2">"dog"</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span>
<span class="go">{'color': 'blue', 'fruit': 'apple', 'pet': 'dog'}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span><span class="p">[</span><span class="s2">"hobby"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"guitar"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">likes</span>
<span class="go">{'color': 'blue', 'fruit': 'apple', 'pet': 'dog', 'hobby': 'guitar'}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you create dictionary key-value pairs that describe things people often like. The keys and values of your dictionary are string objects. You can add new pairs to the dictionary using the <code>dict[key] = value</code> syntax.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about dictionaries, check out the <a href="https://realpython.com/python-dicts/">Dictionaries in Python</a> tutorial.</p>
</div>
<p>You can also create new dictionaries using the <code>dict()</code> constructor:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">dict</span><span class="p">(</span><span class="n">apple</span><span class="o">=</span><span class="mf">0.40</span><span class="p">,</span> <span class="n">orange</span><span class="o">=</span><span class="mf">0.35</span><span class="p">,</span> <span class="n">banana</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)</span>
<span class="go">{'apple': 0.4, 'orange': 0.35, 'banana': 0.25}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you create a new dictionary using <code>dict()</code> with keyword arguments. In this case, the keys are strings and the values are floating-point numbers. It’s important to note that the <code>dict()</code> constructor is only suitable for those cases where the dictionary keys can be strings that are valid Python <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers">identifiers</a>.</p>
<h3 id="using-for-loops-to-populate-dictionaries">Using <code>for</code> Loops to Populate Dictionaries<a class="headerlink" href="#using-for-loops-to-populate-dictionaries" title="Permanent link"></a></h3>
<p>Sometimes, you need to start with an empty dictionary and populate it with key-value pairs dynamically. To do this, you can use a <code>for</code> loop. For example, say that you want to create a dictionary in which keys are integer numbers and values are powers of <code>2</code>.</p>
<p>Here’s how you can do this with a <code>for</code> loop:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">powers_of_two</span> <span class="o">=</span> <span class="p">{}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">integer</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">powers_of_two</span><span class="p">[</span><span class="n">integer</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">integer</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">powers_of_two</span>
<span class="go">{1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you create an empty dictionary using an empty pair of curly braces. Then, you run a loop over a <a href="https://realpython.com/python-range/">range</a> of integer numbers from <code>1</code> to <code>9</code>. Inside the loop, you populate the dictionary with the integer numbers as keys and powers of two as values.</p>
<p>The loop in this example is readable and clear. However, you can also use dictionary comprehension to create and populate a dictionary like the one shown above.</p>
<h3 id="introducing-dictionary-comprehensions">Introducing Dictionary Comprehensions<a class="headerlink" href="#introducing-dictionary-comprehensions" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/python-dictionary-comprehension/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-dictionary-comprehension/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-13T14:00:00+00:00</pubDate>
</item>
<item>
<title>Formatting Floats Inside Python F-Strings</title>
<link>https://realpython.com/courses/format-floats-f-strings/</link>
<guid>https://realpython.com/courses/format-floats-f-strings/</guid>
<content:encoded><![CDATA[
<div> f-string, formatted string literal, Python 3.6, round, calculations

总结:<br /><br />
Python 3.6引入了f-string，即格式化字符串字面值，可以更方便地在字符串中格式化和舍入计算结果。使用f-string可以直接在字符串中插入表达式、函数调用或变量，简化了之前需要先舍入再进行字符串拼接的繁琐操作。通过在字符串前加上小写或大写字母f并使用一对花括号来指定替换字段，可以更直观地定制字符串内容。这种方式让Python代码更易于阅读和维护，提高了代码的可读性和可用性。 <div>
<p>You&rsquo;ll often need to format and round a Python <a href="https://docs.python.org/3/library/functions.html#float"><code>float</code></a> to display the results of your calculations neatly within strings. In earlier versions of Python, this was a messy thing to do because you needed to round your numbers <em>first</em> and then use either string concatenation or the <a href="https://realpython.com/python-string-formatting/#1-old-style-string-formatting-operator">old string formatting</a> technique to do this for you. </p>
<p>Since Python 3.6, the <a href="https://peps.python.org/pep-0498/">literal string interpolation</a>, more commonly known as a <strong>formatted string literal</strong> or <strong><a href="https://realpython.com/python-f-strings/">f-string</a></strong>, allows you to customize the content of your strings in a more readable way.</p>
<p>An f-string is a literal string prefixed with a lowercase or uppercase letter <code>f</code> and contains zero or more <strong>replacement fields</strong> enclosed within a pair of curly braces <code>{...}</code>. Each field contains an <strong>expression</strong> that produces a value. You can calculate the field&rsquo;s content, but you can also use function calls or even variables.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-12T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News Roundup: November 2024</title>
<link>https://realpython.com/python-news-november-2024/</link>
<guid>https://realpython.com/python-news-november-2024/</guid>
<content:encoded><![CDATA[
<div> GitHub Octoverse 2024, Python, Python 3.13, Python Developers Survey 2024, PyCon US conference<br />
Python在GitHub Octoverse 2024报告中排名第一，Python 3.13发布为未来改进奠定基础，Python Developers Survey 2024能够塑造未来版本方向，PyCon US conference将于明年举行，展示Python的持续受欢迎程度。总结: Python在GitHub Octoverse 2024报告中名列前茅，发布Python 3.13并展望未来，加入Python Developers Survey 2024塑造未来发展方向，注意未来PyCon US conference和Python 3.14发布日期。 <div>
<div><p>The latest Python developments all point to the same thing—Python is currently thriving. The recent <strong>GitHub Octoverse 2024 report</strong> has revealed that Python is now the most used language on GitHub. Also, last month saw the release of <strong>Python 3.13</strong>, which is already laying the groundwork for some exciting future improvements. </p>
<p>While Python core developers have been busy exploring the language’s features as they tinker with upcoming enhancements, it’s good to know that working on Python’s source code isn’t the only way you can contribute to Python’s future. Another way to shape the focus of upcoming releases is to join the <strong>Python Developers Survey 2024</strong>.</p>
<p>And with the end of the year in sight, you may want to venture a look at next year’s calendar and mark some dates, such as the <strong>PyCon US</strong> conference in May or the <strong>Python 3.14</strong> release in October 2025.</p>
<p>Now that you know the highlights, it’s time to dive into the most important Python news for November. </p>
<div class="alert alert-warning"><p><strong>Join Now:</strong> <a class="alert-link" href="">Click here to join the Real Python Newsletter</a> and you'll never miss another Python tutorial, course update, or post.</p></div>

<h2 id="pythons-popularity-shines-in-githubs-octoverse-2024">Python’s Popularity Shines in GitHub’s Octoverse 2024<a class="headerlink" href="#pythons-popularity-shines-in-githubs-octoverse-2024" title="Permanent link"></a></h2>
<p>The latest <a href="https://github.blog/news-insights/octoverse/octoverse-2024/">Octoverse report for 2024</a> shows that Python remains one of the most widely used languages on GitHub, securing its place as a core language in open-source and professional development. Python ranked among the top three most-used languages, demonstrating its continued appeal across industries and experience levels:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/python-news-octoverse-2024.d69266b82995.png" target="_blank"><img alt="Octoverse 2024 Results for Programming languages" class="img-fluid mx-auto d-block " height="1902" src="https://files.realpython.com/media/python-news-octoverse-2024.d69266b82995.png" width="1920" /></a></figure>

<p>As GitHub’s annual report illustrates, Python’s popularity is fueled by its solid role in developing machine learning and artificial intelligence frameworks.</p>
<p>Another takeaway from the Octoverse survey is Python’s strong community engagement. Python developers are not only active in contributing code but also in participating in discussions, filing issues, and reviewing pull requests.</p>
</div><h2><a href="https://realpython.com/python-news-november-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-november-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-11T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #227: New PEPs: Template Strings &amp; External Wheel Hosting</title>
<link>https://realpython.com/podcasts/rpp/227/</link>
<guid>https://realpython.com/podcasts/rpp/227/</guid>
<content:encoded><![CDATA[
<div> f-strings, flexibility, safety checks, deferred evaluation, logging
<br /><br />
deferred evaluation 可以提供安全检查来防止注入攻击，同时也能享受到 f-strings 的灵活性。Christopher Trudeau 本周再次到来，并带来一些 PyCoder's Weekly 的文章和项目。总结: deferred evaluation 提供了安全检查以防注入攻击，同时也保持了 f-strings 的灵活性。Christopher Trudeau 分享了一些 PyCoder's Weekly 的文章和项目。 <div>
<p>Have you wanted the flexibility of f-strings but need safety checks in place? What if you could have deferred evaluation for logging or avoiding injection attacks? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-08T12:00:00+00:00</pubDate>
</item>
<item>
<title>How to Reset a pandas DataFrame Index</title>
<link>https://realpython.com/pandas-reset-index/</link>
<guid>https://realpython.com/pandas-reset-index/</guid>
<content:encoded><![CDATA[
<div> pandas, DataFrame, 索引, 重置, 数据分析 <br />
本文介绍了如何重置 pandas DataFrame 的索引，重置索引的原因，以及如果不重置可能出现的问题。首先，通过使用 pandas 库将数据读取到 DataFrame 中，然后对数据进行分析和操作。重置索引是为了更方便地访问和操作数据。此外，介绍了使用 pyarrow 库进行数据类型转换的方法，以及如何在 DataFrame 中添加有意义的索引。最后，重申了 pd.index 在数据分析中的作用，以及新兴的 Polars 库对索引的替代方法。<br /><br />总结: <div>
<div><p>In this tutorial, you’ll learn how to reset a pandas DataFrame index, the reasons why you might want to do this, and the problems that could occur if you don’t.</p>
<p>Before you start your learning journey, you should familiarize yourself with how to create a <a href="https://realpython.com/pandas-dataframe/">pandas DataFrame</a>. Knowing the difference between a <a href="https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe">DataFrame</a> and a <a href="https://pandas.pydata.org/docs/user_guide/dsintro.html#series">pandas Series</a> will also prove useful to you.</p>
<p>In addition, you may want to use the data analysis tool <a href="https://realpython.com/jupyter-notebook-introduction/">Jupyter Notebook</a> as you work through the examples in this tutorial. Alternatively, <a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html">JupyterLab</a> will give you an <a href="https://realpython.com/using-jupyterlab/">enhanced notebook experience</a>, but feel free to use any Python environment you wish.</p>
<p>As a starting point, you’ll need some data. To begin with, you’ll use the <code>band_members.csv</code> file included in the downloadable materials that you can access by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/pandas-reset-index-code/">Click here to download the free sample code</a> you’ll use to learn how to reset a pandas DataFrame index.</p>
</div>
<p>The table below describes the data from <code>band_members.csv</code> that you’ll begin with:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Column Name</th>
<th>PyArrow Data Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>first_name</code></td>
<td><code>string</code></td>
<td>First name of member</td>
</tr>
<tr>
<td><code>last_name</code></td>
<td><code>string</code></td>
<td>Last name of member</td>
</tr>
<tr>
<td><code>instrument</code></td>
<td><code>string</code></td>
<td>Main instrument played</td>
</tr>
<tr>
<td><code>date_of_birth</code></td>
<td><code>string</code></td>
<td>Member’s date of birth</td>
</tr>
</tbody>
</table>
</div>
<p>As you’ll see, the data has details of the members of the rock band <a href="https://en.wikipedia.org/wiki/The_Beach_Boys">The Beach Boys</a>. Each row contains information about its various members both past and present.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In case you’ve never heard of The Beach Boys, they’re an American rock band formed in the early 1960s.</p>
</div>
<p>Throughout this tutorial, you’ll be using the pandas library to allow you to work with DataFrames, as well as the newer <a href="https://arrow.apache.org/docs/python/index.html">PyArrow</a> library. The <strong>PyArrow</strong> library provides pandas with its own optimized <a href="https://arrow.apache.org/docs/python/api/datatypes.html#data-types-and-schemas">data types</a>, which are faster and less memory-intensive than the traditional <a href="https://numpy.org/doc/stable/user/basics.types.html">NumPy types</a> that pandas uses by default.</p>
<p>If you’re working at the command line, you can install both <code>pandas</code> and <code>pyarrow</code> using the single command <code>python -m pip install pandas pyarrow</code>. If you’re working in a Jupyter Notebook, you should use <code>!python -m pip install pandas pyarrow</code>. Regardless, you should do this within a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> to avoid clashes with the libraries you use in your global environment.</p>
<p>Once you have the libraries in place, it’s time to read your data into a DataFrame:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">beach_boys</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span>
<span class="gp">... </span>    <span class="s2">"band_members.csv"</span>
<span class="gp">... </span><span class="p">)</span><span class="o">.</span><span class="n">convert_dtypes</span><span class="p">(</span><span class="n">dtype_backend</span><span class="o">=</span><span class="s2">"pyarrow"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>First, you used <code>import pandas</code> to make the library available within your code. To construct the DataFrame and read it into the <code>beach_boys</code> variable, you used pandas’ <code>read_csv()</code> function, passing <code>band_members.csv</code> as the file to read. Finally, by passing <code>dtype_backend="pyarrow"</code> to <code>.convert_dtypes()</code> you convert all columns to <code>pyarrow</code> types.</p>
<p>If you want to verify that <code>pyarrow</code> data types are indeed being used, then <code>beach_boys.dtypes</code> will satisfy your curiosity:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">beach_boys</span><span class="o">.</span><span class="n">dtypes</span>
<span class="go">first_name            string[pyarrow]</span>
<span class="go">last_name             string[pyarrow]</span>
<span class="go">instrument            string[pyarrow]</span>
<span class="go">date_of_birth         string[pyarrow]</span>
<span class="go">dtype: object</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>As you can see, each data type contains <code>[pyarrow]</code> in its name.</p>
<p>If you wanted to analyze the date information thoroughly, then you would parse the <code>date_of_birth</code> column to make sure dates are read as a suitable <code>pyarrow</code> date type. This would allow you to analyze by specific days, months or years, and so on, as commonly found in <a href="https://realpython.com/how-to-pandas-pivot-table/">pivot tables</a>.</p>
<p>The <code>date_of_birth</code> column is not analyzed in this tutorial, so the <code>string</code> data type it’s being read as will do. Later on, you’ll get the chance to hone your skills with some exercises. The solutions include the date parsing code if you want to see how it’s done.</p>
<p>Now that the file has been loaded into a DataFrame, you’ll probably want to take a look at it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">beach_boys</span>
<span class="go">  first_name last_name instrument date_of_birth</span>
<span class="go">0      Brian    Wilson       Bass   20-Jun-1942</span>
<span class="go">1       Mike      Love  Saxophone   15-Mar-1941</span>
<span class="go">2         Al   Jardine     Guitar   03-Sep-1942</span>
<span class="go">3      Bruce  Johnston       Bass   27-Jun-1942</span>
<span class="go">4       Carl    Wilson     Guitar   21-Dec-1946</span>
<span class="go">5     Dennis    Wilson      Drums   04-Dec-1944</span>
<span class="go">6      David     Marks     Guitar   22-Aug-1948</span>
<span class="go">7      Ricky    Fataar      Drums   05-Sep-1952</span>
<span class="go">8    Blondie   Chaplin     Guitar   07-Jul-1951</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>DataFrames are two-dimensional data structures similar to spreadsheets or database tables. A pandas DataFrame can be considered a set of columns, with each column being a pandas Series. Each column also has a heading, which is the <code>name</code> property of the Series, and each row has a label, which is referred to as an element of its associated <a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.html#pandas-index">index</a> object.</p>
<p>The DataFrame’s <strong>index</strong> is shown to the left of the DataFrame. It’s not part of the original <code>band_members.csv</code> source file, but is added as part of the DataFrame creation process. It’s this index object you’re learning to reset.</p>
<p>The index of a DataFrame is an additional column of labels that helps you identify rows. When used in combination with column headings, it allows you to access specific data within your DataFrame. The default index labels are a sequence of integers, but you can use strings to make them more meaningful. You can actually use any <a href="https://docs.python.org/3/glossary.html#term-hashable">hashable type</a> for your index, but integers, strings, and timestamps are the most common.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Although indexes are certainly useful in pandas, an alternative to pandas is the new high-performance <a href="https://realpython.com/polars-python/">Polars</a> library, which eliminates them in favor of row numbers. This may come as a surprise, but aside from being used for selecting rows or columns, indexes aren’t often used when analyzing DataFrames. Also, row numbers always remain sequential when rows are added or removed in a Polars DataFrame. This isn’t the case with indexes in pandas.</p>
</div>
</div><h2><a href="https://realpython.com/pandas-reset-index/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/pandas-reset-index/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-06T14:00:00+00:00</pubDate>
</item>
<item>
<title>Introduction to Web Scraping With Python</title>
<link>https://realpython.com/courses/introduction-to-web-scraping-with-python/</link>
<guid>https://realpython.com/courses/introduction-to-web-scraping-with-python/</guid>
<content:encoded><![CDATA[
<div> Web scraping, Python, data collection, website data parsing, HTML parser
<br />
Python社区提供了一些强大的网络爬虫工具。网站上托管了世界上最丰富的信息源。许多学科，如商业智能和调查报道，都可以从收集和分析网站数据中受益。在这个视频课程中，您将学习如何使用字符串方法和正则表达式解析网站数据，如何使用HTML解析器解析网站数据，以及如何与表单和其他网站组件交互。<br /><br />总结: <div>
<p><strong>Web scraping</strong> is the process of collecting and parsing raw data from the Web, and the Python community has come up with some pretty powerful web scraping tools.</p>
<p>The Internet hosts perhaps the greatest source of information on the planet. Many disciplines, such as <a href="https://realpython.com/learning-paths/data-science-python-core-skills/">data science</a>, business intelligence, and investigative reporting, can benefit enormously from collecting and analyzing data from websites. </p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Parse website data using <strong>string methods</strong> and <strong>regular expressions</strong></li>
<li>Parse website data using an <strong>HTML parser</strong></li>
<li>Interact with <strong>forms</strong> and other website components</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-05T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Variables in Python: Usage and Best Practices</title>
<link>https://realpython.com/quizzes/python-variables/</link>
<guid>https://realpython.com/quizzes/python-variables/</guid>
<content:encoded><![CDATA[
<div> 创建变量、变量赋值、数据类型、表达式、作用域
<br />
创建变量并给予数值是编程中的基本操作，可以修改变量的数据类型，使用变量创建表达式、计数器、累加器和布尔标志，命名变量时应遵循最佳实践，了解变量的作用域并正确使用。总结: 创建变量并赋值，可以随时更改数据类型，在表达式中使用变量，遵循良好的命名规范，了解作用域并正确使用变量。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-variables/">Variables in Python: Usage and Best Practices</a>. </p>
<p>By working through this quiz, you&rsquo;ll revisit how to create and assign values to variables, change a variable&rsquo;s data type dynamically, use variables to create expressions, counters, accumulators, and Boolean flags, follow best practices for naming variables, and create, access, and use variables in their scopes.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Variables in Python: Usage and Best Practices</title>
<link>https://realpython.com/python-variables/</link>
<guid>https://realpython.com/python-variables/</guid>
<content:encoded><![CDATA[
<div> Python, variables, create, assign, data type
<br />
Python中的变量是指向存储在计算机内存中的对象或值的符号名称。通过将变量与值关联起来，您可以使用描述性名称引用该值，并在代码中多次重用。创建变量、改变变量的数据类型、使用变量创建表达式、计数器、累加器和布尔标志、变量命名最佳实践、在作用域内创建、访问和使用变量是Python开发人员必备的技能要点。总结: Python中的变量是指向存储在计算机内存中的对象或值的符号名称。创建变量并将值分配给它们，可以使用描述性名称引用该值，并在代码中重复使用。Python是一种动态类型语言，变量的类型在运行时确定。变量本身没有数据类型，而是引用的对象有类型。 <div>
<div><p>In Python, <strong>variables</strong> are symbolic names that refer to objects or values stored in your computer’s memory. They allow you to assign descriptive names to data, making it easier to manipulate and reuse values throughout your code.</p>
<p>Understanding variables is key for Python developers because variables are essential building blocks for any Python program. Proper use of variables allows you to write clear, readable, and maintainable code.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Create</strong> and <strong>assign</strong> values to variables</li>
<li><strong>Change</strong> a variable’s <strong>data type</strong> dynamically</li>
<li>Use variables to create <strong>expressions</strong>, <strong>counters</strong>, <strong>accumulators</strong>, and <strong>Boolean flags</strong></li>
<li>Follow best practices for <strong>naming</strong> variables</li>
<li>Create, access, and use variables in their <strong>scopes</strong></li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with Python’s <a href="https://realpython.com/defining-your-own-python-function/">basic data types</a> and have a general understanding of programming concepts like <a href="https://realpython.com/python-for-loop/">loops</a> and <a href="https://realpython.com/defining-your-own-python-function/">functions</a>.</p>
<p>Don’t worry if you don’t have all this knowledge yet and you’re just getting started. You won’t <em>need</em> this knowledge to benefit from working through the early sections of this tutorial.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-variables-code/">Click here to download the free sample code</a> that shows you how to use variables in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Variables in Python: Usage and Best Practices” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-variables-update/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Variables in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/UPDATE-Variables-in-Python_Watermarked.7d8b51f3adad.jpg" style="background: #ffc973;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-variables-update/"><span class="my-0 h4">Variables in Python: Usage and Best Practices</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of variables in Python. Variables are symbolic names that refer to objects or values stored in your computer's memory, and they're essential building blocks for any Python program.</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-variables-in-python">Getting to Know Variables in Python<a class="headerlink" href="#getting-to-know-variables-in-python" title="Permanent link"></a></h2>
<p>In Python, <a href="https://en.wikipedia.org/wiki/Variable_(computer_science)">variables</a> are names associated with concrete objects or values stored in your computer’s memory. By associating a variable with a value, you can refer to the value using a descriptive name and reuse it as many times as needed in your code.</p>
<p>Variables behave as if they were the value they refer to. To use variables in your code, you first need to learn how to create them, which is pretty straightforward in Python.</p>
<h3 id="creating-variables-with-assignments">Creating Variables With Assignments<a class="headerlink" href="#creating-variables-with-assignments" title="Permanent link"></a></h3>
<p>The primary way to create a variable in Python is to <strong>assign</strong> it a value using the assignment operator and the following syntax:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python Syntax</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="n">variable_name</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this syntax, you have the variable’s name on the left, then the assignment (<code>=</code>) operator, followed by the value you want to assign to the variable at hand. The value in this construct can be any Python object, including <a href="https://realpython.com/python-strings/">strings</a>, <a href="https://realpython.com/python-numbers/">numbers</a>, <a href="https://realpython.com/python-list/">lists</a>, <a href="https://realpython.com/python-dicts/">dictionaries</a>, or even custom objects.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about assignments, check out <a href="https://realpython.com/python-assignment-operator/">Python’s Assignment Operator: Write Robust Assignments</a>.</p>
</div>
<p>Here are a few examples of variables:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">word</span> <span class="o">=</span> <span class="s2">"Python"</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">number</span> <span class="o">=</span> <span class="mi">42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">coefficient</span> <span class="o">=</span> <span class="mf">2.87</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"grape"</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">ordinals</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="s2">"first"</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">"second"</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s2">"third"</span><span class="p">}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">SomeCustomClass</span><span class="p">:</span> <span class="k">pass</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">instance</span> <span class="o">=</span> <span class="n">SomeCustomClass</span><span class="p">()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code, you’ve defined several variables by assigning values to names. The first five examples include variables that refer to different <a href="https://realpython.com/python-data-types/">built-in types</a>. The last example shows that variables can also refer to custom objects like an instance of your <code>SomeCustomClass</code> class.</p>
<h3 id="setting-and-changing-a-variables-data-type">Setting and Changing a Variable’s Data Type<a class="headerlink" href="#setting-and-changing-a-variables-data-type" title="Permanent link"></a></h3>
<p>Apart from a variable’s value, it’s also important to consider the <strong>data type</strong> of the value. When you think about a variable’s type, you’re considering whether the variable refers to a string, integer, floating-point number, list, tuple, dictionary, custom object, or another data type.</p>
<p>Python is a dynamically typed language, which means that variable types are determined and checked at runtime rather than during compilation. Because of this, you don’t need to specify a variable’s type when you’re creating the variable. Python will infer a variable’s type from the assigned object.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In Python, variables themselves don’t have data types. Instead, the objects that variables reference have types.</p>
</div>
<p>For example, consider the following variables:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Jane Doe"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">19</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">subjects</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Math"</span><span class="p">,</span> <span class="s2">"English"</span><span class="p">,</span> <span class="s2">"Physics"</span><span class="p">,</span> <span class="s2">"Chemistry"</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="go">&lt;class 'str'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
<span class="go">&lt;class 'int'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">subjects</span><span class="p">)</span>
<span class="go">&lt;class 'list'&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-variables/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-variables/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-04T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Python Square Root Function</title>
<link>https://realpython.com/python-square-root-function/</link>
<guid>https://realpython.com/python-square-root-function/</guid>
<content:encoded><![CDATA[
<div> sqrt(), math module, Python, square root, real-world problems <br />
<br />
总结: Python的math.sqrt()函数可以计算给定数字的平方根，适用于解方程和计算几何属性等数学操作。该函数只接受非负整数或浮点数作为参数，可以准确快速地计算平方根。然而，负数输入会导致错误。平方根在代数中是一个数乘以自身等于平方数的关系。Python的幂运算符**可用于计算数的幂。除了一些完全平方数之外，其他平方数的平方根可能需要计算或估算。应用平方根函数可解决现实世界问题，如使用毕达哥拉斯定理计算距离。 <div>
<div><p>The Python square root function, <code>sqrt()</code>, is part of the <code>math</code> module and is used to calculate the square root of a given number. To use it, you import the <code>math</code> module and call <code>math.sqrt()</code> with a non-negative number as an argument. For example, <code>math.sqrt(9)</code> returns <code>3.0</code>. </p>
<p>This function works with both integers and floats and is essential for mathematical operations like solving equations and calculating geometric properties. In this tutorial, you’ll learn how to effectively use the square root function in Python.</p>
<p><strong>By the end of this tutorial, you’ll understand how:</strong></p>
<ul>
<li>Python’s <code>sqrt()</code> function calculates square roots using Python’s <code>math.sqrt()</code> for quick and accurate results in your programs.</li>
<li><code>math.sqrt()</code> calculates the square root of positive numbers and zero but raises an error for negative inputs.</li>
<li>Python’s square root function can be used to solve real-world problems like calculating distances using the Pythagorean theorem.</li>
</ul>
<p>Time to dive in!</p>
<div class="alert alert-primary">
<p><strong>Python Pit Stop:</strong> This tutorial is a <strong>quick</strong> and <strong>practical</strong> way to find the info you need, so you’ll be back to your project in no time!</p>
</div>
<div class="alert alert-warning"><p><strong>Free Bonus:</strong> <a class="alert-link" href="">Click here to get our free Python Cheat Sheet</a> that shows you the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.</p></div>

<h2 id="square-roots-in-mathematics">Square Roots in Mathematics<a class="headerlink" href="#square-roots-in-mathematics" title="Permanent link"></a></h2>
<p>In algebra, a <strong>square</strong>, <em>x</em>, is the result of a <a href="https://realpython.com/python-numbers/">number</a>, <em>n</em>, multiplied by itself: <em>x = n²</em></p>
<p>You can calculate squares using Python:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span>
<span class="go">25</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The Python <code>**</code> operator is used for calculating the power of a number. In this case, 5 squared, or 5 to the power of 2, is 25.</p>
<p>The square root, then, is the number <em>n</em>, which when multiplied by itself yields the square, <em>x</em>.</p>
<p>In this example, <em>n</em>, the square root of 25, is 5.</p>
<p>25 is an example of a <strong>perfect square</strong>. Perfect squares are the squares of integer values:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">1</span><span class="o">**</span><span class="mi">2</span>
<span class="go">1</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">2</span><span class="o">**</span><span class="mi">2</span>
<span class="go">4</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">3</span><span class="o">**</span><span class="mi">2</span>
<span class="go">9</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You might have memorized some of these perfect squares when you learned your multiplication tables in an elementary algebra class.</p>
<p>If you’re given a small perfect square, it may be straightforward enough to calculate or memorize its square root. But for most other squares, this calculation can get a bit more tedious. Often, an estimation is good enough when you don’t have a calculator.</p>
</div><h2><a href="https://realpython.com/python-square-root-function/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-square-root-function/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-03T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #226: PySheets: Spreadsheets in the Browser Using PyScript</title>
<link>https://realpython.com/podcasts/rpp/226/</link>
<guid>https://realpython.com/podcasts/rpp/226/</guid>
<content:encoded><![CDATA[
<div> PySheets, Chris Laffra, spreadsheet application, Python, browser
总结:<br /><br />文章介绍了Chris Laffra的项目PySheets，讨论了如何在浏览器中使用Python构建电子表格应用程序。要实现快速启动，可以将数据单元格存储在何处是一个关键问题。通过PySheets项目和他的书《Communication for Engineers》，可以了解到如何通过Python使电子表格应用程序在浏览器中快速启动，并实现数据的有效存储和管理。 <div>
<p>What goes into building a spreadsheet application in Python that runs in the browser? How do you make it launch quickly, and where do you store the cells of data? This week on the show, we speak with Chris Laffra about his project, PySheets, and his book "Communication for Engineers."</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-11-01T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Using .__repr__() vs .__str__() in Python</title>
<link>https://realpython.com/quizzes/python-repr-vs-str/</link>
<guid>https://realpython.com/quizzes/python-repr-vs-str/</guid>
<content:encoded><![CDATA[
<div> 特殊方法, 控制显示, 对象, 可读性, 调试维护
<br />
特殊方法让你控制程序如何显示对象，使得你的类更易读、更容易调试和维护。通过使用特殊方法，你可以自定义对象在不同情况下的表现方式，提高代码的可读性和灵活性。这些方法让你可以更好地控制对象的行为，使得代码更加清晰易懂，也更容易排查和解决问题。利用特殊方法，你可以定义对象的比较、算术运算、打印、迭代等行为，为自定义类增加更多功能和灵活性。通过灵活运用特殊方法，你可以提高代码的可维护性和可读性，让Python编程变得更加简洁高效。<br /><br />总结: <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-repr-vs-str/">Python&rsquo;s <code>.__repr__()</code> and <code>.__str__()</code></a> special methods. These methods allow you to control how a program displays an object, making your classes more readable and easier to debug and maintain.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-29T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Closures: Common Use Cases and Examples</title>
<link>https://realpython.com/python-closure/</link>
<guid>https://realpython.com/python-closure/</guid>
<content:encoded><![CDATA[
<div> closures,function-based decorators,inner functions,retained variables,state information<br />
闭包是Python中的一种常见特性，可以用于创建基于函数的装饰器。内部函数是定义在另一个函数内部的函数，闭包是一种特殊的内部函数，它可以保留其封闭作用域中的变量。闭包可以用于保留状态信息，是函数式编程中常见的特性。在Python中，通过在外部函数中返回内部函数对象，可以实现闭包。这种特性使内部函数和保留的变量在外部函数返回后仍然可用。总结: <br /> <div>
<div><p>In Python, a closure is typically a function defined inside another function. This inner function grabs the objects defined in its enclosing scope and associates them with the inner function object itself. The resulting combination is called a closure.</p>
<p>Closures are a common feature in functional programming languages. In Python, closures can be pretty useful because they allow you to create function-based decorators, which are powerful tools.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Learn what <strong>closures</strong> are and how they work in Python</li>
<li>Get to know common <strong>use cases</strong> of closures</li>
<li>Explore <strong>alternatives</strong> to closures</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with several Python topics, including <a href="https://realpython.com/defining-your-own-python-function/">functions</a>, <a href="https://realpython.com/inner-functions-what-are-they-good-for/">inner functions</a>, <a href="https://realpython.com/primer-on-python-decorators/">decorators</a>, <a href="https://realpython.com/python-classes/">classes</a>, and <a href="https://realpython.com/python-callable-instances/">callable instances</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-closure-code/">Click here to download the free sample code</a> that shows you how to use closures in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Closures: Common Use Cases and Examples” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-closure/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Closures: Common Use Cases and Examples" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-Closures_Watermarked-2.3a5019ecf907.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-closure/"><span class="my-0 h4">Python Closures: Common Use Cases and Examples</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python closures. Closures are a common feature in functional programming languages and are particularly popular in Python because they allow you to create function-based decorators.</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-closures-in-python">Getting to Know Closures in Python<a class="headerlink" href="#getting-to-know-closures-in-python" title="Permanent link"></a></h2>
<p>A <strong>closure</strong> is a function that retains access to its <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope">lexical scope</a>, even when the function is executed outside that scope. When the enclosing function returns the inner function, then you get a function object with an extended scope.</p>
<p>In other words, closures are functions that capture the objects defined in their enclosing scope, allowing you to use them in their body. This feature allows you to use closures when you need to retain state information between consecutive calls.</p>
<p>Closures are common in programming languages that are focused on <a href="https://realpython.com/python-functional-programming/">functional programming</a>, and Python supports closures as part of its wide variety of features.</p>
<p>In Python, a closure is a function that you <em>define in</em> and <em>return from</em> another function. This inner function can retain the objects defined in the <a href="https://realpython.com/python-scope-legb-rule/#nested-functions-the-enclosing-scope">non-local scope</a> right before the inner function’s definition.</p>
<p>To better understand closures in Python, you’ll first look at inner functions because closures are also inner functions.</p>
<h3 id="inner-functions">Inner Functions<a class="headerlink" href="#inner-functions" title="Permanent link"></a></h3>
<p>In Python, an <strong>inner function</strong> is a function that you define inside another function. This type of function can access and update <a href="https://realpython.com/python-scope-legb-rule/#names-and-scopes-in-python">names</a> in their enclosing function, which is the non-local scope.</p>
<p>Here’s a quick example:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">outer_func</span><span class="p">():</span>
<span class="gp">... </span>    <span class="n">name</span> <span class="o">=</span> <span class="s2">"Pythonista"</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="nf">inner_func</span><span class="p">():</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
<span class="gp">... </span>    <span class="n">inner_func</span><span class="p">()</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">outer_func</span><span class="p">()</span>
<span class="go">Hello, Pythonista!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greeter</span> <span class="o">=</span> <span class="n">outer_func</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">greeter</span><span class="p">)</span>
<span class="go">None</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you define <code>outer_func()</code> at the module level or <a href="https://realpython.com/python-scope-legb-rule/#modules-the-global-scope">global scope</a>. Inside this function, you define the <code>name</code> local variable. Then, you define another function called <code>inner_func()</code>. Because this second function lives in the body of <code>outer_func()</code>, it’s an inner or nested function. Finally, you call the inner function, which uses the <code>name</code> variable defined in the enclosing function.</p>
<p>When you call <code>outer_func()</code>, <code>inner_func()</code> interpolates <code>name</code> into the greeting string and prints the result to your screen.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about inner functions, check out the <a href="https://realpython.com/inner-functions-what-are-they-good-for/">Python Inner Functions: What Are They Good For?</a> tutorial.</p>
</div>
<p>In the above example, you defined an inner function that can use the names in the enclosing scope. However, when you call the outer function, you don’t get a reference to the inner function. The inner function and the local names won’t be available outside the outer function.</p>
<p>In the following section, you’ll learn how to turn an inner function into a closure, which makes the inner function and the retained variables available to you.</p>
<h3 id="function-closures">Function Closures<a class="headerlink" href="#function-closures" title="Permanent link"></a></h3>
<p>All closures are inner functions, but not all inner functions are closures. To turn an inner function into a closure, you must return the inner function object from the outer function. This may sound like a tongue twister, but here’s how you can make <code>outer_func()</code> return a closure object:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">outer_func</span><span class="p">():</span>
<span class="gp">... </span>    <span class="n">name</span> <span class="o">=</span> <span class="s2">"Pythonista"</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="nf">inner_func</span><span class="p">():</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
<span class="hll"><span class="gp">... </span>    <span class="k">return</span> <span class="n">inner_func</span>
</span><span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">outer_func</span><span class="p">()</span>
<span class="go">&lt;function outer_func.&lt;locals&gt;.inner_func at 0x1066d16c0&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greeter</span> <span class="o">=</span> <span class="n">outer_func</span><span class="p">()</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greeter</span><span class="p">()</span>
<span class="go">Hello, Pythonista!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-closure/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-closure/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python's Magic Methods in Classes</title>
<link>https://realpython.com/courses/magic-methods-classes/</link>
<guid>https://realpython.com/courses/magic-methods-classes/</guid>
<content:encoded><![CDATA[
<div> Python, special methods, magic methods, object-oriented programming, customization
<br />
Python开发者需要了解特殊方法的概念，这些方法在Python中具有特殊含义，能够自动响应特定操作，例如实例化、序列索引、属性管理等。掌握特殊方法可以定制自定义类的行为，支持Python中的核心面向对象编程特性。学习Python的特殊方法是Python程序员的基础。总结: 深入理解Python中特殊方法的含义及作用，通过特殊方法可以定制自定义类的行为，支持核心对象导向编程特性。 <div>
<p>As a Python developer who wants to harness the power of object-oriented programming, you&rsquo;ll love to learn how to customize your classes using <strong>special methods</strong>, also known as <strong>magic methods</strong> or <strong>dunder methods</strong>. A special method is a method whose name starts and ends with a double underscore. These methods have special meanings in Python.</p>
<p>Python automatically calls magic methods as a response to certain operations, such as instantiation, sequence indexing, attribute managing, and much more. Magic methods support core object-oriented features in Python, so learning about them is fundamental for you as a Python programmer.</p>
<p><strong>In this video course, you&rsquo;ll:</strong></p>
<ul>
<li>Learn what Python&rsquo;s <strong>special</strong> or <strong>magic methods</strong> are</li>
<li>Understand the <strong>magic</strong> behind magic methods in Python</li>
<li><strong>Customize</strong> different <strong>behaviors</strong> of your custom classes with special methods</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-29T14:00:00+00:00</pubDate>
</item>
<item>
<title>Beautiful Soup: Build a Web Scraper With Python</title>
<link>https://realpython.com/beautiful-soup-web-scraper-python/</link>
<guid>https://realpython.com/beautiful-soup-web-scraper-python/</guid>
<content:encoded><![CDATA[
<div> web scraping, Python, Requests, Beautiful Soup, automation <br />
web scraping是从互联网中提取信息的过程，Python中的Requests和Beautiful Soup是强大的工具。通过学习如何检查目标网站的HTML结构、解析URL中的数据以及使用Requests和Beautiful Soup进行数据爬取和解析，你可以构建一个从开始到完成的网页抓取流程。自动化地抓取网页可以帮助你收集所需的信息，无论是研究、项目还是个人兴趣。虽然Web有很多信息，但每个网站都独一无二，需要个性化处理。网站不断更改，网页抓取可能遇到挑战，但定期运行测试可以确保你的主要脚本不会无法运行。API是Web抓取的替代方法，提供了更稳定的数据访问方式，但也面临着挑战。总结: <br />Web scraping是一个重要的数据收集过程，Python中的Requests和Beautiful Soup工具能够帮助你实现自动化网页抓取。网站的多样性和不稳定性带来挑战，但通过定期维护和API的替代方法，可以更有效地进行数据收集。 <div>
<div><p><a href="https://realpython.com/python-web-scraping-practical-introduction/">Web scraping</a> is the automated process of extracting data from the internet. The Python libraries <strong>Requests</strong> and <strong>Beautiful Soup</strong> are powerful tools for the job. To effectively harvest the vast amount of data available online for your research, projects, or personal interests, you’ll need to become skilled at web scraping.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Inspect the <strong>HTML structure</strong> of your target site with your browser’s <strong>developer tools</strong></li>
<li>Decipher data encoded in <strong>URLs</strong></li>
<li>Use Requests and Beautiful Soup for <strong>scraping and parsing data</strong> from the internet</li>
<li>Step through a <strong>web scraping pipeline</strong> from start to finish</li>
<li><strong>Build a script</strong> that fetches job offers from websites and displays relevant information in your console</li>
</ul>
<p>If you like learning with hands-on examples and have a basic understanding of Python and HTML, then this tutorial is for you! Working through this project will give you the knowledge and tools you need to scrape any static website out there on the World Wide Web. You can download the project source code by clicking on the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/beautiful-soup-web-scraper-python-code/">Click here to download the free sample code </a> that you’ll use to learn about web scraping in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Beautiful Soup: Build a Web Scraper With Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/beautiful-soup-web-scraper-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Beautiful Soup: Build a Web Scraper With Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Build-a-Web-Scraper-With-Requests-and-Beautiful-Soup_Watermarked.37918fb3906c.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/beautiful-soup-web-scraper-python/"><span class="my-0 h4">Beautiful Soup: Build a Web Scraper With Python</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of web scraping using Python. By working through this quiz, you'll revisit how to inspect the HTML structure of a target site, decipher data encoded in URLs, and use Requests and Beautiful Soup for scraping and parsing data from the Web.</p>
    </div>
  </div>

</div>

<h2 id="what-is-web-scraping">What Is Web Scraping?<a class="headerlink" href="#what-is-web-scraping" title="Permanent link"></a></h2>
<p><strong>Web scraping</strong> is the process of gathering information from the internet. Even copying and pasting the lyrics of your favorite song can be considered a form of web scraping! However, the term “web scraping” usually refers to a process that involves automation. While some websites don’t like it when automatic scrapers gather their data, which can lead to <a href="https://realpython.com/podcasts/rpp/12/">legal issues</a>, others don’t mind it.</p>
<p>If you’re scraping a page respectfully for educational purposes, then you’re unlikely to have any problems. Still, it’s a good idea to do some research on your own to make sure you’re not violating any Terms of Service before you start a large-scale web scraping project.</p>
<h3 id="reasons-for-automated-web-scraping">Reasons for Automated Web Scraping<a class="headerlink" href="#reasons-for-automated-web-scraping" title="Permanent link"></a></h3>
<p>Say that you like to surf—both in the ocean and online—and you’re looking for employment. It’s clear that you’re not interested in just <em>any</em> job. With a surfer’s mindset, you’re waiting for the perfect opportunity to roll your way!</p>
<p>You know about a job site that offers precisely the kinds of jobs you want. Unfortunately, a new position only pops up once in a blue moon, and the site doesn’t provide an email notification service. You consider checking up on it every day, but that doesn’t sound like the most fun and productive way to spend your time. You’d rather be outside surfing real-life waves!</p>
<p>Thankfully, Python offers a way to apply your surfer’s mindset. Instead of having to check the job site every day, you can use Python to help automate the repetitive parts of your job search. With <strong>automated web scraping</strong>, you can write the code once, and it’ll get the information that you need many times and from many pages.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In contrast, when you try to get information manually, you might spend a lot of time clicking, scrolling, and searching, especially if you need large amounts of data from websites that are regularly updated with new content. Manual web scraping can take a lot of time and be highly repetitive and error-prone.</p>
</div>
<p>There’s so much information on the internet, with new information constantly being added. You’ll probably be interested in some of that data, and much of it is out there for the taking. Whether you’re actually on the job hunt or just want to automatically download all the lyrics of your favorite artist, automated web scraping can help you accomplish your goals.</p>
<h3 id="challenges-of-web-scraping">Challenges of Web Scraping<a class="headerlink" href="#challenges-of-web-scraping" title="Permanent link"></a></h3>
<p>The internet has grown organically out of many sources. It combines many different technologies, styles, and personalities, and it continues to grow every day. In other words, the internet is a hot mess! Because of this, you’ll run into some challenges when scraping the web:</p>
<ul>
<li>
<p><strong>Variety:</strong> Every website is different. While you’ll encounter general structures that repeat themselves, each website is unique and will need personal treatment if you want to extract the relevant information.</p>
</li>
<li>
<p><strong>Durability:</strong> Websites constantly change. Say you’ve built a shiny new web scraper that automatically cherry-picks what you want from your resource of interest. The first time you <a href="https://realpython.com/run-python-scripts/">run your script</a>, it works flawlessly. But when you run the same script a while later, you run into a discouraging and lengthy stack of <a href="https://realpython.com/python-traceback/">tracebacks</a>!</p>
</li>
</ul>
<p>Unstable scripts are a realistic scenario because many websites are in active development. If a site’s structure changes, then your scraper might not be able to navigate the sitemap correctly or find the relevant information. The good news is that changes to websites are often small and incremental, so you’ll likely be able to update your scraper with minimal adjustments.</p>
<p>Still, keep in mind that the internet is dynamic and keeps on changing. Therefore, the scrapers you build will probably require maintenance. You can set up <a href="https://realpython.com/python-continuous-integration/">continuous integration</a> to run scraping tests periodically to ensure that your main script doesn’t break without your knowledge.</p>
<h3 id="an-alternative-to-web-scraping-apis">An Alternative to Web Scraping: APIs<a class="headerlink" href="#an-alternative-to-web-scraping-apis" title="Permanent link"></a></h3>
<p>Some website providers offer <a href="https://realpython.com/python-api/">application programming interfaces (APIs)</a> that allow you to access their data in a predefined manner. With APIs, you can avoid parsing <a href="https://realpython.com/html-css-python/">HTML</a>. Instead, you can access the data directly using formats like <a href="https://realpython.com/python-json/">JSON</a> and <a href="https://realpython.com/python-xml-parser/">XML</a>. HTML is primarily a way to visually present content to users.</p>
<p>When you use an API, the data collection process is generally more stable than it is through web scraping. That’s because developers create APIs to be consumed by programs rather than by human eyes.</p>
<p>The front-end presentation of a site might change often, but a change in the website’s design doesn’t affect its API structure. The structure of an API is usually more permanent, which means it’s a more reliable source of the site’s data.</p>
<p>However, APIs <em>can</em> change as well. The challenges of both variety and durability apply to APIs just as they do to websites. Additionally, it’s much harder to inspect the structure of an API by yourself if the provided documentation lacks quality.</p>
</div><h2><a href="https://realpython.com/beautiful-soup-web-scraper-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/beautiful-soup-web-scraper-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-28T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Beautiful Soup: Build a Web Scraper With Python</title>
<link>https://realpython.com/quizzes/beautiful-soup-web-scraper-python/</link>
<guid>https://realpython.com/quizzes/beautiful-soup-web-scraper-python/</guid>
<content:encoded><![CDATA[
<div> HTML structure, developer tools, URL encoding, Requests, Beautiful Soup

检查目标网站的HTML结构，使用开发者工具；解码URL中的数据；使用Requests和Beautiful Soup来抓取和解析网站数据；了解Web scraping pipeline的工作原理。<br /><br />总结: 本文主要介绍了如何通过使用开发者工具来检查目标网站的HTML结构，解码URL中的数据，以及使用Requests和Beautiful Soup来进行网页数据的抓取和解析，最后介绍了Web scraping pipeline的工作流程。通过这些方式，读者可以提高对Python的应用能力，进一步理解Web scraping的原理。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/beautiful-soup-web-scraper-python/">web scraping with Python, Requests, and Beautiful Soup</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to inspect the HTML structure of your target site with your browser&rsquo;s developer tools, decipher data encoded in URLs, use Requests and Beautiful Soup for scraping and parsing data from the Web, and gain an understanding of what a web scraping pipeline looks like.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-28T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Reset a pandas DataFrame Index</title>
<link>https://realpython.com/quizzes/pandas-reset-index/</link>
<guid>https://realpython.com/quizzes/pandas-reset-index/</guid>
<content:encoded><![CDATA[
<div> 关键词: 索引、Python、学习、挑战、知识

学习本文，通过问题测试对Python索引的理解。挑战自己，并扩展教程中所学内容。除了教程以外，还需要做一些研究来回答所有问题。接受挑战，让学习带你进步。总结: 本文通过问题测试Python索引的理解，扩展了教程中的知识，强调在学习过程中要不断挑战自己。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/pandas-reset-index/">how to reset a pandas DataFrame index</a>.</p>
<p>By working through the questions, you&rsquo;ll review your knowledge of indexing and also expand on what you learned in the tutorial. </p>
<p>You&rsquo;ll need to do some research outside of the tutorial to answer all the questions. Embrace this challenge and let it take you on a learning journey.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-25T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: The Python Standard REPL: Try Out Code and Ideas Quickly</title>
<link>https://realpython.com/quizzes/python-repl/</link>
<guid>https://realpython.com/quizzes/python-repl/</guid>
<content:encoded><![CDATA[
<div> Python REPL, interative, testing, libraries, debugging
<br />
Python REPL允许用户互动式地运行Python代码，可以用于测试新想法、探索库、重构和调试代码，以及尝试示例。总结: Python REPL是一个交互式工具，可用于快速测试代码并探索Python的各种功能和库，方便用户在开发过程中快速迭代和调试代码。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-repl/">The Python Standard REPL: Try Out Code and Ideas Quickly</a>.</p>
<p>The Python REPL allows you to run Python code interactively,
which is useful for testing new ideas, exploring libraries, refactoring and debugging code, and trying out examples.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #225: Python Getting Faster and Leaner &amp; Ideas for Django Projects</title>
<link>https://realpython.com/podcasts/rpp/225/</link>
<guid>https://realpython.com/podcasts/rpp/225/</guid>
<content:encoded><![CDATA[
<div> Python, changes, updates, groundwork, faster

最新版本的Python正在进行一些底层的改变，这些更新为未来几年的更快Python奠定了基础。Christopher Trudeau本周再次出现在节目中，带来另一批PyCoder's Weekly文章和项目。总结: Python正在进行底层改变，为未来的更快Python打下基础。Christopher Trudeau带来了PyCoder's Weekly的最新文章和项目。 <div>
<p>What changes are happening under the hood in the latest versions of Python? How are these updates laying the groundwork for a faster Python in the coming years? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-25T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Class Constructors: Control Your Object Instantiation</title>
<link>https://realpython.com/quizzes/python-class-constructor/</link>
<guid>https://realpython.com/quizzes/python-class-constructor/</guid>
<content:encoded><![CDATA[
<div> 内部实例化、对象初始化、__init__()、__new__()、精细调整对象创建
<br /><br />总结:
本文介绍了Python中对象实例化的过程，即内部实例化，以及通过__init__()方法进行对象初始化的过程。同时还讨论了如何通过重写__new__()方法来对对象创建进行精细调整。通过工作，我们能够对这些概念有更深入的了解。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-class-constructor/">Python Class Constructors</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the internal instantiation process, object initialization using <code>.__init__()</code>, and fine-tuning object creation by overriding <code>.__new__()</code>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-23T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Defining Your Own Python Function</title>
<link>https://realpython.com/quizzes/defining-your-own-python-function/</link>
<guid>https://realpython.com/quizzes/defining-your-own-python-function/</guid>
<content:encoded><![CDATA[
<div> 关键词: passing values, user-defined functions, Python, complex functions, powerful functions

总结:<br /><br />本文主要讨论了如何在Python中传递数值给函数，何时将程序分成单独的用户定义函数，以及定义复杂和强大函数所需要的工具。通过回顾理论知识，读者可以提升对函数的理解，提高在Python中定义函数的能力。文章提醒读者不仅要了解如何定义简单的函数，还要学会将程序分解为多个函数，以提高代码的可读性和可维护性。最后，文章强调在Python中定义复杂和强大的函数可以帮助解决更加复杂的问题，提高代码的效率和可扩展性。通过学习本文内容，读者可以更好地掌握Python中函数的基本原理和高级应用技巧。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of how to
<a href="https://realpython.com/defining-your-own-python-function/">define your own Python function</a>.</p>
<p>You&rsquo;ll revisit theoretical knowledge about passing values to functions, when to divide your program into separate user-defined functions, and all the tools you&rsquo;ll need to define complex and powerful functions in Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-22T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Thread Safety: Using a Lock and Other Techniques</title>
<link>https://realpython.com/python-thread-lock/</link>
<guid>https://realpython.com/python-thread-lock/</guid>
<content:encoded><![CDATA[
<div> thread safety, race conditions, synchronization primitives, Python threading, ThreadPoolExecutor
<br /><br />总结: 本教程介绍了Python中的线程安全概念，以及如何通过使用锁等同步原语来避免竞争条件。在讨论Python中的线程之前，重点澄清了并发和并行的概念。通过示例代码展示了如何在Python中使用ThreadPoolExecutor创建并运行多个线程，以及讨论了上下文切换的机制。最后介绍了如何检查Python解释器的上下文切换间隔。通过本教程，您将学会识别线程安全问题，并使用同步原语使代码线程安全。 <div>
<div><p>Python threading allows you to run parts of your code concurrently, making the code more efficient. However, when you introduce threading to your code without knowing about thread safety, you may run into issues such as race conditions. You solve these with tools like locks, semaphores, events, conditions, and barriers.</p>
<p>By the end of this tutorial, you’ll be able to identify safety issues and prevent them by using the synchronization primitives in Python’s <code>threading</code> module to make your code thread-safe.</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What <strong>thread safety</strong> is</li>
<li>What <strong>race conditions</strong> are and how to avoid them</li>
<li>How to identify <strong>thread safety issues</strong> in your code</li>
<li>What different <strong>synchronization primitives</strong> exist in the <code>threading</code> module</li>
<li>How to use synchronization primitives to <strong>make your code thread-safe</strong></li>
</ul>
<p>To get the most out of this tutorial, you’ll need to have basic experience working with multithreaded code using Python’s <code>threading</code> module and <code>ThreadPoolExecutor</code>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-thread-lock-code/">Click here to download the free sample code</a> that you’ll use to learn about thread safety techniques in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Thread Safety: Using a Lock and Other Techniques” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-thread-lock/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Thread Safety: Using a Lock and Other Techniques" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Thread-Safety-in-Python_Watermarked.434d0dbc3127.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-thread-lock/"><span class="my-0 h4">Python Thread Safety: Using a Lock and Other Techniques</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python thread safety. You'll revisit the concepts of race conditions, locks, and other synchronization primitives in the threading module. By working through this quiz, you'll reinforce your knowledge about how to make your Python code thread-safe.</p>
    </div>
  </div>

</div>

<h2 id="threading-in-python">Threading in Python<a class="headerlink" href="#threading-in-python" title="Permanent link"></a></h2>
<p>In this section, you’ll get a general overview of how Python handles threading. Before discussing threading in Python, it’s important to revisit two related terms that you may have heard about in this context:</p>
<ul>
<li><strong>Concurrency</strong>: The ability of a system to handle multiple tasks by allowing their execution to overlap in time but not necessarily happen simultaneously.</li>
<li><strong>Parallelism</strong>: The simultaneous execution of multiple tasks that run at the same time to leverage multiple processing units, typically multiple CPU cores.</li>
</ul>
<p>Python’s <a href="https://realpython.com/intro-to-python-threading/#what-is-a-thread">threading</a> is a <a href="https://realpython.com/python-concurrency/">concurrency framework</a> that allows you to spin up multiple threads that run concurrently, each executing pieces of code. This improves the efficiency and responsiveness of your application. When running multiple threads, the Python interpreter switches between them, handing the control of execution over to each thread. </p>
<p>By running the script below, you can observe the creation of four threads:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">threading_example.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>

<span class="k">def</span> <span class="nf">threaded_function</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Printing from </span><span class="si">{</span><span class="n">threading</span><span class="o">.</span><span class="n">current_thread</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">. </span><span class="si">{</span><span class="n">number</span><span class="si">=}</span><span class="s2">"</span><span class="p">)</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>

<span class="k">with</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">thread_name_prefix</span><span class="o">=</span><span class="s2">"Worker"</span><span class="p">)</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">executor</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">threaded_function</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, <code>threaded_function</code> prints the values zero to two that your <code>for</code> loop assigns to the loop variable <code>number</code>. Using a <code>ThreadPoolExecutor</code>, four threads are created to execute the threaded function. <code>ThreadPoolExecutor</code> is configured to run a maximum of four threads concurrently with <code>max_workers=4</code>, and each worker thread is named with a “Worker” prefix, as in <code>thread_name_prefix="Worker"</code>. </p>
<p>In <code>print()</code>, the <code>.name</code> attribute on <code>threading.current_thread()</code> is used to get the name of the current thread. This will help you identify which thread is executed each time. A call to <code>sleep()</code> is added inside the threaded function to increase the likelihood of a context switch.</p>
<p>You’ll learn what a context switch is in just a moment. First, run the script and take a look at the output:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>threading_example.py
<span class="go">Printing from Worker_0. number=0</span>
<span class="go">Printing from Worker_1. number=0</span>
<span class="go">Printing from Worker_2. number=0</span>
<span class="go">Printing from Worker_3. number=0</span>
<span class="go">Printing from Worker_0. number=1</span>
<span class="go">Printing from Worker_2. number=1</span>
<span class="go">Printing from Worker_1. number=1</span>
<span class="go">Printing from Worker_3. number=1</span>
<span class="go">Printing from Worker_0. number=2</span>
<span class="go">Printing from Worker_2. number=2</span>
<span class="go">Printing from Worker_1. number=2</span>
<span class="go">Printing from Worker_3. number=2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Each line in the output represents a <code>print()</code> call from a worker thread, identified by <code>Worker_0</code>, <code>Worker_1</code>, <code>Worker_2</code>, and <code>Worker_3</code>. The number that follows the worker thread name shows the current iteration of the loop each thread is executing. Each thread takes turns executing the <code>threaded_function</code>, and the execution happens in a concurrent rather than sequential manner. </p>
<p>For example, after <code>Worker_0</code> prints <code>number=0</code>, it’s not immediately followed by <code>Worker_0</code> printing <code>number=1</code>. Instead, you see outputs from <code>Worker_1</code>, <code>Worker_2</code>, and <code>Worker_3</code> printing <code>number=0</code> before <code>Worker_0</code> proceeds to <code>number=1</code>. You’ll notice from these interleaved outputs that multiple threads are running at the same time, taking turns to execute their part of the code.</p>
<p>This happens because the Python interpreter performs a <a href="https://en.wikipedia.org/wiki/Context_switch">context switch</a>. This means that Python pauses the execution state of the current thread and passes control to another thread. When the context switches, Python saves the current execution state so that it can resume later. By switching the control of execution at specific intervals, multiple threads can execute code concurrently.</p>
<p>You can check the context switch interval of your Python interpreter by typing the following in the REPL:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">sys</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sys</span><span class="o">.</span><span class="n">getswitchinterval</span><span class="p">()</span>
<span class="go">0.005</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The output of calling the <code>getswitchinterval()</code> is a number in seconds that represents the context switch interval of your Python interpreter. In this case, it’s 0.005 seconds or five milliseconds. You can think of the switch interval as how often the Python interpreter checks if it should switch to another thread. </p>
<p>An interval of five milliseconds doesn’t mean that threads switch exactly every five milliseconds, but rather that the interpreter considers switching to another thread at these intervals.</p>
<p>The switch interval is defined in the Python docs as follows:</p>
</div><h2><a href="https://realpython.com/python-thread-lock/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-thread-lock/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>Understanding Python's Global Interpreter Lock (GIL)</title>
<link>https://realpython.com/courses/understanding-global-interpreter-lock-gil/</link>
<guid>https://realpython.com/courses/understanding-global-interpreter-lock-gil/</guid>
<content:encoded><![CDATA[
<div> Global Interpreter Lock, mutex, Python, performance bottleneck, multi-threaded architecture
<br />
Python的全局解释器锁（GIL）是一个锁，它只允许一个线程控制Python解释器。这意味着在任何时间点只有一个线程可以处于执行状态。GIL对于单线程程序的开发者来说影响不明显，但在CPU密集和多线程代码中会成为性能瓶颈。即使在具有多个CPU核心的多线程架构中，GIL也只允许一个线程执行。因此，GIL被认为是Python的“臭名昭著”特性之一。在这个视频课程中，你将学习到GIL对Python程序性能的影响，以及如何减轻它对代码可能产生的影响。
<br /><br />总结: Python的全局解释器锁（GIL）是一个中心控制锁，限制了多线程程序的性能，尤其是在CPU密集和多线程代码中。只有一个线程可以执行，即使在多核CPU架构下也是如此。开发者可以通过其他方式来缓解GIL可能带来的影响。 <div>
<p>The Python Global Interpreter Lock or <a href="https://wiki.python.org/moin/GlobalInterpreterLock">GIL</a>, in simple words, is a mutex (or a lock) that allows only one <a href="https://realpython.com/intro-to-python-threading/">thread</a> to hold the control of the Python interpreter. </p>
<p>This means that only one thread can be in a state of execution at any point in time. The impact of the GIL isn&rsquo;t visible to developers who execute single-threaded programs, but it can be a performance bottleneck in CPU-bound and multi-threaded code.</p>
<p>Since the GIL allows only one thread to execute at a time even in a multi-threaded architecture with more than one CPU core, the GIL has gained a reputation as an &ldquo;infamous&rdquo; feature of Python.</p>
<p><strong>In this video course you&rsquo;ll learn</strong> how the GIL affects the performance of your Python programs, and how you can mitigate the impact it might have on your code.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-22T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Pydantic: Simplifying Data Validation in Python</title>
<link>https://realpython.com/quizzes/python-pydantic/</link>
<guid>https://realpython.com/quizzes/python-pydantic/</guid>
<content:encoded><![CDATA[
<div> Pydantic, data validation, Python, BaseModel, custom validators
<br />
Pydantic是Python的强大数据验证库，可用于数据模式与BaseModel。通过学习此quiz，可以了解如何编写自定义验证器以处理复杂情况，以及使用@validate_call验证函数参数。同时，pydantic-settings用于管理设置和配置应用程序。通过这篇文章，可以全面了解Pydantic和相关的应用场景，提升Python编程技能。<br /><br />总结: Pydantic是Python的数据验证库，通过BaseModel定义数据模式，自定义验证器处理复杂情况，@validate_call验证函数参数，pydantic-settings管理设置配置应用。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-pydantic/">Pydantic</a>. Pydantic is a powerful data validation library for Python. You can also use a related library, <code>pydantic-settings</code>, for settings management.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to work with data schemas with Pydantic&rsquo;s <code>BaseModel</code>,
write custom validators for complex use cases, validate function arguments with Pydantic&rsquo;s <code>@validate_call</code>,
and manage settings and configure applications with <code>pydantic-settings</code>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-20T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python's property(): Add Managed Attributes to Your Classes</title>
<link>https://realpython.com/python-property/</link>
<guid>https://realpython.com/python-property/</guid>
<content:encoded><![CDATA[
<div> property, managed attributes, Pythonic, getter, setter

属性管理在Python类中很重要，通过使用property()函数可以创建受控属性，保持稳定的API接口，避免破坏用户代码。使用属性可以提供更Pythonic的方式创建受控属性，而不是使用getter和setter方法。在Python中，避免直接暴露属性，而是提供getter和setter方法。通过这种方式，可以动态改变属性的内部实现，而不需要改变API。Getter和setter方法在Python中是可行的，但并非推荐使用方式。属性名前加下划线(_)可以表示非公开属性，但并不强制限制访问。总结: 属性管理在Python中是重要的，通过使用property()函数可以创建受控属性，提供稳定API接口，避免破坏用户代码。使用属性可以更Pythonic地管理属性，而不是使用getter和setter方法来访问和设置属性的值。在Python中，推荐避免直接暴露属性，而是提供getter和setter方法，以实现动态改变内部实现的需求。Getter和setter方法在Python中是可行的，但并非推荐的方式。属性名前加下划线(_)可以表示非公开属性，但并不强制限制访问。 <div>
<div><p>With Python’s <a href="https://docs.python.org/3/library/functions.html#property"><code>property()</code></a>, you can create <strong>managed attributes</strong> in your classes. You can use managed attributes when you need to modify an attribute’s internal implementation and don’t want to change the class’s public <a href="https://en.wikipedia.org/wiki/API">API</a>. Providing stable APIs will prevent you from breaking your users’ code when they rely on <em>your code</em>.</p>
<p><strong>Properties</strong> are arguably the most popular way to create managed attributes quickly and in the purest <a href="https://realpython.com/learning-paths/writing-pythonic-code/">Pythonic</a> style.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Create <strong>managed attributes</strong> or <strong>properties</strong> in your classes</li>
<li>Perform <strong>lazy attribute evaluation</strong> and provide <strong>computed attributes</strong></li>
<li>Make your classes Pythonic using properties instead of <strong>setter</strong> and <strong>getter</strong> methods </li>
<li>Create <strong>read-only</strong> and <strong>read-write</strong> properties</li>
<li>Create consistent and <strong>backward-compatible APIs</strong> for your classes</li>
</ul>
<p>You’ll also write practical examples that use <code>property()</code> for validating input data, computing attribute values dynamically, logging your code, and more. To get the most out of this tutorial, you should know the basics of <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>, <a href="https://realpython.com/python-classes/">classes</a>, and <a href="https://realpython.com/primer-on-python-decorators/">decorators</a> in Python.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-property-code/">Click here to download the free sample code</a> that shows you how to use Python’s property() to add managed attributes to your classes.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python's property(): Add Managed Attributes to Your Classes” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-property/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python's property(): Add Managed Attributes to Your Classes" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Pythons-property_Watermarked.a888a85a9cd8.jpg" style="background: #b9abe6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-property/"><span class="my-0 h4">Python's property(): Add Managed Attributes to Your Classes</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python's property(). With this knowledge, you'll be able to create managed attributes in your classes, perform lazy attribute evaluation, provide computed attributes, and more.</p>
    </div>
  </div>

</div>

<h2 id="managing-attributes-in-your-classes">Managing Attributes in Your Classes<a class="headerlink" href="#managing-attributes-in-your-classes" title="Permanent link"></a></h2>
<p>When you define a <a href="https://realpython.com/python-classes/">class</a> in an <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented</a> programming language, you’ll probably end up with some instance and class <a href="https://realpython.com/python3-object-oriented-programming/#class-and-instance-attributes">attributes</a>. In other words, you’ll end up with variables that are accessible through the instance, class, or even both, depending on the language. Attributes represent and hold the internal <a href="https://en.wikipedia.org/wiki/State_(computer_science)">state</a> of a given object, which you’ll often need to access and mutate.</p>
<p>Typically, you have at least two ways to access and mutate an attribute. Either you can access and mutate the attribute directly or you can use methods. Methods are <a href="https://realpython.com/python-built-in-functions/">functions</a> attached to a given class. They provide the behaviors and actions that an object can perform with its internal data and attributes.</p>
<p>If you expose attributes to the user, then they become part of the class’s public <a href="https://realpython.com/python-api/">API</a>. This means that your users will access and mutate them directly in their code. The problem comes when you need to change the internal implementation of a given attribute.</p>
<p>Say you’re working on a <code>Circle</code> class and add an attribute called <code>.radius</code>, making it public. You finish coding the class and ship it to your end users. They start using <code>Circle</code> in their code to create a lot of awesome projects and applications. Good job!</p>
<p>Now suppose that you have an important user that comes to you with a new requirement. They don’t want <code>Circle</code> to store the radius any longer. Instead, they want a public <code>.diameter</code> attribute.</p>
<p>At this point, removing <code>.radius</code> to start using <code>.diameter</code> could break the code of some of your other users. You need to manage this situation in a way other than removing <code>.radius</code>.</p>
<p>Programming languages such as <a href="https://realpython.com/oop-in-python-vs-java/">Java</a> and <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a> encourage you to never expose your attributes to avoid this kind of problem. Instead, you should provide <a href="https://realpython.com/python-getter-setter/">getter and setter</a> methods, also known as <a href="https://en.wikipedia.org/wiki/Accessor_method">accessors</a> and <a href="https://en.wikipedia.org/wiki/Mutator_method">mutators</a>, respectively. These methods offer a way to change the internal implementation of your attributes without changing your public API.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Getter and setter methods are often considered an <a href="https://en.wikipedia.org/wiki/Anti-pattern">anti-pattern</a> and a signal of poor object-oriented design. The main argument behind this proposition is that these methods break <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)">encapsulation</a>. They allow you to access and mutate the components of your objects from the outside.</p>
</div>
<p>These programming languages need getter and setter methods because they don’t have a suitable way to change an attribute’s internal implementation when a given requirement changes. Changing the internal implementation would require an API modification, which can break your end users’ code.</p>
<h3 id="the-getter-and-setter-approach-in-python">The Getter and Setter Approach in Python<a class="headerlink" href="#the-getter-and-setter-approach-in-python" title="Permanent link"></a></h3>
<p>Technically, there’s nothing that stops you from using getter and setter <a href="https://realpython.com/python3-object-oriented-programming/#instance-methods">methods</a> in Python. Here’s a quick example that shows how this approach would look:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">point_v1.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_y</span> <span class="o">=</span> <span class="n">y</span>

    <span class="k">def</span> <span class="nf">get_x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>

    <span class="k">def</span> <span class="nf">set_x</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">get_y</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_y</span>

    <span class="k">def</span> <span class="nf">set_y</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_y</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you create a <code>Point</code> class with two <a href="https://realpython.com/python-double-underscore/#creating-public-and-non-public-names-in-python">non-public</a> attributes <code>._x</code> and <code>._y</code> to hold the <a href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian coordinates</a> of the point at hand.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Python doesn’t have the notion of <a href="https://en.wikipedia.org/wiki/Access_modifiers">access modifiers</a>, such as <code>private</code>, <code>protected</code>, and <code>public</code>, to restrict access to attributes and methods. In Python, the distinction is between <strong>public</strong> and <strong>non-public</strong> class members.</p>
<p>If you want to signal that a given attribute or method is non-public, then you have to use the well-known Python <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables">convention</a> of prefixing the name with an <a href="https://realpython.com/python-double-underscore/">underscore</a> (<code>_</code>). That’s the reason behind the naming of the attributes <code>._x</code> and <code>._y</code>.</p>
<p>Note that this is just a convention. It doesn’t stop you and other programmers from accessing the attributes using <strong>dot notation</strong>, as in <code>obj._attr</code>. However, it’s bad practice to violate this convention.</p>
</div>
<p>To access and mutate the value of either <code>._x</code> or <code>._y</code>, you can use the corresponding getter and setter methods. Go ahead and save the above definition of <code>Point</code> in a Python <a href="https://realpython.com/python-modules-packages/">module</a> and <a href="https://realpython.com/python-import/">import</a> the class into an <a href="https://realpython.com/interacting-with-python/">interactive session</a>. Then run the following code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">point_v1</span> <span class="kn">import</span> <span class="n">Point</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">get_x</span><span class="p">()</span>
<span class="go">12</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">get_y</span><span class="p">()</span>
<span class="go">5</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">set_x</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">get_x</span><span class="p">()</span>
<span class="go">42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Non-public attributes are still accessible</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">_x</span>
<span class="go">42</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">point</span><span class="o">.</span><span class="n">_y</span>
<span class="go">5</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>With <code>.get_x()</code> and <code>.get_y()</code>, you can access the current values of <code>._x</code> and <code>._y</code>. You can use the setter method to store a new value in the corresponding managed attribute. From the two final examples, you can confirm that Python doesn’t restrict access to non-public attributes. Whether or not you access them directly is up to you.</p>
</div><h2><a href="https://realpython.com/python-property/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-property/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-21T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Single and Double Underscores in Python Names</title>
<link>https://realpython.com/quizzes/python-double-underscore/</link>
<guid>https://realpython.com/quizzes/python-double-underscore/</guid>
<content:encoded><![CDATA[
<div> Python, naming conventions, underscores, public names, name mangling
<br /><br />总结: Python中的命名规范依赖于使用下划线（_），通过使用单个前导下划线来区分公共和非公共名称，使用双前导下划线在Python类中利用名称混淆，以及其他在Python名称中使用下划线的常见用法。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-double-underscore/">Single and Double Underscores in Python Names</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit Python naming conventions that rely on using underscores (<code>_</code>), how to differentiate public and non-public names by using a single leading underscore, how to use double leading underscores to leverage name mangling in Python classes, and other common uses of underscores in Python names.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #224: Narwhals: Expanding DataFrame Compatibility Between Libraries</title>
<link>https://realpython.com/podcasts/rpp/224/</link>
<guid>https://realpython.com/podcasts/rpp/224/</guid>
<content:encoded><![CDATA[
<div> Narwhals, Python工具, DataFrames, 兼容性, Polars, PyArrow<br />
Narwhals 是一个 Python 工具，支持所有类型的 DataFrames 及其各种功能。该工具使用轻量级库来添加对新格式（如 Polars 或 PyArrow）的兼容性。Marco Gorelli 在本周节目中分享了关于他的项目 Narwhals 的内容。Narwhals 能够帮助用户处理各种类型的 DataFrames，并且可以轻松地适配新的数据格式，提高数据处理的灵活性和效率。<br /><br />总结: <br />Python工具Narwhals支持各种DataFrames及其功能，使用轻量级库提供对新格式的兼容性。Marco Gorelli介绍了该项目，展示了其能够处理不同类型的数据框，并且能够快速适配新的数据格式，提高数据处理的效率。 <div>
<p>How does a Python tool support all types of DataFrames and their various features? Could a lightweight library be used to add compatibility for newer formats like Polars or PyArrow? This week on the show, we speak with Marco Gorelli about his project, Narwhals.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-18T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Getting Started With Async Features in Python</title>
<link>https://realpython.com/quizzes/python-async-features/</link>
<guid>https://realpython.com/quizzes/python-async-features/</guid>
<content:encoded><![CDATA[
<div> 关键词: synchronous, asynchronous, Python async features, programs, benefits

总结:<br /><br />本文讨论了同步和异步程序的概念，以及为什么要编写异步程序以及如何使用Python的异步功能。同步程序是按照顺序执行的，而异步程序可以同时执行多个任务。Python的异步特性可以帮助提高程序的性能和效率，特别是在处理I/O密集型任务时。通过使用async和await关键字，可以编写更具有响应性的程序。因此，了解并掌握异步程序编写是很重要的，可以帮助提高编程技能和程序的执行效率。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-async-features/">Asynchronous Programming in Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the concepts of synchronous and asynchronous programs,
why you might want to write an asynchronous program, and how to use Python async features.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Structural Pattern Matching in Python</title>
<link>https://realpython.com/structural-pattern-matching/</link>
<guid>https://realpython.com/structural-pattern-matching/</guid>
<content:encoded><![CDATA[
<div> pattern matching, Python, structural, syntax, features
<br />
Python 3.10 在其发布版本中引入了结构模式匹配，这是一种强大的控制流构造，为按声明式代码风格编写提供了简洁可读的语法。模式匹配可以使代码更加优雅、简洁，并且使用match语句和case子句来比较值。模式匹配通过条件语句和对象解构的组合，能够更灵活地控制代码流程。这种特性在编译型函数式语言中首次出现，而在动态类型的 Python 中面临挑战。结构模式匹配的使用需要了解Python基础知识，包括条件语句、循环和内置函数。<article>总结:</article> <div>
<div><p>Structural pattern matching is a powerful <strong>control flow construct</strong> invented decades ago that’s traditionally used by compiled languages, especially within the <a href="https://realpython.com/python-functional-programming/">functional programming paradigm</a>. </p>
<p>Most mainstream programming languages have since adopted some form of pattern matching, which offers concise and readable syntax while promoting a declarative code style. Although Python was late to join the party, it introduced structural pattern matching in the <a href="https://realpython.com/python310-new-features/">3.10</a> release.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Master the <strong>syntax</strong> of the <code>match</code> statement and <code>case</code> clauses</li>
<li>Explore various <strong>types of patterns</strong> supported by Python</li>
<li>Learn about <strong>guards</strong>, <strong>unions</strong>, <strong>aliases</strong>, and <strong>name binding</strong></li>
<li>Extract values from deeply nested <strong>hierarchical data structures</strong></li>
<li>Customize pattern matching for <strong>user-defined classes</strong></li>
<li>Identify and avoid <strong>common pitfalls</strong> in Python’s pattern matching</li>
</ul>
<p>To get the most out of this tutorial, you should have a basic understanding of <a href="https://realpython.com/python-conditional-statements/">conditional statements</a>, <a href="https://realpython.com/python-for-loop/">loops</a>, <a href="https://realpython.com/defining-your-own-python-function/">functions</a>, and <a href="https://realpython.com/python-classes/">classes</a> in Python. Additionally, familiarity with Python’s built-in <a href="https://realpython.com/python-data-structures/">data structures</a>, such as <a href="https://realpython.com/python-tuple/">tuples</a>, <a href="https://realpython.com/python-list/">lists</a>, and <a href="https://realpython.com/python-dicts/">dictionaries</a>, will be beneficial.</p>
<div class="alert alert-warning">
<p><strong>Get Your Free Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/structural-pattern-matching-code/">Click here to download the free sample code</a> that shows you how to use structural pattern matching in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Structural Pattern Matching” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/structural-pattern-matching/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Structural Pattern Matching in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Structural-Pattern-Matching-in-Python-3.10_Watermarked-2.085d2bfb1940.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/structural-pattern-matching/"><span class="my-0 h4">Structural Pattern Matching</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of structural pattern matching in Python. This powerful control flow construct, introduced in Python 3.10, offers concise and readable syntax while promoting a declarative code style.</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-structural-pattern-matching">Getting to Know Structural Pattern Matching<a class="headerlink" href="#getting-to-know-structural-pattern-matching" title="Permanent link"></a></h2>
<p>Before taking advantage of structural pattern matching in your code, make sure that you’re running <strong>Python 3.10</strong> or later, as you won’t be able to use it in earlier Python versions. Note that although the name <strong>structural pattern matching</strong> is often shortened to just <strong>pattern matching</strong>, the qualifier <em>structural</em> is crucial to understanding the use cases for this feature. In this section, you’ll get a high-level overview of structural pattern matching.</p>
<h3 id="what-is-pattern-matching">What Is Pattern Matching?<a class="headerlink" href="#what-is-pattern-matching" title="Permanent link"></a></h3>
<p>You can think of pattern matching as a form of <a href="https://realpython.com/syntactic-sugar-python/">syntactic sugar</a> built on top of existing language constructs, including <a href="https://realpython.com/python-conditional-statements/">conditional statements</a> and <a href="https://realpython.com/python-tuple/#packing-and-unpacking-tuples">tuple unpacking</a>. While you can absolutely live without pattern matching, it gives you new superpowers, making this feature more convenient than the conventional syntax in some situations.</p>
<p>Pattern matching often leads to more elegant, concise, and readable code written in a <a href="https://en.wikipedia.org/wiki/Declarative_programming">declarative</a> style. To get a taste of it, take a quick look at the following example without trying to fully understand how it works just yet:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">json</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
    <span class="k">match</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
        <span class="k">case</span> <span class="p">{</span><span class="s2">"keyboard"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"key"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"code"</span><span class="p">:</span> <span class="n">code</span><span class="p">}}}:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Key pressed: </span><span class="si">{</span><span class="n">code</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
        <span class="k">case</span> <span class="p">{</span><span class="s2">"mouse"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"cursor"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"screen"</span><span class="p">:</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]}}}:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Mouse cursor: </span><span class="si">{</span><span class="n">x</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="n">y</span><span class="si">=}</span><span class="s2">"</span><span class="p">)</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">"Unknown event type"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <code>match</code> statement takes a <strong>subject</strong>, which can be any valid Python expression, such as a string literal or a function call, and compares the resulting value to one or more <strong>patterns</strong> listed in the <code>case</code> clauses. The first pattern that matches the given subject will trigger the corresponding <code>case</code> block to run. You’ll learn more about the <code>match</code> statement and <code>case</code> clauses later in this tutorial.</p>
<p>At first glance, the syntax of structural pattern matching in Python looks a bit like the <a href="https://en.wikipedia.org/wiki/Switch_statement"><code>switch</code> statement</a> found in the <a href="https://en.wikipedia.org/wiki/List_of_C-family_programming_languages">C-family</a> programming languages if you squint your eyes:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--purple">
    <span class="mr-2 noselect">C</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kt">void</span><span class="w"> </span><span class="nf">log_event</span><span class="p">(</span><span class="k">enum</span><span class="w"> </span><span class="n">Event</span><span class="w"> </span><span class="n">event</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">event</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="no">KEYBOARD</span><span class="p">:</span>
<span class="w">            </span><span class="n">printf</span><span class="p">(</span><span class="s">"Keyboard event</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">            </span><span class="k">break</span><span class="p">;</span>
<span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="no">MOUSE</span><span class="p">:</span>
<span class="w">            </span><span class="n">printf</span><span class="p">(</span><span class="s">"Mouse event</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">            </span><span class="k">break</span><span class="p">;</span>
<span class="w">        </span><span class="k">default</span><span class="o">:</span>
<span class="w">            </span><span class="n">printf</span><span class="p">(</span><span class="s">"Unknown event</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This resemblance is deceptive, though. The classic <code>switch</code> statement controls the execution flow based on the <strong>exact value</strong> stored in a variable. It effectively works as a chained sequence of mutually exclusive <code>if..elif...</code> equality comparisons, but with a more succinct and readable syntax.</p>
<p>Although you can use pattern matching this way, you’d be missing out on its true power and flexibility. Structural pattern matching was designed to go beyond value comparisons. In particular, it combines <strong>conditional statements</strong> or branching based on a logical predicate with <strong>destructuring</strong> or object deconstruction, which is the inverse of object construction. You’ll see examples of destructuring in the next section.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Because pattern matching does two things at once, the Python interpreter can take advantage of this to optimize the underlying bytecode with specialized opcodes, making the code run slightly faster.</p>
</div>
<p>The brief code snippet above merely scratches the surface of what you can achieve with pattern matching, but it already shows you its expressiveness, especially when you compare it with the traditional <code>if...elif...</code> statements and <a href="https://docs.python.org/3/library/functions.html#isinstance"><code>isinstance()</code></a> checks. Here’s one of the many ways you can implement the equivalent logic using standard Python:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">json</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
    <span class="n">parsed_event</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span>
        <span class="s2">"keyboard"</span> <span class="ow">in</span> <span class="n">parsed_event</span> <span class="ow">and</span>
        <span class="s2">"key"</span> <span class="ow">in</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"keyboard"</span><span class="p">]</span> <span class="ow">and</span>
        <span class="s2">"code"</span> <span class="ow">in</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"keyboard"</span><span class="p">][</span><span class="s2">"key"</span><span class="p">]</span>
    <span class="p">):</span>
        <span class="n">code</span> <span class="o">=</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"keyboard"</span><span class="p">][</span><span class="s2">"key"</span><span class="p">][</span><span class="s2">"code"</span><span class="p">]</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Key pressed: </span><span class="si">{</span><span class="n">code</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="k">elif</span> <span class="p">(</span>
        <span class="s2">"mouse"</span> <span class="ow">in</span> <span class="n">parsed_event</span> <span class="ow">and</span>
        <span class="s2">"cursor"</span> <span class="ow">in</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"mouse"</span><span class="p">]</span> <span class="ow">and</span>
        <span class="s2">"screen"</span> <span class="ow">in</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"mouse"</span><span class="p">][</span><span class="s2">"cursor"</span><span class="p">]</span>
    <span class="p">):</span>
        <span class="n">screen</span> <span class="o">=</span> <span class="n">parsed_event</span><span class="p">[</span><span class="s2">"mouse"</span><span class="p">][</span><span class="s2">"cursor"</span><span class="p">][</span><span class="s2">"screen"</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">screen</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">screen</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Mouse cursor: x=</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">, y=</span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">"Unknown event type"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Unknown event type"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This code is functionally identical to the previous version but is longer and has more indentation levels than before. Additionally, it looks more verbose and <a href="https://en.wikipedia.org/wiki/Imperative_programming">imperative</a> in style, describing not only <em>what</em> to do but also <em>how</em> to perform the individual steps. Granted, you could try making it slightly shorter by using the <a href="https://realpython.com/python-walrus-operator/">Walrus operator</a> and following the <a href="https://realpython.com/python-lbyl-vs-eafp/">EAFP principle</a> without explicit checks, but it’d remain somewhat convoluted.</p>
<p>It’s worth noting that structural pattern matching first emerged in compiled functional languages with static typing. The attempt to implement it in Python, which is a <a href="https://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic language</a>, presented completely new and unique challenges. You can read more about them in the paper entitled <a href="https://gvanrossum.github.io/docs/PyPatternMatching.pdf">Dynamic Pattern Matching with Python</a>, which was co-authored by <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum</a> and published in the proceedings of the Dynamic Languages Symposium in 2020.</p>
<p>Now that you’ve seen the most basic form of pattern matching in Python, it’s time to unravel the meaning of a structural pattern.</p>
<h3 id="what-is-a-structural-pattern">What Is a Structural Pattern?<a class="headerlink" href="#what-is-a-structural-pattern" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/structural-pattern-matching/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/structural-pattern-matching/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using Type Hints for Multiple Return Types in Python</title>
<link>https://realpython.com/courses/type-hints-multiple-return-types/</link>
<guid>https://realpython.com/courses/type-hints-multiple-return-types/</guid>
<content:encoded><![CDATA[
<div> Python, type hints, multiple return types, function, callback functions
<br />
该文章介绍了在Python中使用类型提示来指定函数具有多个返回类型的情况。通过对解析电子邮件地址字符串以获取域名的函数进行示例，展示了如何指定多个返回类型。此外，还展示了如何为回调函数或接受另一个函数作为输入的函数指定类型提示。通过这些示例，读者可以了解如何在函数式编程中表达类型提示。
<br /><br />总结: 该文章介绍了类型提示在Python中的重要性，以及如何指定函数的多个返回类型和回调函数的类型提示。通过实例介绍了在编写灵活应用时如何使代码更健壮和适应不同情况。 <div>
<p>In Python, <strong>type hinting</strong> is an optional yet useful feature for making your code easier to read, reason about, and debug. With type hints, you let other developers know the expected data types for variables, function arguments, and return values. As you write code for applications that require greater flexibility, you may need to specify <strong>multiple return types</strong> to make your code more robust and adaptable to different situations.</p>
<p>You&rsquo;ll encounter different use cases where you may want to annotate multiple return types within a single function in Python. In other words, the data returned can vary in type. In this video course, you&rsquo;ll walk through examples of how to specify multiple return types for a function that parses a string from an email address to grab the domain name.</p>
<p>In addition, you&rsquo;ll see examples of how to specify type hints for callback functions or functions that take another function as input. With these examples, you&rsquo;ll be ready to express type hints in functional programming.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Syntactic Sugar: Why Python Is Sweet and Pythonic</title>
<link>https://realpython.com/syntactic-sugar-python/</link>
<guid>https://realpython.com/syntactic-sugar-python/</guid>
<content:encoded><![CDATA[
<div> syntactic sugar, Python, operators, assignment expressions, for loops<br />
<br />
syntactic sugar指的是简化代码的语法，使代码更易读、更简洁。Python使用syntactic sugar来使代码更Pythonic和易读，包括操作符、赋值表达式、for循环以及其他构造。Python中的运算符由特殊方法支持，每个操作符都对应一个特殊方法。了解这些syntactic sugar可以帮助你更好地理解Python的内部工作方式。在某些情况下，使用desugared版本可能更适合。知道给定语法糖的替代代码是一个很好的技能。总结: <div>
<div><p>Python has several pieces of syntax that are <strong>syntactic sugar</strong>. This sugar is syntax that isn’t strictly necessary but gives Python some of its flavor as a readable, beginner-friendly, and powerful language. In this tutorial, you’ll explore some of Python’s most used pieces of syntactic sugar.</p>
<p>In practice, you already use most of these pieces of syntax, as they include many well-known Pythonic constructs. As you read on, you’ll see how Python works under the hood and learn how to use the language efficiently and securely.</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What <strong>syntactic sugar</strong> is</li>
<li>How syntactic sugar applies to <strong>operators</strong></li>
<li>How <strong>assignment expressions</strong> are syntactic sugar</li>
<li>How <strong><code>for</code> loops</strong> and <strong>comprehensions</strong> are syntactic sugar</li>
<li>How other Python <strong>constructs</strong> are also syntactic sugar</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with the basics of Python, including <a href="https://realpython.com/python-operators-expressions/">operators, expressions</a>, <a href="https://realpython.com/python-for-loop/">loops</a>, <a href="https://realpython.com/primer-on-python-decorators/">decorators</a>, <a href="https://realpython.com/python-classes/">classes</a>, <a href="https://realpython.com/python-with-statement/">context managers</a>, and more.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/syntactic-sugar-python-code/">Click here to download the free sample code</a> that shows you how to use syntactic sugar in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Syntactic Sugar: Why Python Is Sweet and Pythonic” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/syntactic-sugar-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Syntactic Sugar: Why Python Is Sweet and Pythonic" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Syntactic-Sugar-in-Python_Watermarked-3.d721e975bba6.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/syntactic-sugar-python/"><span class="my-0 h4">Syntactic Sugar: Why Python Is Sweet and Pythonic</span></a> 
      <p class="text-muted mb-0 small">You can take this quiz to test your understanding of Python's most common pieces of syntactic sugar and how they make your code more Pythonic and readable.</p>
    </div>
  </div>

</div>

<h2 id="syntactic-sugar">Syntactic Sugar<a class="headerlink" href="#syntactic-sugar" title="Permanent link"></a></h2>
<p>In programming, <strong>syntactic sugar</strong> refers to pieces of syntax that simplify the code and make it more readable or concise. Syntactic sugar lets you express things in a clearer and more readable way.</p>
<blockquote>
<p>It makes the language <em>sweeter</em> for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer. (<a href="https://en.wikipedia.org/wiki/Syntactic_sugar">Source</a>)</p>
</blockquote>
<p>However, syntactic sugar is something that you may not need in practice because you can get the same result using a different, and often more involved, construct.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> This tutorial is slightly inspired by <a href="https://realpython.com/podcasts/rpp/92/">Brett Cannon’s</a> series of posts about <a href="https://snarky.ca/tag/syntactic-sugar/">unraveling syntactic sugar</a> in Python. In that series, Brett goes deep into each piece of syntactic sugar. You can check out the series if you’d like a detailed discussion of the syntax constructs covered in this tutorial and others.</p>
</div>
<p>Python has many pieces of syntactic sugar that you’ll regularly use in your code. These syntax constructs make Python more readable, quicker to write, and user-friendly. Understanding these syntactic sugar pieces and their significance will help you better understand the inner workings of Python.</p>
<p>In rare situations, you’ll find that desugared versions of a given piece of syntactic sugar can better fulfill your needs. So, knowing about the alternative code to a given sugar can be a good skill to have.</p>
<h2 id="operators-in-python">Operators in Python<a class="headerlink" href="#operators-in-python" title="Permanent link"></a></h2>
<p>As with most programming languages, Python makes extensive use of operators. You’ll find several categories of operators, including arithmetic, assignment, augmented assignment, comparison, <a href="https://realpython.com/python-boolean/">Boolean</a>, and membership operators. All these operators are part of Python’s syntactic sugar constructs because they let you write expressions in a quick and readable way.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into Python operators, check out the <a href="https://realpython.com/python-operators-expressions/">Operators and Expressions in Python</a> tutorial.</p>
</div>
<p>For example, arithmetic operators allow you to create math expressions that are quick to write and read because they look pretty similar to what you learned in math class:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">5</span> <span class="o">+</span> <span class="mi">7</span>
<span class="go">12</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span> <span class="o">-</span> <span class="mi">4</span>
<span class="go">6</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">2</span> <span class="o">*</span> <span class="mi">4</span>
<span class="go">8</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">20</span> <span class="o">/</span> <span class="mi">2</span>
<span class="go">10</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the first example, you use the plus operator (<code>+</code>) to add two numbers. In the second example, you use the subtraction operator (<code>-</code>) to subtract two numbers. The final two examples perform multiplication and division.</p>
<p>Python supports its arithmetic operators through <strong>special methods</strong>. Here’s a quick summary:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th class="text-center">Operator</th>
<th>Operation</th>
<th>Method</th>
</tr>
</thead>
<tbody>
<tr>
<td class="text-center"><code>+</code></td>
<td>Addition</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__add__"><code>.__add__()</code></a></td>
</tr>
<tr>
<td class="text-center"><code>-</code></td>
<td>Subtraction</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__sub__"><code>.__sub__()</code></a></td>
</tr>
<tr>
<td class="text-center"><code>*</code></td>
<td>Multiplication</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__mul__"><code>.__mul__()</code></a></td>
</tr>
<tr>
<td class="text-center"><code>/</code></td>
<td>Division</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__truediv__"><code>.__truediv__()</code></a></td>
</tr>
<tr>
<td class="text-center"><code>//</code></td>
<td>Integer division</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__floordiv__"><code>.__floordiv__()</code></a></td>
</tr>
<tr>
<td class="text-center"><code>**</code></td>
<td>Exponentiation</td>
<td><a href="https://docs.python.org/3/reference/datamodel.html#object.__pow__"><code>.__pow__()</code></a></td>
</tr>
</tbody>
</table>
</div>
<p>What does it mean to say Python supports its operators through special methods? It means that every time you use an operator, Python calls the corresponding special method under the hood.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about special methods, also known as magic or dunder methods, check out <a href="https://realpython.com/python-magic-methods/">Python’s Magic Methods: Leverage Their Power in Your Classes</a>.</p>
</div>
<p>To illustrate, here’s how you can express the arithmetic operations you wrote earlier using the appropriate special methods:</p>
</div><h2><a href="https://realpython.com/syntactic-sugar-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/syntactic-sugar-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-14T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Thread Safety: Using a Lock and Other Techniques</title>
<link>https://realpython.com/quizzes/python-thread-lock/</link>
<guid>https://realpython.com/quizzes/python-thread-lock/</guid>
<content:encoded><![CDATA[
<div> Python、threading、race conditions、thread safety、synchronization primitives
<br />
Python中的多线程编程非常重要，需要了解race conditions、thread safety和synchronization primitives等概念。在使用Python的threading模块和ThreadPoolExecutor时，需要注意线程安全和同步的问题。通过本文，可以检验对Python中的多线程以及相关概念的理解，包括避免竞争条件、线程安全问题和使用同步原语来保证代码的正确执行。通过不断练习和掌握这些概念，能够更好地应用多线程编程来提高Python代码的效率和性能。<br /><br />总结: 本文重点讲解了Python中的多线程编程及相关概念，包括竞争条件、线程安全和同步原语。掌握这些知识对于有效使用Python的threading模块和ThreadPoolExecutor至关重要。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of Python threading and <a href="https://realpython.com/python-thread-lock/">thread safety</a>. You&rsquo;ll revisit concepts such as race conditions, thread safety issues, and synchronization primitives in the <code>threading</code> module. This knowledge is crucial when working with multithreaded code using Python&rsquo;s <code>threading</code> module and <code>ThreadPoolExecutor</code>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-13T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #223: Exploring the New Features of Python 3.13</title>
<link>https://realpython.com/podcasts/rpp/223/</link>
<guid>https://realpython.com/podcasts/rpp/223/</guid>
<content:encoded><![CDATA[
<div> Python 3.13, Geir Arne Hjelle, Christopher Trudeau, 新功能, 文章预览 <br />
Python 3.13发布了，Geir Arne Hjelle和Christopher Trudeau回顾了这个新版本。Geir Arne与Real Python团队成员协作了一系列预览文章，还有一个展示教程"Python 3.13: Cool New Features for You to Try"。Christopher的视频课程"What's New in Python 3.13"涵盖了文章中的主题，并展示了新功能的实际操作。总结: Python 3.13发布了，Geir Arne和Christopher介绍了新版本的一些关键功能，包括预览文章和视频课程。 <div>
<p>Python 3.13 is here! Our regular guests, Geir Arne Hjelle and Christopher Trudeau, return to discuss the new version. This year, Geir Arne coordinated a series of preview articles with members of the Real Python team and a showcase tutorial, "Python 3.13: Cool New Features for You to Try." Christopher's video course "What's New in Python 3.13" covers the topics from the article and shows the new features in action.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-11T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Structural Pattern Matching</title>
<link>https://realpython.com/quizzes/structural-pattern-matching/</link>
<guid>https://realpython.com/quizzes/structural-pattern-matching/</guid>
<content:encoded><![CDATA[
<div> 关键词: match statement, case clauses, patterns, guards, name binding

总结:<br /><br />本文讨论了Python中match语句和case子句的语法，介绍了各种类型的模式支持，同时也深入探讨了守卫、联合、别名和名称绑定的概念。这些内容有助于提高对Python中匹配操作的理解，使代码更加简洁和可读。在阅读本文后，读者可以更好地利用Python中的匹配功能，提高代码的效率和质量。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/structural-pattern-matching/">Structural Pattern Matching in Python</a>.</p>
<p>You&rsquo;ll revisit the syntax of the <code>match</code> statement and <code>case</code> clauses,
explore various types of patterns supported by Python,
and learn about guards, unions, aliases, and name binding.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-10T12:00:00+00:00</pubDate>
</item>
<item>
<title>Build a Contact Book App With Python, Textual, and SQLite</title>
<link>https://realpython.com/contact-book-python-textual/</link>
<guid>https://realpython.com/contact-book-python-textual/</guid>
<content:encoded><![CDATA[
<div> Python, Textual, SQLite, Contact book, TUI

要点:
- 使用Python， Textual和SQLite构建联系簿应用程序
- 创建TUI联系簿应用程序
- 使用SQLite处理数据库操作
- 连接TUI和数据库代码，使应用程序功能正常

<br /><br />总结:
本教程将教你如何使用Python，Textual和SQLite构建联系簿应用程序。通过创建TUI联系簿应用程序并处理数据库操作，你将学会如何将应用程序连接到数据库代码并使其正常运行。这将让你建立一个功能齐全的联系簿应用程序，可以存储和管理你的联系信息。 <div>
<div><p>Building <a href="https://realpython.com/intermediate-python-project-ideas/">projects</a> is a great way to learn programming and have fun at the same time. When you work on a project, you apply different coding skills simultaneously, which is good practice for what you’ll do in a real-life project. In this tutorial, you’ll create a contact book application with a <a href="https://en.wikipedia.org/wiki/Text-based_user_interface">text-based interface (TUI)</a> based on Python and Textual. To store the contact data, your app will use an SQLite database. </p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Create the <strong>contact book app’s TUI</strong> using Textual</li>
<li>Handle the database operations using <strong>SQLite</strong></li>
<li><strong>Connect</strong> the app’s TUI with the database code and make it functional</li>
</ul>
<p>At the end of this project, you’ll have a functional contact book application that will allow you to store and manage your contact information.</p>
<p>To get the complete source code for the application and the code for every step in this tutorial, click the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/contact-book-python-textual-code/">Click here to download the free sample code</a> you’ll use to build a contact book app with Python, Textual, and SQLite.</p>
</div>
<h2 id="demo-a-contact-book-built-with-python-and-textual">Demo: A Contact Book Built With Python and Textual<a class="headerlink" href="#demo-a-contact-book-built-with-python-and-textual" title="Permanent link"></a></h2>
<p>Contact or address books are a widely used type of application. They can be found on phones and computers, allowing users to store and manage contact information for family, friends, coworkers, and so on.</p>
<p>In this tutorial, you’ll code a contact book TUI app with Python, <a href="https://textual.textualize.io/">Textual</a>, and <a href="https://www.sqlite.org/about.html">SQLite</a>. Here’s a demo of how your contact book will look once you’ve followed all the steps:</p>
<figure>
  <div class="embed-responsive embed-responsive-16by9 rounded mb-3 ">
    
  </div>

</figure>

<p>Your contact book will provide a basic set of features for this type of application, and you’ll be able to display, add, and remove the information in your contacts list.</p>
<h2 id="project-overview">Project Overview<a class="headerlink" href="#project-overview" title="Permanent link"></a></h2>
<p>To build your contact book app, you’ll organize the code in a few modules under a package. In this tutorial, you’ll use the following directory structure:</p>
<div class="highlight"><pre><span></span><code>rpcontacts_project/
│
├── rpcontacts/
│   ├── __init__.py
│   ├── __main__.py
│   ├── database.py
│   ├── rpcontacts.tcss
│   └── tui.py
│
├── README.md
└── requirements.txt
</code></pre></div>
<p>The root directory of your project is <code>rpcontacts_project/</code>. Inside, there’s an <code>rpcontacts/</code> subdirectory that holds the application’s main package.</p>
<p>You’ll cover the content of each file in this tutorial. The name of each file will give you an idea of its role in the application.</p>
<p>For example, <code>__main__.py</code> will host the application, and <code>database.py</code> will provide database-related code. Similarly, <code>rpcontacts.tcss</code> is a <a href="https://textual.textualize.io/guide/CSS/">CSS</a> file that will allow you to tweak the visual style of your Textual app. Finally, <code>tui.py</code> will contain the code to generate the app’s TUI, including the main screen and a couple of auxiliary screens or dialogs.</p>
<h2 id="prerequisites">Prerequisites<a class="headerlink" href="#prerequisites" title="Permanent link"></a></h2>
<p>To get the most out of this project, you should have some previous knowledge of how to lay out a Python project and work with <a href="https://realpython.com/python-sql-libraries/#sqlite">SQLite</a> databases. You should also know the basics of working with Python classes. Some knowledge about writing CSS code would also be a plus.</p>
<p>To satisfy these knowledge requirements, you can take a look at the following resources:</p>
<ul>
<li><a href="https://realpython.com/python-application-layouts/">Python Application Layouts: A Reference</a></li>
<li><a href="https://realpython.com/python-sql-libraries/">Introduction to Python SQL Libraries</a></li>
<li><a href="https://realpython.com/python-sqlite-sqlalchemy/">Data Management With Python, SQLite, and SQLAlchemy</a></li>
<li><a href="https://realpython.com/html-css-python/">HTML and CSS for Python Developers</a></li>
</ul>
<p>Don’t worry if you don’t have all of the prerequisite knowledge before starting this tutorial—that’s completely okay! You’ll learn through the process of getting your hands dirty as you build the project. If you get stuck, then take some time to review the resources linked above. Then, get back to the code.</p>
<p>The contact book application you’ll build in this tutorial has a single external dependency, which is <a href="https://textual.textualize.io/">Textual</a>. This library provides a rapid application development framework that allows you to create apps you can run in your terminal and browser.</p>
<p>To follow best practices in your development process, you can start by creating a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> and then <a href="https://textual.textualize.io/getting_started/#installation">install Textual</a> using <a href="https://realpython.com/what-is-pip/"><code>pip</code></a>:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
</div><h2><a href="https://realpython.com/contact-book-python-textual/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/contact-book-python-textual/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-09T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Closures: Common Use Cases and Examples</title>
<link>https://realpython.com/quizzes/python-closure/</link>
<guid>https://realpython.com/quizzes/python-closure/</guid>
<content:encoded><![CDATA[
<div> Python、closures、functional programming languages、decorators、quiz
<br />
Python的闭包是函数式编程语言中的常见特性，特别受到Python程序员的喜爱，因为它们允许创建基于函数的装饰器。本篇文章主要介绍了Python闭包的概念和用法，并通过一道测验来测试对闭包的理解。闭包在编程中起着重要作用，特别是在函数式编程中。同时，闭包也可以用于创建装饰器，实现对函数的增强功能。读者可以通过此篇文章了解闭包的基本概念和在Python中的应用。通过阅读本文和完成测验，读者可以加深对Python闭包的理解。总结: Python闭包在函数式编程中具有重要作用，可以用于创建装饰器，是Python编程中常用的技术。Br/> <div>
<p>In this quiz, you&rsquo;ll test your understanding of Python closures. Closures are a common feature in functional programming languages and are particularly popular in Python because they allow you to create function-based decorators.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-closure/">Python Closures: Common Use Cases and Examples</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-08T12:00:00+00:00</pubDate>
</item>
<item>
<title>What's New in Python 3.13</title>
<link>https://realpython.com/courses/new-features-python-313/</link>
<guid>https://realpython.com/courses/new-features-python-313/</guid>
<content:encoded><![CDATA[
<div> Python 3.13, 版本更新, 改进, 交互式解释器, 错误消息, GIL, JIT 编译器, 静态类型系统  
<br />  
Python 3.13 是一次重大的更新，虽然大部分变化在内部进行，不会立即展示给用户。这个版本为未来性能改进奠定了基础。课程将介绍这些背景并探讨一些全新功能。罗列了此版本的改进项目，涵盖了交互式解释器、错误信息、GIL 移除与 Python 自由线程、JIT 编译器实验性实现、静态类型系统细微提升。通过课程，您将发现这些变化，并了解 Python 3.13 如何为您效力。如果想尝试课程中的示例，需要使用 Python 3.13。相关文档可指导您在系统中安装新版本的 Python。  
<br /><br />总结: Python 3.13 版本带来了多项改进，包括交互式解释器、错误消息、GIL 的移除、JIT 编译器的实验性实现以及静态类型系统的更新。这些改进为未来性能提升奠定了基础，带来更好的用户体验和开发效率。 <div>
<p><a href="https://www.python.org/downloads/release/python-3120/">Python 3.13</a> was published on <a href="https://peps.python.org/pep-0719/">October 7, 2024</a>. This new version is a major step forward for the language, although several of the biggest changes are happening under the hood and won&rsquo;t be immediately visible to you.</p>
<p>In a sense, Python 3.13 is laying the groundwork for some future improvements, especially to the language&rsquo;s performance. As you watch the course, you&rsquo;ll learn more about the background for this and dive into some new features that are fully available now.</p>
<p><strong>In this video course, you&rsquo;ll learn about some of the improvements in the new version, including:</strong></p>
<ul>
<li>Improvements made to the <strong>interactive interpreter (REPL)</strong></li>
<li><strong>Clearer error messages</strong> that can help you fix common mistakes</li>
<li>Advancements done in <strong>removing the global interpreter lock (GIL)</strong> and making Python free-threaded</li>
<li>The implementation of an <strong>experimental Just-In-Time (JIT) compiler</strong></li>
<li>A host of minor upgrades to <strong>Python&rsquo;s static type system</strong></li>
</ul>
<p>In this video course, you&rsquo;ll explore these changes and see how this new version of Python can work for you.</p>
<p>If you want to try any of the examples in this video course, then you&rsquo;ll need to use Python 3.13. The <a href="https://realpython.com/installing-python/">Python 3 Installation &amp; Setup Guide</a> and <a href="https://realpython.com/python-pre-release/">How Can You Install a Pre-Release Version of Python?</a> walk you through several options for adding a new version of Python to your system.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News Roundup: October 2024</title>
<link>https://realpython.com/python-news-october-2024/</link>
<guid>https://realpython.com/python-news-october-2024/</guid>
<content:encoded><![CDATA[
<div> 版本发布 延迟 垃圾回收 互动解释器 静态类型系统 REPL 错误信息 JIT 编译器 并发<br /><br />总结:Python 3.13版本发布时被延迟，主要是因为增量GC实现的性能问题。在新版本中包含了新的交互式解释器（REPL）、带颜色的回溯和改进的错误信息、无全局解释器锁（GIL）的独立线程版本、实验性的即时编译（JIT）编译器以及多项静态类型系统改进。新增的自由线程和JIT编译器需要使用特殊构建标志来编译Python。值得注意的是，Python 3.13版本处理延迟发布的问题时采取了负责任的态度，确保新功能的稳定性和性能。 <div>
<div><p>October is always an important month for Python, as this is when a new major version is released. <strong>Python 3.13</strong> is the new version this year, and it brings several new features that lay the groundwork for other changes in the future. As one version of Python comes to life, another is put to rest. <strong>Python 3.8</strong> is already five years old, which means that this version won’t be supported any longer.</p>
<p>There are also exciting developments happening in the wider Python community. In this newsletter, you can read about <strong>Polars’</strong> improved support for <strong>plotting</strong>, as well as how Django developers gathered for the annual <strong>DjangoCon US</strong> conference.</p>
<p>Time to jump in and read about what’s happening in the world of Python!</p>
<h2 id="python-313-release-slightly-delayed">Python 3.13 Release Slightly Delayed<a class="headerlink" href="#python-313-release-slightly-delayed" title="Permanent link"></a></h2>
<p>The release of Python 3.13, the newest version of Python, was originally scheduled for October 1, 2024. However, a few days before that date, release manager Thomas Wouters decided to postpone the release until <strong>October 7, 2024</strong>:</p>
<blockquote>
<p>I’m a little concerned with the impact of the incremental GC change in 3.13, which recently <a href="https://github.com/python/cpython/issues/124567">showed up</a>. It’s not clear that the incremental GC provides significant improvements (although the smaller pauses are probably desirable), it clearly has slightly more overhead in common cases, and we’re still discovering pathological cases.</p>
<p>I don’t think we should release 3.13.0 with the incremental GC. (<a href="https://discuss.python.org/t/incremental-gc-and-pushing-back-the-3-13-0-release/65285">Source</a>)</p>
</blockquote>
<p>The incremental <a href="https://realpython.com/python-memory-management/#garbage-collection">garbage collector</a> was a small improvement slated for Python 3.13. In many cases, the new garbage collection algorithm improves performance. Unfortunately, it was found to slow down Python significantly in some rare cases.</p>
<p>As a result, the core developers decided to revert the implementation and use the traditional garbage collector in Python 3.13. At the same time, the new implementation is being scrutinized and currently the goal is to include incremental garbage collection in Python 3.14.</p>
<p>Delaying a major Python release is never an easy choice. However, erring on the side of caution is a good approach, and it’s great to see that the Python 3.13 release is being handled responsibly.</p>
<h2 id="python-313-highlights">Python 3.13 Highlights<a class="headerlink" href="#python-313-highlights" title="Permanent link"></a></h2>
<p>As always, a new Python release brings many improvements and new features. You can explore these in-depth in <a href="https://realpython.com/python313-new-features/">Python 3.13: Cool New Features for You to Try</a>. In particular, the new release includes:</p>
<ul>
<li>A brand new interactive interpreter (REPL)</li>
<li>Colored tracebacks and improved error messages</li>
<li>A separate, free-threaded version of Python that runs without the global interpreter lock (GIL)</li>
<li>An experimental just-in-time (JIT) compiler</li>
<li>Several improvements to Python’s static type system</li>
</ul>
<p>For free threading and the JIT compiler, you need to compile Python with special build flags. Read <a href="https://realpython.com/python313-free-threading-jit/">Python 3.13 Preview: Free Threading and a JIT Compiler</a> to learn more about how to explore these two new features. Additionally, <a href="https://realpython.com/python313-repl/">Python 3.13 Preview: A Modern REPL</a> provides more detail on the new REPL.</p>
</div><h2><a href="https://realpython.com/python-news-october-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-october-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-07T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Iterators and Iterables in Python: Run Efficient Iterations</title>
<link>https://realpython.com/quizzes/python-iterators-iterables/</link>
<guid>https://realpython.com/quizzes/python-iterators-iterables/</guid>
<content:encoded><![CDATA[
<div> iterators iterables generator functions yield statement differences<br />
<br />
迭代器和可迭代对象是Python中重要的概念，迭代器是一个对象，它实现了`__next__`方法来逐个返回元素，可迭代对象是一组数据的容器，支持使用迭代器来访问。生成器函数是一种特殊的函数，使用`yield`语句可以暂停函数执行并返回一个值，方便按需生成数据。区别在于，生成器函数是一种特殊的迭代器，更方便、简洁地实现迭代器。要熟练使用迭代器和可迭代对象，理解生成器函数和`yield`语句的用法是必不可少的。总结: 在Python中，迭代器、可迭代对象、生成器函数、以及`yield`语句是帮助实现迭代和按需生成数据的关键概念。通过理解它们之间的区别和如何使用，能够更加灵活、高效地处理数据。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-iterators-iterables/">Python&rsquo;s Iterators and Iterables</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to create and work with iterators and iterables, understand the differences between them, and review how to use generator functions and the <code>yield</code> statement.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-04T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python import: Advanced Techniques and Tips</title>
<link>https://realpython.com/quizzes/python-import/</link>
<guid>https://realpython.com/quizzes/python-import/</guid>
<content:encoded><![CDATA[
<div> 模块、脚本、导入、动态、运行时<br />
模块可以在脚本中被导入，并且可以在运行时动态地导入模块。通过回顾本文，可以了解如何在脚本中使用模块以及在运行时动态导入模块。总结:模块在脚本中起着重要作用，可以通过动态导入在运行时灵活地使用模块。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-import/">Python&rsquo;s <code>import</code> statement</a> and related topics.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to use modules in your scripts and import modules dynamically at runtime.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: When to Use a List Comprehension in Python</title>
<link>https://realpython.com/quizzes/list-comprehension-python/</link>
<guid>https://realpython.com/quizzes/list-comprehension-python/</guid>
<content:encoded><![CDATA[
<div> list comprehensions, loops, conditional logic, performance, Python

<br />
list comprehensions 是一种简洁的重写循环的方式，可以使代码更简洁易读。在选择使用 list comprehensions 时，需要考虑代码的清晰度和性能。可以在 comprehensions 中使用条件逻辑来筛选元素，使代码更灵活。为了解决性能问题，可以使用性能分析工具对代码进行优化。总结: list comprehensions 提供了简洁的方式重写循环，结合条件逻辑使用可以使代码更灵活，优化代码性能可以提高运行效率。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/list-comprehension-python/">List Comprehension in Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to rewrite loops as list comprehensions,
how to choose when to use list comprehensions,
how you can use conditional logic in your comprehensions,
and how to profile your code to resolve performance questions.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-01T12:00:00+00:00</pubDate>
</item>
<item>
<title>A Guide to Modern Python String Formatting Tools</title>
<link>https://realpython.com/python-formatted-output/</link>
<guid>https://realpython.com/python-formatted-output/</guid>
<content:encoded><![CDATA[
<div> f-strings, .format(), string interpolation, string formatting, Python<br />
<br />
f-strings 是 Python 中一种用于字符串插值和格式化的工具，通过在字符串前加上 f 或 F 来创建，可以直接插入变量或表达式。通过使用替换字段，可以将变量插入到原始字符串中。 .format() 方法是另一种字符串格式化工具，适用于旧版本的 Python 或传统代码。学习使用这些现代的字符串格式化工具可以帮助你更有效地处理字符串操作。 <div>
<div><p>When working with strings in Python, you may need to interpolate values into your string and format these values to create new strings dynamically. In modern Python, you have f-strings and the <code>.format()</code> method to approach the tasks of interpolating and formatting strings.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Use <strong>f-strings</strong> and the <strong><code>.format()</code></strong> method for string interpolation</li>
<li><strong>Format</strong> the interpolated values using replacement fields</li>
<li>Create <strong>custom format specifiers</strong> to format your strings</li>
</ul>
<p>To get the most out of this tutorial, you should know the basics of Python programming and the <a href="https://realpython.com/python-strings/">string</a> data type.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-formatted-output-code/">Click here to download the free sample code</a> that shows you how to use modern string formatting tools in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “A Guide to Modern Python String Formatting Tools” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-formatted-output/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="A Guide to Modern Python String Formatting Tools" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/UPDATE-A-Guide-to-the-Newer-Python-String-Format-Techniques_Watermarked-2.f985e287c6ef.jpg" style="background: #fe7e73;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-formatted-output/"><span class="my-0 h4">A Guide to Modern Python String Formatting Tools</span></a> 
      <p class="text-muted mb-0 small">You can take this quiz to test your understanding of modern tools for string formatting in Python. These tools include f-strings and the .format() method.</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-string-interpolation-and-formatting-in-python">Getting to Know String Interpolation and Formatting in Python<a class="headerlink" href="#getting-to-know-string-interpolation-and-formatting-in-python" title="Permanent link"></a></h2>
<p>Python has developed different string interpolation and formatting tools over the years. If you’re getting started with Python and looking for a quick way to format your strings, then you should use <a href="https://realpython.com/python-f-strings/">Python’s f-strings</a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about string interpolation, check out the <a href="https://realpython.com/python-string-interpolation/">String Interpolation in Python: Exploring Available Tools</a> tutorial.</p>
</div>
<p>If you need to work with older versions of Python or legacy code, then it’s a good idea to learn about the other formatting tools, such as the <code>.format()</code> method.</p>
<p>In this tutorial, you’ll learn how to format your strings using f-strings and the <code>.format()</code> method. You’ll start with f-strings to kick things off, which are quite popular in modern Python code.</p>
<h2 id="using-f-strings-for-string-interpolation">Using F-Strings for String Interpolation<a class="headerlink" href="#using-f-strings-for-string-interpolation" title="Permanent link"></a></h2>
<p>Python has a string formatting tool called <strong>f-strings</strong>, which stands for <strong>formatted string literals</strong>. F-strings are string literals that you can create by prepending an <code>f</code> or <code>F</code> to the literal. They allow you to do string interpolation and formatting by inserting variables or expressions directly into the literal.</p>
<h3 id="creating-f-string-literals">Creating F-String Literals<a class="headerlink" href="#creating-f-string-literals" title="Permanent link"></a></h3>
<p>Here you’ll take a look at how you can create an f-string by prepending the string literal with an <code>f</code> or <code>F</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="go">   👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Hello, Pythonista!"</span>
<span class="go">'Hello, Pythonista!'</span>

<span class="go">   👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">F</span><span class="s2">"Hello, Pythonista!"</span>
<span class="go">'Hello, Pythonista!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Using either <code>f</code> or <code>F</code> has the same effect. However, it’s a more common practice to use a lowercase <code>f</code> to create f-strings.</p>
<p>Just like with regular string literals, you can use single, double, or triple quotes to define an f-string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="go">    👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s1">'Single-line f-string with single quotes'</span>
<span class="go">'Single-line f-string with single quotes'</span>

<span class="go">    👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Single-line f-string with double quotes"</span>
<span class="go">'Single-line f-string with single quotes'</span>
<span class="go">     👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s1">'''Multiline triple-quoted f-string</span>
<span class="gp">... </span><span class="s1">with single quotes'''</span>
<span class="go">'Multiline triple-quoted f-string\nwith single quotes'</span>

<span class="go">     👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"""Multiline triple-quoted f-string</span>
<span class="gp">... </span><span class="s2">with double quotes"""</span>
<span class="go">'Multiline triple-quoted f-string\nwith double quotes'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Up to this point, your f-strings look pretty much the same as regular strings. However, if you create f-strings like those in the examples above, you’ll get complaints from your code <a href="https://realpython.com/python-code-quality/#linters">linter</a> if you have one.</p>
<p>The remarkable feature of f-strings is that you can embed Python <a href="https://realpython.com/python-variables/">variables</a> or <a href="https://realpython.com/python-operators-expressions/">expressions</a> directly inside them. To insert the variable or expression, you must use a <strong>replacement field</strong>, which you create using a pair of curly braces.</p>
<h3 id="interpolating-variables-into-f-strings">Interpolating Variables Into F-Strings<a class="headerlink" href="#interpolating-variables-into-f-strings" title="Permanent link"></a></h3>
<p>The variable that you insert in a replacement field is evaluated and converted to its <a href="https://realpython.com/python-repr-vs-str/">string representation</a>. The result is interpolated into the original string at the replacement field’s location:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">site</span> <span class="o">=</span> <span class="s2">"Real Python"</span>

<span class="go">                   👇</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Welcome to </span><span class="si">{</span><span class="n">site</span><span class="si">}</span><span class="s2">!"</span>
<span class="go">'Welcome to Real Python!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you’ve interpolated the <code>site</code> variable into your string. Note that Python treats anything outside the curly braces as a regular string.</p>
</div><h2><a href="https://realpython.com/python-formatted-output/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-formatted-output/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-02T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: A Guide to Modern Python String Formatting Tools</title>
<link>https://realpython.com/quizzes/python-formatted-output/</link>
<guid>https://realpython.com/quizzes/python-formatted-output/</guid>
<content:encoded><![CDATA[
<div> f-strings, .format(), string formatting, Python, quiz
<br />
Python中提供了多种字符串格式化工具，如f-strings和.format()方法。本文介绍了这些工具的用法和示例，并设计了一份关于字符串格式化的测验。通过阅读本文和完成测验，读者可以更好地理解和掌握Python中的字符串格式化技巧。同时，通过订阅Python技巧邮件，读者还可以定期收到有关Python的实用技巧和建议。总结：Python提供了丰富的字符串格式化工具，包括f-strings和.format()方法，通过阅读本文和完成测验，读者可以掌握这些工具的用法。 <div>
<p>Test your understanding of Python&rsquo;s tools for string formatting, including f-strings and the <code>.format()</code> method.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-formatted-output/">A Guide to Modern Python String Formatting Tools</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Differences Between Python's Mutable and Immutable Types</title>
<link>https://realpython.com/courses/differences-mutable-immutable-types/</link>
<guid>https://realpython.com/courses/differences-mutable-immutable-types/</guid>
<content:encoded><![CDATA[
<div> Python, mutability, immutability, data types, classes
<br />
Python中的可变性和不可变性是开发过程中必须要处理的重要特性。可变对象允许您直接在原地修改其值或数据，而不会影响对象的身份。相反，不可变对象不允许这种操作，您只能创建具有不同值的相同类型的新对象。在Python中，选择数据类型时，可变性可能会严重影响解决特定编程问题的选择。因此，您需要了解Python中可变和不可变对象的工作原理。本视频课程将帮助您了解Python中的可变性和不可变性的工作方式，探索Python中的不可变和可变内置数据类型，识别和避免一些常见的与可变性相关的陷阱，了解和控制可变性如何影响您的自定义类。
<br /><br />总结: 
Python中的可变性和不可变性是开发过程中必须要处理的重要特性。可变对象允许您直接在原地修改其值或数据，而不会影响对象的身份。相反，不可变对象不允许这种操作，您只能创建具有不同值的相同类型的新对象。在Python中，选择数据类型时，可变性可能会严重影响解决特定编程问题的选择。因此，您需要了解Python中可变和不可变对象的工作原理。 <div>
<p>As a Python developer, you&rsquo;ll have to deal with <strong>mutable</strong> and <strong>immutable</strong> objects sooner or later. Mutable objects are those that allow you to change their value or data in place without affecting the object&rsquo;s identity. In contrast, immutable objects don&rsquo;t allow this kind of operation. You&rsquo;ll just have the option of creating new objects of the same type with different values.</p>
<p>In Python, mutability is a characteristic that may profoundly influence your decision when choosing which data type to use in solving a given programming problem. Therefore, you need to know how mutable and immutable objects work in Python.</p>
<p><strong>In this video course, you&rsquo;ll:</strong></p>
<ul>
<li>Understand how <strong>mutability</strong> and <strong>immutability</strong> work under the hood in Python</li>
<li>Explore immutable and mutable <strong>built-in data types</strong> in Python</li>
<li>Identify and avoid some common <strong>mutability-related gotchas</strong></li>
<li>Understand and control how mutability affects your <strong>custom classes</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-10-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python 3.13: Cool New Features for You to Try</title>
<link>https://realpython.com/python313-new-features/</link>
<guid>https://realpython.com/python313-new-features/</guid>
<content:encoded><![CDATA[
<div> Python 3.13, 版本更新, REPL, 多行编辑, 粘贴代码, 交互式界面

<br /><br />
总结:Python 3.13发布了，提供了一些新功能和改进，包括改进交互式解释器（REPL），提供更清晰的错误消息，支持多行编辑和轻松粘贴代码。此外，还对全局解释器锁（GIL）做出了改进，使Python可以并行执行。新版本还引入了实验性的即时编译器（JIT），对静态类型系统进行了一系列小的升级。这些改进和功能将提高Python的效率和可用性。 <div>
<div><p>Python 3.13 will be published on <a href="https://peps.python.org/pep-0719/">October 1, 2024</a>. <!-- <a href="https://www.python.org/downloads/release/python-3120/">Python 3.13</a> was published on <a href="https://peps.python.org/pep-0719/">October 1, 2024</a>. --> This new version is a major step forward for the language, although several of the biggest changes are happening under the hood and won’t be immediately visible to you.</p>
<p>In a sense, Python 3.13 is laying the groundwork for some future improvements, especially to the language’s performance. As you read on, you’ll learn more about the background for this and dive into some new features that are fully available now.</p>
<p><strong>In this tutorial, you’ll learn about some of the improvements in the new version, including:</strong></p>
<ul>
<li>Improvements made to the <strong>interactive interpreter (REPL)</strong></li>
<li><strong>Clearer error messages</strong> that can help you fix common mistakes</li>
<li>Advancements done in <strong>removing the global interpreter lock (GIL)</strong> and making Python free-threaded</li>
<li>The implementation of an <strong>experimental Just-In-Time (JIT) compiler</strong></li>
<li>A host of minor upgrades to <strong>Python’s static type system</strong></li>
</ul>
<p>If you want to try any of the examples in this tutorial, then you’ll need to use Python 3.13. The tutorials <a href="https://realpython.com/installing-python/">Python 3 Installation &amp; Setup Guide</a> and <a href="https://realpython.com/python-pre-release/">How Can You Install a Pre-Release Version of Python?</a> walk you through several options for adding a new version of Python to your system.</p>
<p>In addition to learning more about the new features coming to the language, you’ll also get some <a href="#so-should-you-upgrade-to-python-313">advice</a> about what to consider before upgrading to the new version. Click the link below to download code examples demonstrating the new capabilities of Python 3.13:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python313-new-features-code/">Click here to download the free sample code</a> that shows you how to use the new features in Python 3.13.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python 3.13: Cool New Features for You to Try” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python313-new-features/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python 3.13: Cool New Features for You to Try" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-3.13-Cool-New-Features_Watermarked.ed26902959b6.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python313-new-features/"><span class="my-0 h4">Python 3.13: Cool New Features for You to Try</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the new features introduced in Python 3.13. By working through this quiz, you'll review the key updates and improvements in this version of Python.</p>
    </div>
  </div>

</div>

<h2 id="an-improved-interactive-interpreter-repl">An Improved Interactive Interpreter (REPL)<a class="headerlink" href="#an-improved-interactive-interpreter-repl" title="Permanent link"></a></h2>
<p>If you run Python without specifying any script or code, you’ll find yourself inside <a href="https://realpython.com/python-repl/">Python’s interactive interpreter</a>. This interpreter is informally called the REPL because it’s based on a read-evaluate-print loop. The REPL <strong>reads</strong> your input, <strong>evaluates</strong> it, and <strong>prints</strong> the result before <strong>looping</strong> back and doing the same thing again.</p>
<p>The Python REPL has been around for decades, and it supports an explorative workflow that makes Python a beginner-friendly language. Unfortunately, the interpreter has been missing several features you may have come to expect, including multiline editing and efficient pasting of code.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Experienced Python developers often install a third-party interactive interpreter instead of relying on the built-in REPL. You can learn more about the alternatives in these tutorials:</p>
<ul>
<li><a href="https://realpython.com/ipython-interactive-python-shell/">Unlock IPython’s Magical Toolbox for Your Coding Journey</a></li>
<li><a href="https://realpython.com/bpython-alternative-python-repl/">Discover bpython: A Python REPL With IDE-Like Features</a></li>
<li><a href="https://realpython.com/ptpython-shell/">Boost Your Coding Productivity With Ptpython</a></li>
</ul>
<p>You can also read more about alternative REPLs in the <a href="https://realpython.com/python-repl/#using-an-alternative-repl">guide to the standard REPL</a>.</p>
</div>
<p>Begin by starting the REPL. You can do this by typing <code>python</code> in your <a href="https://realpython.com/terminal-commands/">terminal</a>. Depending on your setup, you may have to write <code>py</code>, <code>python3</code>, or even <code>python3.13</code> instead. One way to recognize that you’re using the new interpreter shipping with Python 3.13 is that the prompt consisting of three chevrons (<code>&gt;&gt;&gt;</code>) is subtly colored:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/colored_repl.93b1d9952ebb.png" target="_blank"><img alt="The new REPL in Python 3.13 shows a colored prompt" class="img-fluid mx-auto d-block " height="797" src="https://files.realpython.com/media/colored_repl.93b1d9952ebb.png" width="1972" /></a></figure>

<p>One improvement is that you can now use REPL-specific commands without calling them with parentheses as if they are Python functions. Here are some of the commands and keyboard shortcuts you can use:</p>
<ul>
<li><strong><code>exit</code></strong> or <strong><code>quit</code></strong>: Exit the interpreter</li>
<li><strong><code>clear</code></strong>: Clear the screen</li>
<li><strong><code>help</code></strong> or <span class="keys"><kbd class="key-f1">F1</kbd></span>: Access the help system</li>
<li><span class="keys"><kbd class="key-f2">F2</kbd></span>: Open the history browser</li>
<li><span class="keys"><kbd class="key-f3">F3</kbd></span>: Enter paste mode</li>
</ul>
<p>You can learn more about these options in <a href="https://realpython.com/python313-repl/">Python 3.13 Preview: A Modern REPL</a>.</p>
<p>Recalling code you’ve written earlier has been cumbersome in the REPL before Python 3.13, especially if you’re working with a block of code spanning several lines. Traditionally, you’ve had to bring back each line one by one by repeatedly pressing <span class="keys"><kbd class="key-arrow-up">Up</kbd></span>. Now in 3.13, you can bring back the whole block of code with a single <span class="keys"><kbd class="key-arrow-up">Up</kbd></span> keystroke.</p>
<p>To try this for yourself, enter the following code in your REPL:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span>
<span class="gp">... </span>    <span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span><span class="o">**</span><span class="mi">3</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
<span class="gp">... </span><span class="p">]</span>
<span class="go">[0, 8, 64, 216, 512]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You’re creating a somewhat complex <a href="https://realpython.com/list-comprehension-python/">list comprehension</a> that calculates an offset cube of a range of numbers, but only if the numbers are odd. The important part is that for readability, you split the list comprehension over several lines. Now try hitting that <span class="keys"><kbd class="key-arrow-up">Up</kbd></span> key! The interpreter recalls all four lines at once, and you can continue to use your arrow keys to move around inside of the expression.</p>
<p>You can make changes to your code and run it again. To execute the updated code, you need to move your cursor to the end of the last line in the code block. If you press <span class="keys"><kbd class="key-enter">Enter</kbd></span> inside the expression, you’ll create a new empty line instead:</p>
<figure>
  <div class="embed-responsive embed-responsive-16by9 rounded mb-3 ">
    
  </div>

</figure>

<p>The ability to recall and edit multiline statements is a huge time-saver and will make you more efficient when working with the REPL.</p>
<p>Another convenience coming in Python 3.13 is proper support for pasting code. In Python 3.12 and earlier, you’d need to make sure that your code doesn’t contain any blank lines before you could copy and paste it. In the new version, pasted code is treated as a unit and executes just as it would inside a script.</p>
</div><h2><a href="https://realpython.com/python313-new-features/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python313-new-features/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Syntactic Sugar: Why Python Is Sweet and Pythonic</title>
<link>https://realpython.com/quizzes/syntactic-sugar-python/</link>
<guid>https://realpython.com/quizzes/syntactic-sugar-python/</guid>
<content:encoded><![CDATA[
<div> 关键词提取：Pythonic, syntactic sugar, readability, quiz, tutorial
总结：<br /><br />本教程介绍了Python中常见的语法糖，以及它们如何使代码更Pythonic和易读。语法糖是一种简洁的语法形式，可以让代码更具可读性，这篇文章还提供了一个测试来检验读者对于Python语法糖的理解程度。读者还可以通过阅读本教程进一步了解如何通过一些小技巧提高自己的Python编程水平。<br />总结: <div>
<p>Test your understanding of Python&rsquo;s most common pieces of syntactic sugar and how they make your code more Pythonic and readable.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/syntactic-sugar-python/">Syntactic Sugar: Why Python is Sweet and Pythonic</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-28T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python 3.13: Cool New Features for You to Try</title>
<link>https://realpython.com/quizzes/python313-new-features/</link>
<guid>https://realpython.com/quizzes/python313-new-features/</guid>
<content:encoded><![CDATA[
<div> Python 3.10, updates, improvements, key, review

Python 3.10版本带来了许多更新和改进，通过这篇文章可以测试你对这个版本的理解。在这个版本中，有一些关键的更新和改进，包括新的语法和功能。例如，添加了新的字符串方法和通用匹配模式。此外，还改进了类型提示和错误消息。Python 3.10还引入了一些新的库和模块，增强了语言的功能性。总体而言，Python 3.10为开发人员提供了更强大和易用的工具，帮助他们更高效地编写代码。总结: Python 3.10带来了许多关键的更新和改进，包括新的语法和功能，改进了类型提示和错误消息，并引入了新的库和模块，为开发人员提供了更强大和易用的工具。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python313-new-features/">Python 3.13: Cool New Features for You to Try</a>. By working through this quiz, you&rsquo;ll review the key updates and improvements in this version of Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-28T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #222: Using Virtual Environments in Docker &amp; Comparing Python Dev Tools</title>
<link>https://realpython.com/podcasts/rpp/222/</link>
<guid>https://realpython.com/podcasts/rpp/222/</guid>
<content:encoded><![CDATA[
<div> Python, virtual environment, Docker container, development practices, advantages

虚拟环境是Python开发中常用的工具，能够帮助隔离项目所需的依赖包，避免版本冲突问题。在Docker容器中使用虚拟环境可以更好地管理项目的依赖和运行环境，确保项目的可移植性和一致性。同时，保持本地开发和容器内开发一致的开发实践能够简化部署流程，减少潜在的问题并提高开发效率。总结: 使用Python虚拟环境在Docker容器中能够更好地管理项目依赖和环境，保持一致的开发实践有助于简化部署流程和提高开发效率。 <div>
<p>Should you use a Python virtual environment in a Docker container? What are the advantages of using the same development practices locally and inside a container? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-27T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python 3.13 Preview: A Modern REPL</title>
<link>https://realpython.com/python313-repl/</link>
<guid>https://realpython.com/python313-repl/</guid>
<content:encoded><![CDATA[
<div> REPL, Python 3.13, interactive interpreter, improvements, alternative interpreters

<br /><br />总结:
Python 3.13带来了新的交互式解释器（REPL），加入了许多重要的改进，包括支持颜色、更方便的特殊命令（如exit或quit）、终止会话等。这个新的REPL是Python的一个重要特点，安装的时候会自动带上，方便开发者在交互式环境中快速进行计算和实验。虽然新的REPL不如一些第三方替代品功能强大，但是因为它与Python一起安装，所以始终可以使用。这对于在某些情况下无法或不想安装第三方库的开发者来说是一大优点。 <div>
<div><p>One of Python’s strong points is its interactive capabilities. By running <code>python</code> you start the interactive interpreter, or REPL, which allows you to perform quick calculations or explore and experiment with your code. In Python 3.13, the interactive interpreter has been completely redesigned with new modern features.</p>
<p>Python’s REPL has remained largely unchanged for decades. Instead, alternative interpreters like <a href="https://realpython.com/ipython-interactive-python-shell/">IPython</a>, <a href="https://realpython.com/bpython-alternative-python-repl/">bpython</a>, and <a href="https://realpython.com/ptpython-shell/">ptpython</a> have addressed some of the built-in REPL’s shortcomings, providing more convenient interactive workflows for developers. As you’re about to learn, Python 3.13 brings many significant improvements to the interactive interpreter.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Run Python 3.13 and explore the <strong>new REPL</strong></li>
<li>Browse through the <strong>help system</strong></li>
<li>Work with <strong>multiline statements</strong></li>
<li><strong>Paste code</strong> into your REPL session</li>
<li>Navigate through your <strong>interpreter history</strong></li>
</ul>
<p>The upgraded REPL is just one of the new features coming in Python 3.13. You can read about all the changes in the <a href="https://docs.python.org/3.13/whatsnew/3.13.html">what’s new</a> section of Python’s changelog. Additionally, you can dig deeper into the work done on <a href="https://realpython.com/python313-free-threading-jit/">free threading and a Just-In-Time compiler</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python313-repl-code/">Click here to download the free sample code</a> that shows you how to use some of the new features in Python 3.13.</p>
</div>
<h2 id="a-new-interactive-interpreter-repl-in-python-313">A New Interactive Interpreter (REPL) in Python 3.13<a class="headerlink" href="#a-new-interactive-interpreter-repl-in-python-313" title="Permanent link"></a></h2>
<p>To try out the new REPL for yourself, you need to get your hands on a version of Python 3.13. Before the official release in October 2024, you can <a href="https://realpython.com/python-pre-release/">install a pre-release version</a>. After October 2024, you should be able to install Python 3.13 through any of the <a href="https://realpython.com/installing-python/">regular channels</a>.</p>
<p>A REPL, or a <strong>Read-Eval-Print Loop</strong>, is a program that allows you to work with code interactively. The REPL <strong>reads</strong> your input, <strong>evaluates</strong> it, and <strong>prints</strong> the result before <strong>looping</strong> back and doing the same thing again.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn about the built-in REPL in Python and how it works in general, check out <a href="https://realpython.com/python-repl/">The Python Standard REPL: Try Out Code and Ideas Quickly</a>.</p>
</div>
<p>In any version of Python, you can start this interactive shell by typing the name of your Python executable in your terminal. Typically, this will be <code>python</code>, but depending on your operating system and your setup, you may have to use something like <code>py</code> or <code>python3</code> instead.</p>
<p>Once you start the REPL in Python 3.13, you’ll see a small but noticeable difference. The familiar Python interactive shell prompt, consisting of three right angle brackets (<code>&gt;&gt;&gt;</code>), is now colored differently from the rest of the text:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/colored_repl.93b1d9952ebb.png" target="_blank"><img alt="The new REPL in Python 3.13 shows a colored prompt" class="img-fluid mx-auto d-block " height="797" src="https://files.realpython.com/media/colored_repl.93b1d9952ebb.png" width="1972" /></a></figure>

<p>The color difference indicates that the shell now supports color. In the new shell, color is mainly used to highlight output in tracebacks. If your terminal doesn’t display color, then the new REPL will automatically detect this and fall back to its plain, colorless display.</p>
<p>If you prefer to keep your interpreter free of color even when it’s supported, you can <a href="https://docs.python.org/3.13/using/cmdline.html#controlling-color">disable this new feature</a>. One option is to set the new environment variable <a href="https://docs.python.org/3.13/using/cmdline.html#envvar-PYTHON_COLORS"><code>PYTHON_COLORS</code></a> to <code>0</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="hll"><span class="gp">$ </span><span class="nv">PYTHON_COLORS</span><span class="o">=</span><span class="m">0</span><span class="w"> </span>python
</span><span class="go">Python 3.13.0rc2 (main, Sep 13 2024, 17:09:27) [GCC 9.4.0] on linux</span>
<span class="go">Type "help", "copyright", "credits" or "license" for more information.</span>
<span class="go">&gt;&gt;&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Setting <code>PYTHON_COLORS=0</code> disables color in the REPL. If you set the environment variable to <code>1</code>, you’ll get the colored prompt and output. However, since it’s the default, this is rarely necessary.</p>
<p>Before going any further, you’ll exit the REPL. As you may know, the old REPL, that you’ve used on Python 3.12 and earlier, has been widely commented on for the following idiosyncrasy:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">exit</span>
<span class="go">Use exit() or Ctrl-D (i.e. EOF) to exit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The shell clearly understands your intention to end the session. Still, it makes you jump through hoops and add parentheses to your command. In Python 3.13, the REPL now understands special commands that you can write without any parentheses:</p>
<ul>
<li><strong><code>exit</code></strong> or <strong><code>quit</code></strong>: Exit the interpreter</li>
<li><strong><code>help</code></strong> or <span class="keys"><kbd class="key-f1">F1</kbd></span>: Access the help system</li>
<li><strong><code>clear</code></strong>: Clear the screen</li>
</ul>
<p>Having these commands more easily available is a small thing, but it removes some friction when using the interactive interpreter. You can still use parentheses and type something like <code>exit()</code> if you prefer. These commands are not reserved though. That means that you could shadow them with variable assignments:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">exit</span> <span class="o">=</span> <span class="kc">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">exit</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">exit</span><span class="p">()</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">'bool' object is not callable</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">del</span> <span class="n">exit</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">exit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here you create a variable named <code>exit</code>, effectively disabling the <code>exit</code> command. To end your REPL session, you can either delete the <code>exit</code> variable or use one of the alternative ways to exit the interpreter.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Even with the new improvements, the built-in REPL is not as powerful as some of the third-party alternatives. If you’re already using any of these, there’s no immediate reason to revert back to the standard interactive interpreter.</p>
<p>The main advantage of the new REPL is that it’s installed together with Python. In other words, it’ll always be available for you. This is great if you find yourself in a situation where you can’t or don’t want to install a third-party library.</p>
<p>You can learn more about the alternative interactive interpreters in the following tutorials:</p>
<ul>
<li><a href="https://realpython.com/ipython-interactive-python-shell/">Unlock IPython’s Magical Toolbox for Your Coding Journey</a></li>
<li><a href="https://realpython.com/bpython-alternative-python-repl/">Discover bpython: A Python REPL With IDE-Like Features</a></li>
<li><a href="https://realpython.com/ptpython-shell/">Boost Your Coding Productivity With Ptpython</a></li>
</ul>
<p>You can also read more about alternative REPLs in the <a href="https://realpython.com/python-repl/#using-an-alternative-repl">guide to the standard REPL</a>.</p>
</div>
</div><h2><a href="https://realpython.com/python313-repl/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python313-repl/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-25T14:00:00+00:00</pubDate>
</item>
<item>
<title>Advanced Python import Techniques</title>
<link>https://realpython.com/courses/advanced-import-techniques/</link>
<guid>https://realpython.com/courses/advanced-import-techniques/</guid>
<content:encoded><![CDATA[
<div> import, modules, packages, namespace, dynamic <br />
总结:<br />
Python中使用import关键字将一个模块中的代码引入到另一个模块中，对于代码结构的有效组织和提高生产力非常重要。这个视频课程详细介绍了Python的import语句及其工作原理，教会如何利用import系统的强大功能。课程涵盖了模块、包、命名空间包的使用，管理命名空间、避免阴影效应、避免循环引用，以及在运行时动态导入模块等内容。通过大量的代码示例，教授如何定制Python的import系统，让项目更易维护且代码可以重复利用。 <div>
<p>In Python, you use the <strong><code>import</code></strong> keyword to make code in one <strong>module</strong> available in another. Imports in Python are important for <strong>structuring your code</strong> effectively. Using imports properly will make you more productive, allowing you to reuse code while keeping your projects maintainable.</p>
<p>This video course provides a comprehensive overview of Python&rsquo;s <code>import</code> statement and how it works. The import system is powerful, and this course will teach you how to harness this power. While you&rsquo;ll cover many of the concepts behind Python&rsquo;s import system, this video course is mostly example driven, so you&rsquo;ll learn from the numerous code examples shared throughout.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Use <strong>modules</strong>, <strong>packages</strong>, and <strong>namespace packages</strong></li>
<li>Manage namespaces and avoid <strong>shadowing</strong></li>
<li>Avoid <strong>circular imports</strong></li>
<li>Import modules <strong>dynamically</strong> at runtime</li>
<li><strong>Customize</strong> Python&rsquo;s import system</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Virtual Environments: A Primer</title>
<link>https://realpython.com/python-virtual-environments-a-primer/</link>
<guid>https://realpython.com/python-virtual-environments-a-primer/</guid>
<content:encoded><![CDATA[
<div> Python, virtual environment, venv, create, activate

创建和管理Python项目的虚拟环境是很重要的。使用venv模块可以在项目中使用不同版本的包依赖和Python版本。通过本教程，你将学会如何创建和激活虚拟环境，为什么需要隔离外部依赖，以及如何自定义虚拟环境。最后，你将了解如何停用和删除虚拟环境，以及选择额外工具来管理Python版本和虚拟环境。学习虚拟环境的工作原理和重要性，可以帮助你掌握Python编程工作流程。总之，创建虚拟环境并激活它是创建Python项目的关键步骤，可以避免依赖冲突，并帮助其他开发者复制你的开发环境。 <br /><br />总结: <div>
<div><p>In this tutorial, you’ll learn how to work with <a href="https://docs.python.org/3/library/venv.html">Python’s <code>venv</code> module</a> to create and manage separate <a href="https://docs.python.org/3/library/venv.html#venv-def">virtual environments</a> for your Python projects. Each environment can use different versions of package dependencies and different versions of Python.</p>
<p>Once you’ve learned to work with virtual environments, you’ll be able to help other programmers reproduce your development setup and make sure that your projects never create dependency conflicts.</p>
<p><strong>By the end of this tutorial, you’ll know how to:</strong></p>
<ul>
<li><strong>Create</strong> and <strong>activate</strong> a <strong>Python virtual environment</strong></li>
<li>Explain <strong>why</strong> you want to <strong>isolate external dependencies</strong></li>
<li><strong>Visualize what Python does</strong> when you create a virtual environment</li>
<li><strong>Customize</strong> your virtual environments using <strong>optional arguments</strong> to <code>venv</code></li>
<li><strong>Deactivate</strong> and <strong>remove</strong> virtual environments</li>
<li>Choose <strong>additional tools for managing</strong> your Python versions and virtual environments</li>
</ul>
<p>Working with virtual environments is a common and effective technique used in Python development. Gaining a better understanding of how they work, why you need them, and what you can do with them will help you master your Python programming workflow.</p>
<p>Throughout the tutorial, you can select code examples for either Windows, Ubuntu Linux, or macOS. Pick your platform at the top right of the relevant code blocks to get the commands that you need, and feel free to switch between them if you want to learn how to work with virtual environments on other operating systems.</p>
<div class="alert alert-warning">
<p><strong>Free Bonus:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-virtual-environments-a-primer-pdf/">Click here to download a free cheat sheet</a> that summarizes the main venv commands you’ll learn about in this tutorial.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Virtual Environments: A Primer” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-virtual-environments-a-primer/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Virtual Environments (venv)" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-Virtual-Environments_Watermarked.4c787192d42f.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-virtual-environments-a-primer/"><span class="my-0 h4">Python Virtual Environments: A Primer</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python virtual environments. With this knowledge, you'll be able to avoid dependency conflicts and help other developers reproduce your development environment.</p>
    </div>
  </div>

</div>

<h2 id="how-can-you-work-with-a-python-virtual-environment">How Can You Work With a Python Virtual Environment?<a class="headerlink" href="#how-can-you-work-with-a-python-virtual-environment" title="Permanent link"></a></h2>
<p>If you just need to get a virtual environment up and running to continue working on your favorite project, then this section is for you.</p>
<p>This tutorial uses <a href="https://docs.python.org/3/library/venv.html">Python’s <code>venv</code> module</a> to create virtual environments. This module is part of Python’s standard library, and it’s been the <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments">officially recommended</a> way to create virtual environments since Python 3.5.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> There are other great third-party tools for creating virtual environments,
such as <a href="#the-conda-package-and-environment-manager">conda</a> and <a href="#the-virtualenv-project">virtualenv</a>,
that you’ll learn more about later in this tutorial.
Either of these tools can help you set up a virtual environment and also go beyond just that.</p>
</div>
<p>For basic usage, <code>venv</code> is an excellent choice because it already comes packaged with your Python installation. With that in mind, you’re ready to create your first virtual environment.</p>
<h3 id="create-it">Create It<a class="headerlink" href="#create-it" title="Permanent link"></a></h3>
<p>Any time you’re working on a Python project that uses external dependencies you’re <a href="https://realpython.com/what-is-pip/">installing with <code>pip</code></a>,
it’s best to first create a virtual environment:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>


  <li class="nav-item mb-0 js-platform-widget-tab-linux">
    <a class="nav-link link-unstyled text-body small " href="#linux-1" id="linux-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux</a>
  </li>


  <li class="nav-item mb-0 js-platform-widget-tab-macos">
    <a class="nav-link link-unstyled text-body small" href="#macos-1" id="macos-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>macOS</a>
  </li>


</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">py</span> <span class="n">-m</span> <span class="n">venv</span> <span class="n">venv</span><span class="p">\</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This command allows the <a href="https://docs.python.org/3/using/windows.html#launcher">Python launcher for Windows</a> to select an appropriate version of Python to execute. It comes bundled with the official installation and is the most convenient way to execute <a href="https://realpython.com/python-coding-setup-windows/">Python on Windows</a>.</p>
<p>You can bypass the launcher and run the Python executable directly using the <code>python</code> command, but if you haven’t configured the <code>PATH</code> and <code>PATHEXT</code> variables,
then you might need to provide the full path:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">C</span><span class="p">:\</span><span class="n">Users</span><span class="p">\</span><span class="n">Name</span><span class="p">\</span><span class="n">AppData</span><span class="p">\</span><span class="n">Local</span><span class="p">\</span><span class="n">Programs</span><span class="p">\</span><span class="n">Python</span><span class="p">\</span><span class="n">Python312</span><span class="p">\</span><span class="n">python</span> <span class="n">-m</span> <span class="n">venv</span> <span class="n">venv</span><span class="p">\</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The system path shown above assumes that you installed Python 3.12 using the Windows installer provided by the <a href="https://www.python.org/downloads/">Python downloads page</a>. The path to the Python executable on your system might be different. Working with PowerShell, you can find the path using the <code>where.exe python</code> command.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You don’t need to include the backslash (<code>\</code>) at the end of the name of your virtual environment, but it’s a helpful reminder that you’re creating a folder.</p>
</div>
</div>
<div class="tab-pane fade " id="linux-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python3<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv/
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Many Linux operating systems ship with a version of Python 3.
If <code>python3</code> doesn’t work, then you’ll have to first <a href="https://realpython.com/installing-python/">install Python</a> and you may need to use the specific name of the executable version that you installed, for example, <code>python3.12</code> for Python 3.12.x. If that’s the case for you, remember to replace mentions of <code>python3</code> in the code blocks with your specific version number.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You don’t need to include the slash (<code>/</code>) at the end of the name of your virtual environment, but it’s a helpful reminder that you’re creating a folder.</p>
</div>
</div>
<div class="tab-pane fade " id="macos-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python3<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv/
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Older versions of macOS come with a system installation of Python 2.7.x that you should <em>never</em> use to run your scripts. If you’re working on macOS &lt; 12.3 and invoke the Python interpreter with <code>python</code> instead of <code>python3</code>, then
you might accidentally start up the outdated system Python interpreter.</p>
<p>If running <code>python3</code> doesn’t work, then you’ll have to first <a href="https://realpython.com/installing-python/">install a modern version of Python</a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You don’t need to include the slash (<code>/</code>) at the end of the name of your virtual environment, but it’s a helpful reminder that you’re creating a folder.</p>
</div>
</div>
</div>
<p>This command creates a new virtual environment named <em>venv</em> using Python’s built-in <code>venv</code> module. The first <code>venv</code> that you use in the command specifies the module, and the second <code>venv/</code> sets the name for your virtual environment. You could name it differently, but calling it <em>venv</em> is a good practice for consistency.</p>
<h3 id="activate-it">Activate It<a class="headerlink" href="#activate-it" title="Permanent link"></a></h3>
<p>Great! Your project now has its own virtual environment. Generally, before you start to use it, you’ll <strong>activate</strong> the environment by executing a script that comes with the installation:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-2" id="windows-tab-2"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-2" id="macos-tab-2"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-2">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">venv</span><span class="p">\</span><span class="n">Scripts</span><span class="p">\</span><span class="n">activate</span>
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>If your attempt to run this command produces an error, then you’ll first have to <a href="https://realpython.com/python-coding-setup-windows/#loosening-your-execution-policy">loosen the execution policy</a>.</p>
</div>
<div class="tab-pane fade " id="linux-macos-2">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span><span class="nb">source</span><span class="w"> </span>venv/bin/activate
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
</div>
<p>Before you run this command, make sure that you’re in the folder containing the virtual environment you just created. If you’ve named your virtual environment something other than <em>venv</em>, then you’ll have to use that name in the path instead of <em>venv</em> when you source the activation script.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You can also work with your virtual environment without activating it. To do this, you <a href="#it-runs-from-anywhere-with-absolute-paths">provide the full path</a> to its Python interpreter when executing a command. However, you’ll likely want to activate the virtual environment after you create it to save yourself the effort of having to repeatedly type long pathnames.</p>
</div>
<p>Once you can see the name of your virtual environment in your command prompt—in this case <code>(venv)</code>—then you’ll know that your virtual environment is active. Now you’re all set and ready to install your external packages!</p>
</div><h2><a href="https://realpython.com/python-virtual-environments-a-primer/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-virtual-environments-a-primer/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #221: Thriving as a Developer With ADHD</title>
<link>https://realpython.com/podcasts/rpp/221/</link>
<guid>https://realpython.com/podcasts/rpp/221/</guid>
<content:encoded><![CDATA[
<div> ADHD, developer, strategies, team members, projects
<br />
ADHD对开发者的影响及如何提高生产力。提供帮助团队成员成功完成项目的策略。本周节目与Chris Ferdinandi讨论他的网站和播客“ADHD For the Win!”。总结: ADHD会影响开发者的工作效率，通过特定策略可以帮助提高生产力。团队成员如有ADHD，需提供支持以确保项目完成。Chris Ferdinandi的网站和播客提供相关资源和信息。 <div>
<p>What are strategies for being a productive developer with ADHD? How can you help your team members with ADHD to succeed and complete projects? This week on the show, we speak with Chris Ferdinandi about his website and podcast "ADHD For the Win!"</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-20T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python 3.13 Preview: Free Threading and a JIT Compiler</title>
<link>https://realpython.com/python313-free-threading-jit/</link>
<guid>https://realpython.com/python313-free-threading-jit/</guid>
<content:encoded><![CDATA[
<div> Docker Python 编译 JIT compiler GIL <br />
Python 3.13 带来了自由线程和 JIT 编译器等新功能，这些功能旨在提升代码性能。自由线程试图移除 GIL，使得并行处理任务不再受限于单一线程。JIT 编译器则将 Python 代码编译成机器码，提升执行速度。这些功能目前还处于实验阶段，需要用户在构建 Python 时额外设置。Python 3.13 中的这些功能可能会对现有代码造成不兼容性，因此官方并未将其默认启用。总体而言，这些新功能为 Python 的性能和并行处理能力带来了重大改善，但在生产环境中使用时需要谨慎。Python 发展团队还在评估这些功能的稳定性和实用性，未来可能会有进一步调整。<br /><br />总结: Python 3.13 引入了自由线程和 JIT 编译器功能，旨在提升并行性能和执行速度。这些功能仍处于实验阶段，需要用户额外配置以启用。虽然有潜在优势，但在生产环境中需要谨慎使用并等待进一步稳定性验证。 <div>
<div><p>Although the final release of Python 3.13 is <a href="https://peps.python.org/pep-0719/">scheduled for October 2024</a>, you can download and install a preview version today to explore the new features. Notably, the introduction of <strong>free threading</strong> and a <strong>just-in-time (JIT)</strong> compiler are among the most exciting enhancements, both designed to give your code a significant performance boost.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Compile a <strong>custom Python build</strong> from source using Docker</li>
<li>Disable the <strong>Global Interpreter Lock (GIL)</strong> in Python</li>
<li>Enable the <strong>Just-In-Time (JIT)</strong> compiler for Python code</li>
<li>Determine the <strong>availability of new features</strong> at runtime</li>
<li>Assess the <strong>performance improvements</strong> in Python 3.13</li>
<li>Make a <strong>C extension module</strong> targeting Python’s new ABI</li>
</ul>
<p>Check out <a href="https://docs.python.org/3.13/whatsnew/3.13.html">what’s new</a> in the Python changelog for a complete list of the upcoming features and improvements. This document contains a quick summary of the release highlights as well as a detailed breakdown of the planned changes.</p>
<p>To download the sample code and other resources accompanying this tutorial, click the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python313-free-threading-jit-code/">Click here to download the free sample code</a> that shows you how to work with the experimental free threading and JIT compiler in Python 3.13.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python 3.13: Free-Threading and a JIT Compiler” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python313-free-threading-jit/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python 3.13 Preview: Free Threading and a JIT Compiler" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-3.13-Preview-1-Free-threading-and-JIT_Watermarked.a5ebf956c5ba.jpg" style="background: #aae4b1;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python313-free-threading-jit/"><span class="my-0 h4">Python 3.13: Free-Threading and a JIT Compiler</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the new features in Python 3.13. You'll revisit how to compile a custom Python build, disable the Global Interpreter Lock (GIL), enable the Just-In-Time (JIT) compiler, and more.</p>
    </div>
  </div>

</div>

<h2 id="free-threading-and-jit-in-python-313-whats-the-fuss">Free Threading and JIT in Python 3.13: What’s the Fuss?<a class="headerlink" href="#free-threading-and-jit-in-python-313-whats-the-fuss" title="Permanent link"></a></h2>
<p>Before going any further, it’s important to note that the majority of improvements in Python 3.13 will remain invisible to the average Joe. This includes free threading (<a href="https://peps.python.org/pep-0703/">PEP 703</a>) and the JIT compiler (<a href="https://peps.python.org/pep-0744/">PEP 744</a>), which have already sparked a lot of excitement in the Python community.</p>
<p>Keep in mind that they’re both <strong>experimental features</strong> aimed at power users, who must take extra steps to enable them at Python’s build time. None of the official channels will distribute Python 3.13 with these additional features enabled by default. This is to maintain backward compatibility and to prevent potential glitches, which should be expected.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Don’t try to use Python 3.13 with the experimental features in a production environment! It may cause unexpected problems, and the <a href="https://realpython.com/python38-new-features/#the-python-steering-council">Python Steering Council</a> reserves the right to remove these features entirely from future Python releases if they prove to be unstable. Treat them as an experiment to gather real-world data.</p>
</div>
<p>In this section, you’ll get a birds-eye view of these experimental features so you can set the right expectations. You’ll find detailed explanations on how to enable them and evaluate their impact on Python’s performance in the remainder of this tutorial.</p>
<h3 id="free-threading-makes-the-gil-optional">Free Threading Makes the GIL Optional<a class="headerlink" href="#free-threading-makes-the-gil-optional" title="Permanent link"></a></h3>
<p>Free threading is an attempt to remove the <a href="https://realpython.com/python-gil/">Global Interpreter Lock (GIL)</a> from <a href="https://realpython.com/cpython-source-code-guide/">CPython</a>, which has traditionally been the biggest obstacle to achieving <a href="https://realpython.com/intro-to-python-threading/">thread-based</a> parallelism when performing <a href="https://en.wikipedia.org/wiki/CPU-bound">CPU-bound</a> tasks. In short, the GIL allows only one thread of execution to run at any given time, regardless of how many cores your CPU is equipped with. This prevents Python from leveraging the available computing power effectively.</p>
<p>There have been many attempts in the past to bypass the GIL in Python, each with varying levels of success. You can read about these attempts in the tutorial on <a href="https://realpython.com/python-parallel-processing/">bypassing the GIL</a>. While previous attempts were made by third parties, this is the first time that the core Python development team has taken similar steps with the permission of the steering council, even if some reservations remain.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> <a href="https://realpython.com/python312-new-features/">Python 3.12</a> approached the GIL obstacle from a different angle by allowing the individual <a href="https://realpython.com/python312-subinterpreters/">subinterpreters</a> to have their independent GILs. This can improve <a href="https://realpython.com/python-concurrency/">Python’s concurrency</a> by letting you run different tasks in parallel, but without the ability to share data cheaply between them due to isolated memory spaces. In Python 3.13, you’ll be able to combine <a href="https://www.youtube.com/watch?v=lCjsy7tb420">subinterpreters with free threading</a>.</p>
</div>
<p>The removal of the GIL would have significant implications for the Python interpreter itself and especially for the large body of third-party code that relies on it. Because free threading essentially breaks backward compatibility, the long-term plan for its implementation is as follows:</p>
<ol>
<li><strong>Experimental:</strong> Free threading is introduced as an experimental feature and isn’t a part of the official Python distribution. You must make a custom Python build to disable the GIL.</li>
<li><strong>Enabled:</strong> The GIL becomes optional in the official Python distribution but remains enabled by default to allow for a transition period.</li>
<li><strong>Disabled:</strong> The GIL is disabled by default, but you can still enable it if needed for compatibility reasons.</li>
</ol>
<p>There are no plans to completely remove the GIL from the official Python distribution at the moment, as that would cause significant disruption to legacy codebases and libraries. Note that the steps outlined above are just a proposal subject to change. Also, free threading may not pan out at all if it makes single-threaded Python run slower than without it.</p>
<p>Until the GIL becomes optional in the official Python distribution, which may take a few more years, the Python development team will maintain two incompatible interpreter versions. The vanilla Python build won’t support free threading, while the special free-threaded flavor will have a slightly different <a href="https://en.wikipedia.org/wiki/Application_binary_interface">Application Binary Interface (ABI)</a> tagged with the letter “t” for threading.</p>
<p>This means that <a href="https://realpython.com/build-python-c-extension-module/">C extension modules</a> built for stock Python won’t be compatible with the free-threaded version and the other way around. Maintainers of those external modules will be expected to distribute two packages with each release. If you’re one of them, and you use the <a href="https://docs.python.org/3/c-api/index.html">Python/C API</a>, then you’ll learn how to target CPython’s new ABI in the final section of this tutorial.</p>
<h3 id="jit-compiles-python-to-machine-code">JIT Compiles Python to Machine Code<a class="headerlink" href="#jit-compiles-python-to-machine-code" title="Permanent link"></a></h3>
<p>As an <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreted language</a>, Python takes your high-level code and executes it on the fly without the need for prior compilation. This has both pros and cons. Some of the biggest advantages of interpreted languages include better portability across different hardware architectures and a quick development time due to the lack of a compilation step. At the same time, interpretation is much slower than directly executing code native to your machine.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To be more precise, Python interprets <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode instructions</a>, an intermediate binary representation between pure Python and <a href="https://en.wikipedia.org/wiki/Machine_code">machine code</a>. The Python interpreter compiles your code to bytecode when you import a module and stores the resulting bytecode in the <a href="https://realpython.com/python-pycache/"><code>__pycache__</code></a> folder. This doesn’t inherently make your Python scripts run faster, but loading a pre-processed bytecode can indeed speed up their startup time.</p>
</div>
<p>Languages like <a href="https://realpython.com/c-for-python-programmers/">C</a> and <a href="https://realpython.com/python-vs-cpp/">C++</a> leverage <a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">Ahead-of-Time (AOT)</a> compilation to translate your high-level code into machine code before you ship your software. The benefit of this is faster execution since the code is already in the computer’s mother tongue. While you no longer need a separate program to interpret the code, you must compile it separately for <em>all</em> target platforms that you want supported. You should also handle platform-specific differences yourself.</p>
</div><h2><a href="https://realpython.com/python313-free-threading-jit/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python313-free-threading-jit/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-18T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Using Python's pip to Manage Your Projects' Dependencies</title>
<link>https://realpython.com/quizzes/what-is-pip/</link>
<guid>https://realpython.com/quizzes/what-is-pip/</guid>
<content:encoded><![CDATA[
<div> pip, Python, package manager, commands, install

总结:<br /><br />本文介绍了Python的标准包管理器pip，包括pip的概念、重要命令以及如何安装包。通过本篇文章你可以测试自己对pip的理解，回顾pip背后的概念、重要命令和如何安装包。阅读本文可以帮助你更好地了解和使用Python的标准包管理器pip。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of Python&rsquo;s standard package manager, <code>pip</code>. You&rsquo;ll revisit the concepts behind <code>pip</code>, important commands, and how to install packages.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>Customizing VS Code Through Color Themes</title>
<link>https://realpython.com/courses/custom-vs-code-color-themes/</link>
<guid>https://realpython.com/courses/custom-vs-code-color-themes/</guid>
<content:encoded><![CDATA[
<div> Themes, VS Code, Color Theme, Install, Adjustments

总结:<br /><br />在这个Code Conversation中，Philipp Ascany会逐步指导您如何在VS Code中找到、安装和调整颜色主题。你将探索VS Code中的各种选项，并学习如何进行微调，创造出适合个人喜好的设置。通过本视频课程，您将学习关于VS Code中主题的知识，找到适合自己的颜色主题，安装并进行额外调整。最终，您将拥有一个不仅外观优美，而且能提升编码体验的编程环境。 <div>
<p>A well-designed coding environment not only enhances your focus and productivity but also makes coding sessions more enjoyable. In this <strong>Code Conversation</strong>, your instructor Philipp Ascany will guide you step-by-step through the process of finding, installing, and adjusting color themes in VS Code. You&rsquo;ll explore the various options available in VS Code and learn how to make fine adjustments to create a setup that suits your personal preferences.</p>
<p><strong>In this video course, you&rsquo;ll</strong>:</p>
<ul>
<li>Learn about Themes in VS Code</li>
<li>Find a VS Code Color Theme</li>
<li>Select a Theme</li>
<li>Install Your Theme</li>
<li>Make Additional Adjustments</li>
</ul>
<p>By the end of the course, you&rsquo;ll have a coding environment that not only looks great but also enhances your overall coding experience.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using Python's pip to Manage Your Projects' Dependencies</title>
<link>https://realpython.com/what-is-pip/</link>
<guid>https://realpython.com/what-is-pip/</guid>
<content:encoded><![CDATA[
<div> pip、Python、package manager、install、virtual environment
<br />
pip是Python的标准包管理器，可以用于安装和管理Python库和依赖项。在安装Python时，pip通常会自动包含在内。如果在系统中找不到pip，可以通过在Python模块中运行pip来确保使用系统默认的Python版本。此外，为了限制包的范围，可以在Python虚拟环境中运行pip。通过本教程，您可以学习如何设置pip、解决与pip相关的常见错误、使用pip安装和卸载包以及在requirements文件中管理项目的依赖关系。总结: <br /><br />pip是Python的标准包管理器，安装Python时通常会自动安装pip。通过在Python模块中运行pip可以确保使用系统默认Python版本。在Python虚拟环境中运行pip可以限制包的范围。通过本教程可以学习设置pip、解决常见错误、安装和卸载包以及管理项目依赖的方法。 <div>
<div><p>The standard package manager for <a href="https://www.python.org/">Python</a> is <a href="https://pip.pypa.io/en/stable/"><code>pip</code></a>. It allows you to install and manage packages that aren’t part of the <a href="https://docs.python.org/3/py-modindex.html">Python standard library</a>. If you’re looking for an introduction to <code>pip</code>, then you’ve come to the right place!</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Set up <code>pip</code></strong> in your working environment</li>
<li>Fix <strong>common errors</strong> related to working with <code>pip</code></li>
<li><strong>Install and uninstall packages</strong> with <code>pip</code></li>
<li>Manage projects’ dependencies using <strong>requirements files</strong></li>
</ul>
<p>You can do a lot with <code>pip</code>, but the Python community is very active and has created some neat alternatives to <code>pip</code>. You’ll learn about those later in this tutorial.</p>
<div class="alert alert-warning">
<p><strong>Get Your Cheat Sheet:</strong> <a class="alert-link" href="https://realpython.com/bonus/what-is-pip-pdf/">Click here to download a free pip cheat sheet</a> that summarizes the most important pip commands.</p>
</div>
<h2 id="getting-started-with-pip">Getting Started With <code>pip</code><a class="headerlink" href="#getting-started-with-pip" title="Permanent link"></a></h2>
<p>So, what exactly does <code>pip</code> do? <a href="https://pip.pypa.io/en/stable/"><code>pip</code></a> is a <strong>package manager</strong> for Python. That means it’s a tool that allows you to install and manage libraries and dependencies that aren’t distributed as part of the standard library. The name <strong>pip</strong> was introduced by Ian Bicking in 2008:</p>
<blockquote>
<p>I’ve finished renaming pyinstall to its new name: pip. The name pip is [an] acronym and declaration: pip installs packages. (<a href="https://www.ianbicking.org/blog/2008/10/pyinstall-is-dead-long-live-pip.html">Source</a>)</p>
</blockquote>
<p>Package management is so important that Python’s installers have included <code>pip</code> since versions 3.4 and 2.7.9, for Python 3 and Python 2, respectively. Many Python projects use <code>pip</code>, which makes it an essential tool for every Pythonista.</p>
<p>The concept of a package manager might be familiar to you if you’re coming from another programming language. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a> uses <a href="https://www.npmjs.com/">npm</a> for package management, <a href="https://www.ruby-lang.org/en/">Ruby</a> uses <a href="https://rubygems.org/">gem</a>, and the <a href="https://dotnet.microsoft.com/languages">.NET platform</a> uses <a href="https://www.nuget.org/">NuGet</a>. In Python, <code>pip</code> has become the standard package manager.</p>
<h3 id="finding-pip-on-your-system">Finding <code>pip</code> on Your System<a class="headerlink" href="#finding-pip-on-your-system" title="Permanent link"></a></h3>
<p>The Python installer gives you the option to install <code>pip</code> when installing Python on your system. In fact, the option to install <code>pip</code> with Python is checked by default, so <code>pip</code> should be ready for you to use after installing Python.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> On some Linux (Unix) systems like Ubuntu, <code>pip</code> comes in a separate package called <code>python3-pip</code>, which you need to install with <code>sudo apt install python3-pip</code>. It’s not installed by default with the interpreter.</p>
</div>
<p>You can verify that <code>pip</code> is available by looking for the <code>pip3</code> executable on your system. Select your operating system below and use your platform-specific command accordingly:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="nb">where </span><span class="n">pip3</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <code>where</code> command on Windows will show you where you can find the executable of <code>pip3</code>. If Windows can’t find an executable named <code>pip3</code>, then you can also try looking for <code>pip</code> without the three (<code>3</code>) at the end.</p>
</div>
<div class="tab-pane fade " id="linux-macos-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>which<span class="w"> </span>pip3
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <code>which</code> command on Linux systems and macOS shows you where the <code>pip3</code> binary file is located.</p>
</div>
</div>
<p>On Windows and Unix systems, <code>pip3</code> may be found in more than one location. This can happen when you have multiple Python versions installed. If you can’t find <code>pip</code> in any location on your system, then you may consider <a href="#reinstalling-pip-when-errors-occur">reinstalling pip</a>.</p>
<p>Instead of running your system <code>pip</code> directly, you can also run it as a Python module. In the next section, you’ll learn how.</p>
<h3 id="running-pip-as-a-module">Running <code>pip</code> as a Module<a class="headerlink" href="#running-pip-as-a-module" title="Permanent link"></a></h3>
<p>When you run your system <code>pip</code> directly, the command itself doesn’t reveal which Python version <code>pip</code> belongs to. This unfortunately means that you could use <code>pip</code> to install a package into the site-packages of an old Python version without noticing. To prevent this from happening, you should run <code>pip</code> as a Python module:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Notice that you use <code>python -m</code> to run <code>pip</code>. The <code>-m</code> switch tells Python to run a module as an executable of the <code>python</code> interpreter. This way, you can ensure that your system default Python version runs the <code>pip</code> command. If you want to learn more about this way of running <code>pip</code>, then you can read Brett Cannon’s insightful article about <a href="https://snarky.ca/why-you-should-use-python-m-pip/">the advantages of using <code>python -m pip</code></a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Depending on how you installed Python, your Python executable may have a different name than <code>python</code>. You’ll see <code>python</code> used in this tutorial, but you may have to adapt the commands to use something like <code>py</code> or <code>python3</code> instead.</p>
</div>
<p>Sometimes you may want to be more explicit and limit packages to a specific project. In situations like this, you should run <code>pip</code> inside a <strong>virtual environment</strong>.</p>
<h3 id="using-pip-in-a-python-virtual-environment">Using <code>pip</code> in a Python Virtual Environment<a class="headerlink" href="#using-pip-in-a-python-virtual-environment" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/what-is-pip/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/what-is-pip/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #220: Configuring Git Pre-Commit Hooks &amp; Estimating Software Projects</title>
<link>https://realpython.com/podcasts/rpp/220/</link>
<guid>https://realpython.com/podcasts/rpp/220/</guid>
<content:encoded><![CDATA[
<div> Git pre-commit hooks, custom rules, checks, Python, Christopher Trudeau

总结:<br /><br />本文介绍了如何充分利用Git的pre-commit hooks功能，在每次提交代码时运行自定义的软件检查和规则。作者Christopher Trudeau分享了PyCoder's Weekly的文章和项目。文章详细探讨了如何利用Git的pre-commit hooks功能，在代码提交前运行自定义的检查和规则，以确保代码质量和一致性。通过编写Python脚本和配置相应的Git钩子，开发人员可以轻松实现自动化的代码检查，并及时发现和解决潜在问题。通过本文的指导，读者可以提高代码质量，并提升开发效率。 <div>
<p>How do you take advantage of Git pre-commit hooks? How do you build custom software checks and rules that run every time you commit your code? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-13T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python 3.13: Free-Threading and a JIT Compiler</title>
<link>https://realpython.com/quizzes/python313-free-threading-jit/</link>
<guid>https://realpython.com/quizzes/python313-free-threading-jit/</guid>
<content:encoded><![CDATA[
<div> Python 3.13、新功能、编译、全局解释器锁、性能改进

总结:<br /><br />
本文介绍了Python 3.13中的新功能，包括如何编译自定义Python版本、禁用全局解释器锁（GIL）、启用即时（JIT）编译器、在运行时确定新功能的可用性、评估Python 3.13中的性能改进，并制作一个针对Python新ABI的C扩展模块。文章全面探讨了Python 3.13的一系列新特性，为读者深入了解Python编程语言的最新发展提供了重要参考。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of the new features in Python 3.13.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to compile a <strong>custom Python build</strong>, disable the <strong>Global Interpreter Lock (GIL)</strong>, enable the <strong>Just-In-Time (JIT)</strong> compiler, determine the availability of new features at runtime, assess the <strong>performance improvements</strong> in Python 3.13, and make a <strong>C extension module</strong> targeting Python&rsquo;s new ABI.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Virtual Environments: A Primer</title>
<link>https://realpython.com/quizzes/python-virtual-environments-a-primer/</link>
<guid>https://realpython.com/quizzes/python-virtual-environments-a-primer/</guid>
<content:encoded><![CDATA[
<div> 模块、装饰器、Lambda函数、迭代器、生成器 <br />
总结:<br />
本教程介绍了几种 Python 编程技巧，包括如何使用模块来封装代码并提高可维护性，装饰器可以在不改变原函数结构的情况下添加额外功能，Lambda函数可以用于创建简洁的匿名函数，迭代器可以遍历可迭代对象并在需要时生成数据，生成器可以按需生成数据而不是一次性生成所有数据。掌握这些技巧可以让 Python 编程更加高效和优雅。 <div>
<p>So you&rsquo;ve been <a href="https://realpython.com/python-virtual-environments-a-primer/">primed on Python virtual environments</a>! Test your understanding of the tutorial here.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-11T12:00:00+00:00</pubDate>
</item>
<item>
<title>How to Use Conditional Expressions With NumPy where()</title>
<link>https://realpython.com/numpy-where-conditional-expressions/</link>
<guid>https://realpython.com/numpy-where-conditional-expressions/</guid>
<content:encoded><![CDATA[
<div> NumPy, where(), array, condition, replacement<br />
NumPy的where()函数能够通过条件语句来过滤数组元素，根据条件对数组元素进行不同的操作，通常提供三个参数：条件、满足条件时的操作、不满足条件时的操作。当需要根据数组元素的值进行不同操作时，可以使用where()函数，比如将负数替换为正数。通过条件构建布尔数组，只包含True和False，满足条件为True，不满足为False。使用np.abs()函数可以替代where()函数来实现同样的效果。更深入了解where()函数的使用方法和Bool型数组的生成方式，能更好地理解和应用该函数。<br /><br />总结: <div>
<div><p>The NumPy <code>where()</code> function is a powerful tool for filtering array elements in lists, tuples, and NumPy arrays. It works by using a conditional predicate, similar to the logic used in the WHERE or HAVING clauses in <a href="https://realpython.com/python-sql-libraries/">SQL</a> queries. It’s okay if you’re not familiar with SQL—you don’t need to know it to follow along with this tutorial.</p>
<p>You would typically use <code>np.where()</code> when you have an array and need to analyze its elements differently depending on their values. For example, you might need to replace negative numbers with zeros or replace missing values such as <code>None</code> or <code>np.nan</code> with something more meaningful. When you run <code>where()</code>, you’ll produce a new array containing the results of your analysis.</p>
<p>You generally supply three parameters when using <code>where()</code>. First, you provide a <strong>condition</strong> against which each element of your original array is matched. Then, you provide two additional parameters: the first defines what you want to do if an element <em>matches</em> your condition, while the second defines what you want to do <em>if it doesn’t</em>.</p>
<p>If you think this all sounds similar to Python’s <a href="https://realpython.com/python-conditional-statements/#conditional-expressions-pythons-ternary-operator">ternary operator</a>, you’re correct. The logic is the same.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In this tutorial, you’ll work with two-dimensional arrays. However, the same principles can be applied to arrays of any dimension.</p>
</div>
<p>Before you start, you should familiarize yourself with <a href="https://realpython.com/numpy-tutorial/">NumPy arrays</a> and how to use them. It will also be helpful if you understand the subject of <a href="https://numpy.org/doc/stable/user/basics.broadcasting.html">broadcasting</a>, particularly for the latter part of this tutorial.</p>
<p>In addition, you may want to use the data analysis tool <a href="https://realpython.com/jupyter-notebook-introduction/">Jupyter Notebook</a> as you work through the examples in this tutorial. Alternatively, <a href="https://realpython.com/using-jupyterlab/">JupyterLab</a> will give you an enhanced notebook experience, but feel free to use any Python environment.</p>
<p>The NumPy library is not part of core Python, so you’ll need to install it. If you’re using a Jupyter Notebook, create a new code cell and type <code>!python -m pip install numpy</code> into it. When you run the cell, the library will install. If you’re working at the command line, use the same command, only without the exclamation point (!).</p>
<p>With these preliminaries out of the way, you’re now good to go.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/numpy-where-conditional-expressions-code/">Click here to download the free sample code</a> that shows you how to use conditional expressions with NumPy where().</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “How to Use Conditional Expressions With NumPy where()” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/numpy-where-conditional-expressions/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="How to Use Conditional Expressions With NumPy where()" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/How-to-Write-Conditional-Expressions-With-np.where-in-NumPy_Watermarked.a1b7c35f4084.jpg" style="background: #b8aae5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/numpy-where-conditional-expressions/"><span class="my-0 h4">How to Use Conditional Expressions With NumPy where()</span></a> 
      <p class="text-muted mb-0 small">This quiz aims to test your understanding of the np.where() function. You won't find all the answers in the tutorial, so you'll need to do additional research. It's recommended that you make sure you can do all the exercises in the tutorial before tackling this quiz. Enjoy!</p>
    </div>
  </div>

</div>

<h2 id="how-to-write-conditional-expressions-with-numpy-where">How to Write Conditional Expressions With NumPy <code>where()</code><a class="headerlink" href="#how-to-write-conditional-expressions-with-numpy-where" title="Permanent link"></a></h2>
<p>One of the most common scenarios for using <code>where()</code> is when you need to replace certain elements in a NumPy array with other values depending on some condition.</p>
<p>Consider the following array:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">test_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span>
<span class="gp">... </span>    <span class="p">[</span>
<span class="gp">... </span>        <span class="p">[</span><span class="mf">3.1688358</span><span class="p">,</span> <span class="mf">3.9091694</span><span class="p">,</span> <span class="mf">1.66405549</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.61976783</span><span class="p">],</span>
<span class="gp">... </span>        <span class="p">[</span><span class="mf">7.33400434</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.25797286</span><span class="p">,</span> <span class="o">-</span><span class="mf">9.65148913</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.76115911</span><span class="p">],</span>
<span class="gp">... </span>        <span class="p">[</span><span class="mf">2.71053173</span><span class="p">,</span> <span class="o">-</span><span class="mf">6.02410179</span><span class="p">,</span> <span class="mf">7.46355805</span><span class="p">,</span> <span class="mf">1.30949485</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">]</span>
<span class="gp">... </span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To begin with, you need to <a href="https://realpython.com/python-import/">import</a> the NumPy library into your program. It’s standard practice to do so using the alias <code>np</code>, which allows you to refer to the library using this abbreviated form.</p>
<p>The resulting array has a shape of three rows and four columns, each containing a <a href="https://realpython.com/python-data-types/#floating-point-numbers">floating-point number</a>.</p>
<p>Now suppose you wanted to replace all the negative numbers with their positive equivalents:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span>
<span class="gp">... </span>    <span class="n">test_array</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">test_array</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">test_array</span><span class="p">,</span>
<span class="gp">... </span><span class="p">)</span>
<span class="go">array([[3.1688358 , 3.9091694 , 1.66405549, 3.61976783],</span>
<span class="go">       [7.33400434, 3.25797286, 9.65148913, 0.76115911],</span>
<span class="go">       [2.71053173, 6.02410179, 7.46355805, 1.30949485]])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The result is a new NumPy array with the negative numbers replaced by positives. Look carefully at the original <code>test_array</code> and then at the corresponding elements of the new <code>all_positives</code> array, and you’ll see that the result is exactly what you wanted.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> The above example gives you an idea of how the <code>where()</code> function works. If you were doing this in practice, you’d most likely use either the <code>np.abs()</code> or <code>np.absolute()</code> functions instead. Both do the same thing because the former is shorthand for the latter:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">test_array</span><span class="p">)</span>
<span class="go">array([[3.1688358 , 3.9091694 , 1.66405549, 3.61976783],</span>
<span class="go">       [7.33400434, 3.25797286, 9.65148913, 0.76115911],</span>
<span class="go">       [2.71053173, 6.02410179, 7.46355805, 1.30949485]])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Once more, all negative values have been removed.</p>
</div>
<p>Before moving on to other use cases of <code>where()</code>, you’ll take a closer look at how this all works. To achieve your aim in the previous example, you passed in <code>test_array &lt; 0</code> as the condition. In NumPy, this creates a Boolean array that <code>where()</code> uses:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">test_array</span> <span class="o">&lt;</span> <span class="mi">0</span>
<span class="go">array([[False, False, False,  True],</span>
<span class="go">       [False,  True,  True,  True],</span>
<span class="go">       [False,  True, False, False]])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The Boolean array, often called the <strong>mask</strong>, consists only of elements that are either <code>True</code> or <code>False</code>. If an element matches the condition, the corresponding element in the Boolean array will be <code>True</code>. Otherwise, it’ll be <code>False</code>.</p>
</div><h2><a href="https://realpython.com/numpy-where-conditional-expressions/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/numpy-where-conditional-expressions/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-11T14:00:00+00:00</pubDate>
</item>
<item>
<title>When to Use .__repr__() vs .__str__() in Python</title>
<link>https://realpython.com/courses/repr-vs-str/</link>
<guid>https://realpython.com/courses/repr-vs-str/</guid>
<content:encoded><![CDATA[
<div> Python, .__repr__(), .__str__(), classes, programmer 

Python中的特殊方法.__repr__()和.__str__()用于控制对象在不同情况下的字符串表示。.__repr__()会返回给程序员更详细的描述以便于调试和维护代码，.__str__()则返回给用户更简单的描述信息。通过定义这些特殊方法，可以提高代码的可读性，使得类更易于调试和维护。在选择Python的.__repr__()和.__str__()时，需要根据输出的需求来决定，是给程序员看还是给用户看。通过本课程，您可以学习如何区分和使用.__repr__()和.__str__()，从而更好地控制对象的输出形式。<br /><br />总结: Python中的.__repr__()和.__str__()方法可帮助程序员控制对象的字符串表示，通过合理定义这些方法可以提高代码可读性和维护性。 <div>
<p>One of the most common tasks that a computer program performs is to <strong>display data</strong>. The program often displays this information to the program&rsquo;s user. However, a program also needs to show information to the programmer developing and maintaining it. The information a programmer needs about an object differs from how the program should display the same object for the user, and that&rsquo;s where <code>.__repr__()</code> vs <code>.__str__()</code> comes in.</p>
<p>A Python object has several special methods that provide specific behavior. There are two similar <strong>special methods</strong> that describe the object using a string representation. These methods are <code>.__repr__()</code> and <code>.__str__()</code>. The <code>.__repr__()</code> method returns a <strong>detailed description</strong> for a programmer who needs to maintain and debug the code. The <code>.__str__()</code> method returns a <strong>simpler description</strong> with information for the user of the program.</p>
<p>The <code>.__repr__()</code> and <code>.__str__()</code> methods are two of the special methods that you can define for any class. They allow you to control how a program displays an object in several common forms of output, such as what you get from the <code>print()</code> function, formatted strings, and interactive environments.</p>
<p>In this video course, you&rsquo;ll learn how to differentiate <code>.__repr__()</code> vs <code>.__str__()</code> and how to use these special methods in the classes you define. Defining these methods effectively makes the classes that you write more readable and easier to debug and maintain. So, <strong>when should you choose Python&rsquo;s <code>.__repr__()</code> vs <code>.__str__</code>?</strong></p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-10T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News Roundup: September 2024</title>
<link>https://realpython.com/python-news-september-2024/</link>
<guid>https://realpython.com/python-news-september-2024/</guid>
<content:encoded><![CDATA[
<div> Python, 3.12.5, 发布, 安全, 文档更新

总结：<br /><br />Python 3.12.5 作为 Python 系列的第五个维护更新发布，包含了250多个 bug 修复、性能改进和文档更新。重点包括标准库和核心 Python 的多个模块更新，安全性提升，新增测试用例，以及文档更新。此外，Python 3.12.5 默认使用内置的 SSL 证书，加强了对第三方包管理和安装时的安全措施。                               <div>
<div><p>As the autumn leaves start to fall, signaling the transition to cooler weather, the Python community has warmed up to a series of noteworthy developments. Last month, a new maintenance release of <strong>Python 3.12.5</strong> was introduced, reinforcing the language’s ongoing commitment to stability and security.</p>
<p>On a parallel note, Python continues its reign as the <strong>top programming language</strong> according to IEEE Spectrum’s annual rankings. This sentiment is echoed by the <strong>Python Developers Survey 2023</strong> results, which reveal intriguing trends and preferences within the community.</p>
<p>Looking ahead, <strong>PEP 750</strong> has proposed the addition of <strong>tag strings</strong> in Python 3.14, inspired by JavaScript’s tagged template literals. This feature aims to enhance string processing, offering developers more control and expressiveness.</p>
<p>Furthermore, <strong>EuroSciPy 2024</strong> recently concluded in Poland after successfully fostering cross-disciplinary collaboration and learning. The event featured insightful talks and hands-on tutorials, spotlighting innovative tools and libraries that are advancing scientific computing with Python.</p>
<p>Let’s dive into the most significant Python news from the past month!</p>
<h2 id="python-3125-released">Python 3.12.5 Released<a class="headerlink" href="#python-3125-released" title="Permanent link"></a></h2>
<p>Early last month, <a href="https://www.python.org/downloads/release/python-3125/">Python 3.12.5</a> was released as the fifth maintenance update for the <a href="https://realpython.com/python312-new-features/">3.12</a> series. Since the previous patch update in June, this release packs over 250 bug fixes, performance improvements, and documentation enhancements.</p>
<p>Here are the most important highlights:</p>
<ul>
<li><strong>Standard Library</strong>: Many modules in the standard library received crucial updates, such as fixes for crashes in <code>ssl</code> when the main interpreter restarts, and various corrections for error-handling mechanisms.</li>
<li><strong>Core Python</strong>: The core Python runtime has several enhancements, including improvements to dictionary watchers, error messages, and fixes for edge-case crashes involving f-strings and multithreading.</li>
<li><strong>Security</strong>: Key security improvements include the addition of missing audit events for interactive Python use and socket connection authentication within a fallback implementation on platforms such as Windows, where Unix inter-process communication is unavailable.</li>
<li><strong>Tests</strong>: New test cases have been added and bug fixes have been applied to prevent random memory leaks during testing.</li>
<li><strong>Documentation:</strong> Python documentation has been updated to remove discrepancies and clarify edge cases in multithreaded queues.</li>
</ul>
<p>Additionally, Python 3.12.5 comes equipped with <a href="https://discuss.python.org/t/announcement-pip-24-2-release/59402">pip 24.2</a> by default, bringing a slew of significant improvements to enhance security, efficiency, and functionality. One of the most notable upgrades is that pip now defaults to using system certificates, bolstering security measures when managing and installing third-party packages.</p>
</div><h2><a href="https://realpython.com/python-news-september-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-september-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-09T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #219: Astrophysics and Astronomy With Python &amp; PyCon Africa 2024</title>
<link>https://realpython.com/podcasts/rpp/219/</link>
<guid>https://realpython.com/podcasts/rpp/219/</guid>
<content:encoded><![CDATA[
<div> Python, astrophysics, astronomy, problems, Christopher Trudeau
总结:<br /><br />本文介绍了如何利用Python来解决天体物理和天文学问题，作者Christopher Trudeau带来了一系列PyCoder's Weekly的文章和项目。这些文章和项目不仅帮助读者提高Python编程技能，还能学习如何解决与天体物理和天文学相关的问题。通过实践这些项目，读者可以更好地理解Python编程语言，并深入研究天体物理学和天文学。如果您对提高Python编程技能、解决天体物理和天文学问题感兴趣，这些资源将是非常有用的。Christopher Trudeau是本文作者，通过他的分享，读者可以获得更多实用的知识和技巧。 <div>
<p>Are you interested in practicing your Python skills while learning how to solve astrophysics and astronomy problems? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-06T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Lists vs Tuples in Python</title>
<link>https://realpython.com/quizzes/python-lists-tuples/</link>
<guid>https://realpython.com/quizzes/python-lists-tuples/</guid>
<content:encoded><![CDATA[
<div> Python, 列表, 元组, 概念, 最佳实践
总结:<br /><br />本文介绍了Python中列表和元组的关键概念，包括如何创建和操作这些数据类型，以及在代码中有效使用它们的最佳实践。通过挑战性的测验，读者可以评估和加深对列表和元组的理解。阅读完教程后，可以通过这个测验来提升Python编程技能。 <div>
<p>Challenge yourself with this quiz to evaluate and deepen your understanding of Python lists and tuples. You&rsquo;ll explore key concepts, such as how to create and manipulate these data types, while also learning best practices for using them efficiently in your code.</p>
<p>You can take this quiz after reading the <a href="https://realpython.com/python-lists-tuples/">Lists vs Tuples in Python</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-04T12:00:00+00:00</pubDate>
</item>
<item>
<title>Lists vs Tuples in Python</title>
<link>https://realpython.com/python-lists-tuples/</link>
<guid>https://realpython.com/python-lists-tuples/</guid>
<content:encoded><![CDATA[
<div> lists, tuples, ordering, mutability, indexing<br />
<br />
lists和tuples是Python中常用的数据类型，分别表示列表和元组。它们都是有序的序列，可以包含任意对象，并且支持索引和切片操作。然而，lists是可变的，而tuples是不可变的。在使用lists时，通常存储同质数据，而在使用tuples时，通常存储异质数据。lists使用方括号[]表示，tuples使用括号()表示。lists可以随意修改其内容，而tuples在创建后不可更改。Lists和tuples都是灵活而强大的数据结构，在编写Python程序时经常用到。总结: Lists和tuples都是有序的数据类型，区别在于lists是可变的，tuples是不可变的。Lists适用于同质数据，tuples适用于异质数据。 <div>
<div><p>In Python, <strong>lists</strong> and <strong>tuples</strong> are versatile and useful <a href="https://realpython.com/python-data-types/">data types</a> that allow you to store data in a sequence. You’ll find them in virtually every nontrivial Python program. Learning about them is a core skill for you as a Python developer.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Get to know <strong>lists</strong> and <strong>tuples</strong></li>
<li>Explore the <strong>core characteristics</strong> of lists and tuples</li>
<li>Learn how to <strong>define</strong> and <strong>manipulate</strong> lists and tuples</li>
<li>Decide <strong>when to use</strong> lists or tuples in your code</li>
</ul>
<p>To get the most out of this tutorial, you should know the basics of Python programming, including how to define variables.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-lists-tuples-code/">Click here to download the free sample code</a> that shows you how to work with lists and tuples in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Lists vs Tuples in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-lists-tuples-update/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Lists vs Tuples in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Lists-and-Tuples-in-Python_Watermarked.a52798070b3e.jpg" style="background: #fe7e73;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-lists-tuples-update/"><span class="my-0 h4">Lists vs Tuples in Python</span></a> 
      <p class="text-muted mb-0 small">Challenge yourself with this quiz to evaluate and deepen your understanding of Python lists and tuples. You'll explore key concepts, such as how to create, access, and manipulate these data types, while also learning best practices for using them efficiently in your code.</p>
    </div>
  </div>

</div>

<h2 id="getting-started-with-python-lists-and-tuples">Getting Started With Python Lists and Tuples<a class="headerlink" href="#getting-started-with-python-lists-and-tuples" title="Permanent link"></a></h2>
<p>In Python, a list is a collection of arbitrary objects, somewhat akin to an <a href="https://en.wikipedia.org/wiki/Array_(data_structure)">array</a> in many other programming languages but more flexible. To define a list, you typically enclose a comma-separated sequence of objects in square brackets (<code>[]</code>), as shown below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"green"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">,</span> <span class="s2">"yellow"</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span>
<span class="go">['red', 'green', 'blue', 'yellow']</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code snippet, you define a list of colors using <a href="https://realpython.com/python-strings/">string</a> objects separated by commas and enclose them in square brackets.</p>
<p>Similarly, tuples are also collections of arbitrary objects. To define a tuple, you’ll enclose a comma-separated sequence of objects in parentheses (<code>()</code>), as shown below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">person</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"Jane Doe"</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="s2">"Python Developer"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">person</span>
<span class="go">('Jane Doe', 25, 'Python Developer', 'Canada')</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you define a tuple with data for a given person, including their name, age, job, and base country.</p>
<p>Up to this point, it may seem that lists and tuples are mostly the same. However, there’s an important difference:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Feature</th>
<th class="text-center">List</th>
<th class="text-center">Tuple</th>
</tr>
</thead>
<tbody>
<tr>
<td>Is an ordered sequence</td>
<td class="text-center">✅</td>
<td class="text-center">✅</td>
</tr>
<tr>
<td>Can contain arbitrary objects</td>
<td class="text-center">✅</td>
<td class="text-center">✅</td>
</tr>
<tr>
<td>Can be indexed and sliced</td>
<td class="text-center">✅</td>
<td class="text-center">✅</td>
</tr>
<tr>
<td>Can be nested</td>
<td class="text-center">✅</td>
<td class="text-center">✅</td>
</tr>
<tr>
<td>Is mutable</td>
<td class="text-center">✅</td>
<td class="text-center">❌</td>
</tr>
</tbody>
</table>
</div>
<p>Both lists and tuples are <a href="https://realpython.com/python-sequences/">sequence</a> data types, which means they can contain objects arranged in order. You can access those objects using an integer index that represents their position in the sequence.</p>
<p>Even though both data types can contain arbitrary and heterogeneous objects, you’ll commonly use lists to store homogeneous objects and tuples to store heterogeneous objects.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In this tutorial, you’ll see the terms homogeneous and heterogeneous used to express the following ideas:</p>
<ul>
<li><strong>Homogeneous</strong>: Objects of the same data type or the same semantic meaning, like a series of animals, fruits, colors, and so on.</li>
<li><strong>Heterogeneous</strong>: Objects of different data types or different semantic meanings, like the attributes of a car: model, color, make, year, fuel type, and so on.</li>
</ul>
</div>
<p>You can perform indexing and slicing operations on both lists and tuples. You can also have nested lists and nested tuples or a combination of them, like a list of tuples.</p>
<p>The most notable difference between lists and tuples is that lists are mutable, while tuples are immutable. This feature distinguishes them and drives their specific use cases.</p>
<p>Essentially, a list doesn’t have a fixed length since it’s immutable. Therefore, it’s natural to use homogeneous elements to have some structure in the list. A tuple, on the other hand, has a fixed length so the position of elements can have meaning, supporting heterogeneous data.</p>
<h3 id="creating-lists-in-python">Creating Lists in Python<a class="headerlink" href="#creating-lists-in-python" title="Permanent link"></a></h3>
<p>In many situations, you’ll define a <code>list</code> object using a <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals">literal</a>. A list literal is a comma-separated sequence of objects enclosed in square brackets:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"United States"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">,</span> <span class="s2">"Poland"</span><span class="p">,</span> <span class="s2">"Germany"</span><span class="p">,</span> <span class="s2">"Austria"</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span>
<span class="go">['United States', 'Canada', 'Poland', 'Germany', 'Austria']</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you create a list of countries represented by string objects. Because lists are ordered sequences, the values retain the insertion order.</p>
</div><h2><a href="https://realpython.com/python-lists-tuples/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-lists-tuples/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-04T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using Pydantic to Simplify Python Data Validation</title>
<link>https://realpython.com/courses/pydantic-simplify-data-validation/</link>
<guid>https://realpython.com/courses/pydantic-simplify-data-validation/</guid>
<content:encoded><![CDATA[
<div> Pydantic、data validation、settings management、Python、robustness。<br />
Pydantic是Python的一个强大的数据验证和设置管理库，旨在增强代码库的健壮性和可靠性。它可以处理各种数据验证场景，从检查变量是否为整数到确保高度嵌套的字典键和值具有正确的数据类型。通过学习这个视频课程，你将学会如何使用Pydantic的BaseModel处理数据模式，编写复杂用例的自定义验证器，使用Pydantic的@validate_call验证函数参数，以及使用pydantic-settings管理设置和配置应用程序。<br /><br />总结: Pydantic是一个强大的Python数据验证和设置管理库，能够提高代码库的健壮性和可靠性，通过学习视频课程，可以掌握使用Pydantic处理数据模式、编写自定义验证器、验证函数参数、管理设置和配置应用程序等关键技能。 <div>
<p>Pydantic is a powerful data validation and settings management library for Python, engineered to enhance the robustness and reliability of your codebase. From basic tasks, such as checking whether a variable is an integer, to more complex tasks, like ensuring highly-nested dictionary keys and values have the correct data types, Pydantic can handle just about any data validation scenario with minimal boilerplate code.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Work with <strong>data schemas</strong> with Pydantic&rsquo;s <code>BaseModel</code></li>
<li>Write <strong>custom validators</strong> for complex use cases</li>
<li><strong>Validate function arguments</strong> with Pydantic&rsquo;s <code>@validate_call</code></li>
<li>Manage settings and <strong>configure applications</strong> with <code>pydantic-settings</code></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-03T14:00:00+00:00</pubDate>
</item>
<item>
<title>Generate Images With DALL·E and the OpenAI API</title>
<link>https://realpython.com/generate-images-with-dalle-openai-api/</link>
<guid>https://realpython.com/generate-images-with-dalle-openai-api/</guid>
<content:encoded><![CDATA[
<div> Python OpenAI 图像生成 API  
OpenAI Python库 API keys 图像生成环境变量  
安装 OpenAI Python 库，获取API密钥，保存为环境变量，开展图像生成API。  
使用Python 3.7.1或更高版本，安装OpenAI Python库，并保存API密钥为环境变量。  
总结: 通过安装Python库和设置API密钥环境变量，可以在Python应用程序中使用OpenAI的图像生成API。 <div>
<div><p>Describe any image, then let a computer create it for you. What sounded futuristic only a few years ago has become reality with advances in <a href="https://realpython.com/python-ai-neural-network/">neural networks</a> and <strong>latent diffusion models</strong> (LDM). <strong>DALL·E by OpenAI</strong> has made a splash through the amazing <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a> and realistic images that people create with it.</p>
<p>OpenAI allows <a href="https://openai.com/index/dall-e-3/">access to DALL·E</a> through their <strong>API</strong>, which means that you can incorporate its functionality into your <strong>Python applications</strong>.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Get started using the <strong>OpenAI Python library</strong></li>
<li>Explore API calls related to <strong>image generation</strong></li>
<li>Create images from <strong>text prompts</strong></li>
<li>Create <strong>variations</strong> of your generated image</li>
<li><strong>Convert Base64</strong> JSON responses to <strong>PNG image</strong> files</li>
</ul>
<p>You’ll need some experience with Python, JSON, and file operations to breeze through this tutorial. You can also study up on these topics while you go along, as you’ll find relevant links throughout the text.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/generate-images-with-dalle-openai-api-code/">Click here to download the free sample code</a> that you’ll use to generate stunning images with DALL·E and the OpenAI API.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Generate Images With DALL·E and the OpenAI API” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/generate-images-with-dalle-and-openai-api/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Generate Images With DALL·E 2 and the OpenAI API" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Generate-Images-with-DALL-E-2-and-OpenAIs-API_Watermarked.05753350e866.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/generate-images-with-dalle-and-openai-api/"><span class="my-0 h4">Generate Images With DALL·E and the OpenAI API</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of generating images with DALL·E by OpenAI using Python. You'll revisit concepts such as using the OpenAI Python library, making API calls for image generation, creating images from text prompts, and converting Base64 strings to PNG image files.</p>
    </div>
  </div>

</div>

<h2 id="complete-the-setup-requirements">Complete the Setup Requirements<a class="headerlink" href="#complete-the-setup-requirements" title="Permanent link"></a></h2>
<p>If you’ve seen what DALL·E can do and you’re eager to make its functionality part of your Python applications, then you’re in the right spot! In this first section, you’ll quickly walk through what you need to do to get started using DALL·E’s image creation capabilities in your own code.</p>
<h3 id="install-the-openai-python-library">Install the OpenAI Python Library<a class="headerlink" href="#install-the-openai-python-library" title="Permanent link"></a></h3>
<p>Confirm that you’re <a href="https://realpython.com/intro-to-pyenv/#specifying-your-python-version">running Python version</a> 3.7.1 or higher, create and activate a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a>, and install the <a href="https://github.com/openai/openai-python">OpenAI Python library</a>:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">python</span> <span class="p">-</span><span class="n">-version</span>
<span class="go">Python 3.12.5</span>
<span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-m</span> <span class="n">venv</span> <span class="n">venv</span>
<span class="gp">PS&gt; </span><span class="p">.\</span><span class="n">venv</span><span class="p">\</span><span class="n">Scripts</span><span class="p">\</span><span class="n">activate</span>
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">openai</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
<div class="tab-pane fade " id="linux-macos-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>--version
<span class="go">Python 3.12.5</span>
<span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv
<span class="gp">$ </span><span class="nb">source</span><span class="w"> </span>venv/bin/activate
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>openai
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
</div>
<p>The <code>openai</code> package gives you access to the full <a href="https://platform.openai.com/docs/api-reference/introduction">OpenAI API</a>. In this tutorial, you’ll focus on <a href="https://platform.openai.com/docs/guides/images/introduction">image generation</a>, which lets you interact with DALL·E models to create and edit images from text prompts.</p>
<h3 id="get-your-openai-api-key">Get Your OpenAI API Key<a class="headerlink" href="#get-your-openai-api-key" title="Permanent link"></a></h3>
<p>You need an API key to make successful API calls. Sign up with OpenAI and create a new project API key by clicking on the <em>Dashboard</em> menu and then <a href="https://platform.openai.com/api-keys"><em>API keys</em></a> on the bottom left of the navigation menu:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/dalle-openai-api-key.89c5aeee4642.png" target="_blank"><img alt="The OpenAI API key page where you can create and manage API project keys" class="img-fluid mx-auto d-block " height="1800" src="https://files.realpython.com/media/dalle-openai-api-key.89c5aeee4642.png" width="2880" /></a></figure>

<p>On this page, you can create and manage your API keys, which allow you to access the service that OpenAI offers through their API. You can create and delete secret keys.</p>
<p>Click on <em>Create new secret key</em> to create a new API key, and copy the value shown in the pop-up window.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> OpenAI assigns your API usage through unique key values, so make sure to keep your API key private. The company calculates the <a href="https://openai.com/api/pricing/">pricing</a> of requests to generate images on a per-image basis that depends on the model you use and the resolution of the output image.</p>
<p>Keep in mind that OpenAI’s API services and pricing policies may change. Be sure to check their <a href="https://openai.com/api/">website</a> for up-to-date information about pricing and offers.</p>
</div>
<p>Always keep this key secret! Copy the value of this key so you can later use it in your project. You’ll only see the key value once.</p>
<h3 id="save-your-api-key-as-an-environment-variable">Save Your API Key as an Environment Variable<a class="headerlink" href="#save-your-api-key-as-an-environment-variable" title="Permanent link"></a></h3>
<p>A quick way to save your API key and make it available to your Python scripts is to save it as an <strong>environment variable</strong>. Select your operating system to learn how:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-2" id="windows-tab-2"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-2" id="macos-tab-2"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-2">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt; </span><span class="nv">$ENV:OPENAI_API_KEY</span> <span class="p">=</span> <span class="s2">"&lt;your-key-value-here&gt;"</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
<div class="tab-pane fade " id="linux-macos-2">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span><span class="nb">export</span><span class="w"> </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span><span class="s2">"&lt;your-key-value-here&gt;"</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
</div>
</div><h2><a href="https://realpython.com/generate-images-with-dalle-openai-api/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/generate-images-with-dalle-openai-api/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-02T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Use Conditional Expressions With NumPy where()</title>
<link>https://realpython.com/quizzes/numpy-where-conditional-expressions/</link>
<guid>https://realpython.com/quizzes/numpy-where-conditional-expressions/</guid>
<content:encoded><![CDATA[
<div> 提取关键词：quiz, understanding, tutorial, research, exploration

总结：<br /><br />本文主要是关于测试对Python的理解，通过回答问题巩固从教程中学到的知识，并深入了解更多内容。在回答问题时，需要做一些教程之外的研究。挑战自己，探索可以让你获得宝贵的学习经验。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/numpy-where-conditional-expressions/">How to Use Conditional Expressions With NumPy <code>where()</code></a>.</p>
<p>By working through the questions, you&rsquo;ll consolidate the knowledge you gained from the tutorial and take yourself beyond what you learned. </p>
<p>To answer some of the questions, you&rsquo;ll need to do some research outside of the tutorial itself. Embrace this challenge because exploration can take you on a valuable learning journey.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Generate Images With DALL·E and the OpenAI API</title>
<link>https://realpython.com/quizzes/generate-images-with-dalle-and-openai-api/</link>
<guid>https://realpython.com/quizzes/generate-images-with-dalle-and-openai-api/</guid>
<content:encoded><![CDATA[
<div> OpenAI Python library, API calls, image generation, text prompts, Base64 strings
<br />
通过本文，您将复习如何使用OpenAI Python库进行API调用，生成图像，根据文本提示创建图像，生成图像的变体，并将Base64字符串转换为PNG图像文件。总结：本文讨论了如何使用OpenAI Python库进行图像生成，包括API调用，文本提示生成图像，生成图像的变体和将Base64字符串转换为PNG图像文件。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/generate-images-with-dalle-openai-api/">generating images with DALL·E by OpenAI API using Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to use the OpenAI Python library, make API calls related to image generation, create images from text prompts, create variations of an image, and convert Base64 strings to PNG image files.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-09-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Web Scraping With Scrapy and MongoDB</title>
<link>https://realpython.com/web-scraping-with-scrapy-and-mongodb/</link>
<guid>https://realpython.com/web-scraping-with-scrapy-and-mongodb/</guid>
<content:encoded><![CDATA[
<div> Scrapy, Python, web scraping, MongoDB, tutorial
总结:<br /><br />本教程介绍了如何使用Scrapy和MongoDB进行网页抓取。首先学习了如何设置和配置Scrapy项目，构建一个功能性的网页抓取器，提取网站数据使用选择器，将抓取的数据存储在MongoDB数据库中，并测试和调试Scrapy网页抓取器。在学习过程中，建立了一个完整的网页抓取项目，并探索了Scrapy提供的稳健结构。通过安装Scrapy包，创建Scrapy项目，和学习Scrapy的基本功能和工作流程，了解了如何使用Scrapy和MongoDB进行灵活和可扩展的网页抓取。 <div>
<div><p><strong>Scrapy</strong> is a robust Python web scraping framework that can manage requests asynchronously, follow links, and parse site content. To store scraped data, you can use <strong>MongoDB</strong>, a scalable NoSQL database, that stores data in a JSON-like format. Combining Scrapy with MongoDB offers a powerful solution for web scraping projects, leveraging Scrapy’s efficiency and MongoDB’s flexible data storage.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Set up and configure a <strong>Scrapy project</strong></li>
<li>Build a <strong>functional web scraper</strong> with Scrapy</li>
<li><strong>Extract data</strong> from websites using <strong>selectors</strong></li>
<li><strong>Store</strong> scraped data in a <strong>MongoDB</strong> database</li>
<li><strong>Test</strong> and <strong>debug</strong> your Scrapy web scraper</li>
</ul>
<p>If you’re new to web scraping and you’re looking for flexible and scalable tooling, then this is the right tutorial for you. You’ll also benefit from learning this tool kit if you’ve scraped sites before, but the complexity of your project has outgrown using <a href="https://realpython.com/beautiful-soup-web-scraper-python/">Beautiful Soup</a> and <a href="https://realpython.com/python-requests/">Requests</a>.</p>
<p>To get the most out of this tutorial, you should have basic Python programming knowledge, understand <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>, comfortably work with <a href="https://realpython.com/what-is-pip/">third-party packages</a>, and be familiar with <a href="https://realpython.com/html-css-python/">HTML and CSS</a>.</p>
<p>By the end, you’ll know how to get, parse, and store static data from the Internet, and you’ll be familiar with several useful tools that allow you to go much deeper.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/web-scraping-with-scrapy-and-mongodb-code/">Click here to download the free code</a> that shows you how to gather Web data with Scrapy and MongoDB.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Web Scraping With Scrapy and MongoDB” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/web-scraping-with-scrapy-and-mongodb/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Web Scraping With Scrapy and MongoDB" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Web-Scraping-with-Scrapy-and-MongoDB-Part-1_Watermarked.f246d4df4b36.jpg" style="background: #e5c6aa;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/web-scraping-with-scrapy-and-mongodb/"><span class="my-0 h4">Web Scraping With Scrapy and MongoDB</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of web scraping with Scrapy and MongoDB. You'll revisit how to set up a Scrapy project, build a functional web scraper, extract data from websites, store scraped data in MongoDB, and test and debug your Scrapy web scraper.</p>
    </div>
  </div>

</div>

<h2 id="prepare-the-scraper-scaffolding">Prepare the Scraper Scaffolding<a class="headerlink" href="#prepare-the-scraper-scaffolding" title="Permanent link"></a></h2>
<p>You’ll start by setting up the necessary tools and creating a basic project structure that will serve as the backbone for your scraping tasks.</p>
<p>While working through the tutorial, you’ll build a complete web scraping project, approaching it as an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">ETL (Extract, Transform, Load)</a> process:</p>
<ul>
<li><strong>Extract</strong> data from the website using a Scrapy spider as your <a href="https://en.wikipedia.org/wiki/Web_crawler">web crawler</a>.</li>
<li><strong>Transform</strong> this data, for example by cleaning or validating it, using an item pipeline.</li>
<li><strong>Load</strong> the transformed data into a storage system like MongoDB with an item pipeline.</li>
</ul>
<p>Scrapy provides scaffolding for all of these processes, and you’ll tap into that scaffolding to learn web scraping following the robust structure that Scrapy provides and that numerous enterprise-scale web scraping projects rely on.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In a Scrapy web scraping project, a <strong>spider</strong> is a Python class that defines how to crawl a specific website or a group of websites. It contains the logic for making requests, parsing responses, and extracting the desired data.</p>
</div>
<p>First, you’ll install Scrapy and create a new Scrapy project, then explore the auto-generated project structure to ensure that you’re well-equipped to proceed with building a performant web scraper.</p>
<h3 id="install-the-scrapy-package">Install the Scrapy Package<a class="headerlink" href="#install-the-scrapy-package" title="Permanent link"></a></h3>
<p>To get started with Scrapy, you first need to install it using <code>pip</code>. Create and activate a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> to keep the installation separate from your global Python installation. Then, you can install Scrapy:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>scrapy
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>After the installation is complete, you can verify it by running the <code>scrapy</code> command and viewing the output:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>scrapy
<span class="go">Scrapy 2.11.2 - no active project</span>

<span class="go">Usage:</span>
<span class="go">  scrapy &lt;command&gt; [options] [args]</span>

<span class="go">Available commands:</span>
<span class="go">  bench         Run quick benchmark test</span>
<span class="go">  fetch         Fetch a URL using the Scrapy downloader</span>
<span class="go">  genspider     Generate new spider using pre-defined templates</span>
<span class="go">  runspider     Run a self-contained spider (without creating a project)</span>
<span class="go">  settings      Get settings values</span>
<span class="go">  shell         Interactive scraping console</span>
<span class="hll"><span class="go">  startproject  Create new project</span>
</span><span class="go">  version       Print Scrapy version</span>
<span class="go">  view          Open URL in browser, as seen by Scrapy</span>

<span class="go">  [ more ]      More commands available when run from project directory</span>

<span class="go">Use "scrapy &lt;command&gt; -h" to see more info about a command</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <a href="https://realpython.com/command-line-interfaces-python-argparse/">command-line (CLI)</a> program should display the help text of Scrapy. This confirms that you installed the package correctly. You’ll next run the highlighted <code>startproject</code> command to create a project.</p>
<h3 id="create-a-scrapy-project">Create a Scrapy Project<a class="headerlink" href="#create-a-scrapy-project" title="Permanent link"></a></h3>
<p>Scrapy is built around <strong>projects</strong>. Generally, you’ll create a new project for each web scraping project that you’re working on. In this tutorial, you’ll work on scraping a website called <a href="https://books.toscrape.com/">Books to Scrape</a>, so you can call your project <em>books</em>.</p>
<p>As you may have already identified in the help text, the framework provides a command to create a new project:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>scrapy<span class="w"> </span>startproject<span class="w"> </span>books
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/web-scraping-with-scrapy-and-mongodb/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/web-scraping-with-scrapy-and-mongodb/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-28T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using Astropy for Astronomy With Python</title>
<link>https://realpython.com/courses/astropy-astronomy/</link>
<guid>https://realpython.com/courses/astropy-astronomy/</guid>
<content:encoded><![CDATA[
<div> Astronomy, Python libraries, Astropy, pandas, Matplotlib  
<br />  
通过本课程学习的是初级天文学中的两个问题，使用Python库来处理。您将使用Astropy、NumPy、Matplotlib和pandas来查找行星的合相，以及绘制最佳观看星星的时间。课程涵盖了以下内容：天文学中的合相和最佳观看时间的概念，Python包Astropy的使用，使用pandas处理数据，使用Matplotlib构建图表，以及Python的警告模块。  
<br />  
要点: Astronomy concepts of conjunction and optimal viewing, The Python package Astropy, Using pandas to process data, Building graphs with Matplotlib, Python’s warning module  
<br />  
总结: 本课程介绍了如何使用Python库处理初级天文学中的问题，包括如何查找行星的合相和绘制最佳观看时间的星星。学习了Astropy、NumPy、Matplotlib和pandas等库的使用，以及如何构建图表和处理数据。同时还了解了Python的警告模块。 <div>
<p>This course covers two problems from introductory astronomy to help you play with some Python libraries. You&rsquo;ll use Astropy, NumPy, Matplotlib, and pandas to find planet conjunctions, and graph the best viewing times for a star.</p>
<p><strong>In this course you&rsquo;ll learn about</strong>:</p>
<ul>
<li>Astronomy concepts of conjunction and optimal viewing</li>
<li>The Python package Astropy </li>
<li>Using pandas to process data</li>
<li>Building graphs with Matplotlib</li>
<li>Python&rsquo;s warning module</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-27T14:00:00+00:00</pubDate>
</item>
<item>
<title>How to Install Python on Your System: A Guide</title>
<link>https://realpython.com/installing-python/</link>
<guid>https://realpython.com/installing-python/</guid>
<content:encoded><![CDATA[
<div> Windows, macOS, Linux, Python, installation
<br />
<br />
总结: 本文介绍了如何在Windows、macOS、Linux等操作系统上安装或更新Python，包括检查当前系统是否已安装Python、安装最新版本Python的步骤及选项，以及如何在移动设备上安装Python。同时还介绍了使用在线解释器在浏览器上运行Python的方法。文章提供了对Python最新版本在不同操作系统上安装的详细指导，并强调了在Windows上检查和获取Python的方法。 <div>
<div><p>Installing the latest version of Python on your computer could be a common requirement for you as a Python programmer. Fortunately, you’ll have a multitude of installation options. For example, you can download the <strong>official Python installer</strong> from <a href="https://python.org">Python.org</a>, use your operating system’s package manager or app store, and more.</p>
<p>In this tutorial, you’ll focus on official <a href="https://realpython.com/cpython-source-code-guide/">CPython</a> distributions, which are generally the best option for learning to program with the language. However, you’ll also learn about a few other distributions, like the one available on Homebrew for macOS users.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Check whether a <strong>version</strong> of Python is installed on your system</li>
<li>Install or update to the latest Python on <strong>Windows</strong>, <strong>macOS</strong>, and <strong>Linux</strong></li>
<li>Install Python on <strong>mobile devices</strong> like phones or tablets</li>
<li>Use Python on your browser with <strong>online interpreters</strong></li>
</ul>
<p>This tutorial covers installing the latest Python on the most important platforms or operating systems, such as Windows, macOS, Linux, iOS, and Android. However, it doesn’t cover all the existing Linux distributions, which would be a huge task. Anyway, you’ll find instructions for the most popular distros nowadays.</p>
<p>To get the most out of this tutorial, you should be comfortable using your operating system’s <a href="https://realpython.com/terminal-commands/">terminal</a> or command line.</p>
<div class="alert alert-warning"><p><strong>Free Bonus:</strong> <a class="alert-link" href="">Click here to get a Python Cheat Sheet</a> and learn the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.</p></div>

<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Installation and Setup” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-installation-and-setup/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python 3 Installation &amp; Setup Guide" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-3-Installation--Setup-Guide_Watermarked.62f654dcab67.jpg" style="background: #b9abe6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-installation-and-setup/"><span class="my-0 h4">Python Installation and Setup</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of how to install or update Python on your computer. With this knowledge, you'll be able to set up Python on various operating systems, including Windows, macOS, and Linux.</p>
    </div>
  </div>

</div>

<h2 id="windows-how-to-check-or-get-python">Windows: How to Check or Get Python<a class="headerlink" href="#windows-how-to-check-or-get-python" title="Permanent link"></a></h2>
<p>In this section, you’ll learn to check whether Python is installed on your Windows operating system (OS) and which version you have. You’ll also explore three installation options that you can use on Windows.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In this tutorial, you’ll focus on installing the latest version of Python in your current operating system (OS) rather than on installing multiple versions of Python. If you want to install several versions of Python in your OS, then check out the <a href="https://realpython.com/intro-to-pyenv/">Managing Multiple Python Versions With <code>pyenv</code></a> tutorial. Note that on Windows machines, you’d have to use <a href="https://github.com/pyenv-win/pyenv-win"><code>pyenv-win</code></a> instead of <code>pyenv</code>.</p>
</div>
<p>For a more comprehensive guide on setting up a Windows machine for Python programming, check out <a href="https://realpython.com/python-coding-setup-windows/">Your Python Coding Environment on Windows: Setup Guide</a>.</p>
<h3 id="checking-the-python-version-on-windows">Checking the Python Version on Windows<a class="headerlink" href="#checking-the-python-version-on-windows" title="Permanent link"></a></h3>
<p>To check whether you already have Python on your Windows machine, open a command-line application like <a href="https://realpython.com/python-coding-setup-windows/#installing-powershell-core">PowerShell</a> or the <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab">Windows Terminal</a>.</p>
<p>Follow the steps below to open PowerShell on Windows:</p>
<ol>
<li>Press the <span class="keys"><kbd class="key-windows">Win</kbd></span> key.</li>
<li>Type <code>PowerShell</code>.</li>
<li>Press <span class="keys"><kbd class="key-enter">Enter</kbd></span>.</li>
</ol>
<p>Alternatively, you can right-click the <em>Start</em> button and select <em>Windows PowerShell</em> or <em>Windows PowerShell (Admin)</em>. In some versions of Windows, you’ll find <em>Terminal</em> or <em>Terminal (admin)</em>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about your options for the Windows terminal, check out <a href="https://realpython.com/courses/using-terminal-windows/">Using the Terminal on Windows</a>.</p>
</div>
<p>With the command line open, type in the following command and press the <span class="keys"><kbd class="key-enter">Enter</kbd></span> key:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">python</span> <span class="p">-</span><span class="n">-version</span>
<span class="go">Python 3.x.z</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Using the <code>--version</code> switch will show you the installed version. Note that the <code>3.x.z</code> part is a placeholder here. In your machine, <code>x</code> and <code>z</code> will be numbers corresponding to the specific version you have installed.</p>
<p>Alternatively, you can use the <code>-V</code> switch:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-V</span>
<span class="go">Python 3.x.z</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Using the <code>python -V</code> or <code>python—-version</code> command, you can check whether Python is installed on your system and learn what version you have. If Python isn’t installed on your OS, you’ll get an error message.</p>
<h3 id="knowing-the-python-installation-options-on-windows">Knowing the Python Installation Options on Windows<a class="headerlink" href="#knowing-the-python-installation-options-on-windows" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/installing-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/installing-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-26T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #218: Exploring Robotics and Python Through Electronic Projects</title>
<link>https://realpython.com/podcasts/rpp/218/</link>
<guid>https://realpython.com/podcasts/rpp/218/</guid>
<content:encoded><![CDATA[
<div> Python, robotics, electronics, projects, coding
<br />
Python程序设计与机器人技术结合，通过电子项目激发孩子对编程的兴趣。本周节目中我们与作者Marwan Alsabbagh讨论了他的著作《用Python、CRICKIT和树莓派构建你自己的机器人》。这本书将Python编程与机器人制作、CRICKIT控制板和树莓派相结合，为孩子们提供了学习机器人技术的机会，同时培养了他们对编程的兴趣。建议家长和老师可以通过这样的实践项目，激发孩子们对编程和科技的热情，让他们在实践中体会到编程的乐趣。总结：这本书提供了一种创新的学习方式，将Python编程与机器人制作相结合，帮助孩子们在实践中掌握编程技能，培养他们对科技的兴趣。 <div>
<p>Are you interested in learning robotics with Python? Can physical electronics-based projects grow a child's interest in coding? This week on the show, we speak with author Marwan Alsabbagh about his book "Build Your Own Robot - Using Python, CRICKIT, and Raspberry Pi."</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-23T12:00:00+00:00</pubDate>
</item>
<item>
<title>Primer on Jinja Templating</title>
<link>https://realpython.com/primer-on-jinja-templating/</link>
<guid>https://realpython.com/primer-on-jinja-templating/</guid>
<content:encoded><![CDATA[
<div> Jinja, templates, Python, web development, Flask<br /><br />总结: 本文介绍了如何在Python的全栈Web开发中使用Jinja模板引擎。Jinja可以帮助构建丰富的模板，驱动Python Web应用程序的前端。无需使用Web框架即可体验Jinja的功能，可以创建具有程序内容的文本文件。通过本教程，学习了安装Jinja模板引擎、创建模板、在Flask中呈现模板、使用for循环和条件语句、嵌套Jinja模板、使用过滤器修改变量、使用宏添加前端功能等内容。完成后会有互动测验来检验对Jinja模板的理解。 <div>
<div><p>Templates are an essential ingredient in full-stack web development.
With <strong>Jinja</strong>, you can build rich templates that power the front end of your Python web applications.</p>
<p>But you don’t need to use a web framework to experience the capabilities of Jinja.
When you want to create text files with programmatic content, Jinja can help you out.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Install the Jinja <strong>template engine</strong></li>
<li>Create your first Jinja <strong>template</strong></li>
<li>Render a Jinja template in <strong>Flask</strong></li>
<li>Use <strong><code>for</code> loops</strong> and <strong>conditional statements</strong> with Jinja</li>
<li><strong>Nest</strong> Jinja templates</li>
<li>Modify variables in Jinja with <strong>filters</strong></li>
<li>Use <strong>macros</strong> to add functionality to your front end</li>
</ul>
<p>You’ll start by using Jinja on its own to cover the basics of Jinja templating.
Later you’ll build a basic Flask web project with two pages and a navigation bar to leverage the full potential of Jinja.</p>
<p>Throughout the tutorial, you’ll build an example app that showcases some of Jinja’s wide range of features. To see what it’ll do, skip ahead to <a href="#mark-the-current-page">the final section</a>.</p>
<p>You can also find the full source code of the web project by clicking on the link below:</p>
<div class="alert alert-warning">
<p><strong>Source Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/jinja-primer-code/">Click here to download the source code</a> that you’ll use to explore Jinja’s capabilities.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Primer on Jinja Templating” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/primer-on-jinja-templating/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Jinja Templating Engine" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Primer-on-Jinja-Templating_Watermarked.ae90a187545f.jpg" style="background: #e6c7ab;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/primer-on-jinja-templating/"><span class="my-0 h4">Primer on Jinja Templating</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Jinja templating. Jinja is a powerful tool for building rich templates in Python web applications, and it can also be used to create text files with programmatic content.</p>
    </div>
  </div>

</div>

<p>This tutorial is for you if you want to learn more about the Jinja template language or if you’re getting started with Flask.</p>
<h2 id="get-started-with-jinja">Get Started With Jinja<a class="headerlink" href="#get-started-with-jinja" title="Permanent link"></a></h2>
<p><a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja</a> is not only a <a href="https://en.wikipedia.org/wiki/Jinja,_Uganda">city in the Eastern Region of Uganda</a> and a <a href="https://en.wikipedia.org/wiki/Shinto_shrine">Japanese temple</a>, but also a <strong>template engine</strong>.
You commonly use <a href="https://en.wikipedia.org/wiki/Template_processor">template engines</a> for <strong>web templates</strong> that receive dynamic content from the <strong>back end</strong> and render it as a <strong>static page</strong> in the front end.</p>
<p>But you can use Jinja without a web framework running in the background.
That’s exactly what you’ll do in this section.
Specifically, you’ll install Jinja and build your first templates.</p>
<h3 id="install-jinja">Install Jinja<a class="headerlink" href="#install-jinja" title="Permanent link"></a></h3>
<p>Before exploring any new package, it’s a good idea to create and activate a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a>.
That way, you’re installing any project dependencies in your project’s virtual environment instead of system-wide.</p>
<p>Select your <strong>operating system</strong> below and use your platform-specific command to set up a virtual environment:</p>
<ul class="nav nav-tabs justify-content-end js-platform-widget-tabs">

  <li class="nav-item mb-0 js-platform-widget-tab-windows">
    <a class="nav-link link-unstyled text-body active small" href="#windows-1" id="windows-tab-1"><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Windows</a>
  </li>




  <li class="nav-item mb-0 js-platform-widget-tab-linuxmacos">
    <a class="nav-link link-unstyled text-body small" href="#linux-macos-1" id="macos-tab-1"><span class="icon baseline text-muted"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span><span class="icon baseline text-muted mr-1"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Linux + macOS</a>
  </li>

</ul>
<div class="tab-content mt-2 mb-0 js-platform-widget-content">
<div class="tab-pane fade show active" id="windows-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Windows PowerShell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">PS&gt; </span><span class="n">python</span> <span class="n">-m</span> <span class="n">venv</span> <span class="n">venv</span>
<span class="gp">PS&gt; </span><span class="p">.\</span><span class="n">venv</span><span class="p">\</span><span class="n">Scripts</span><span class="p">\</span><span class="n">activate</span>
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">PS&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
<div class="tab-pane fade " id="linux-macos-1">
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv
<span class="gp">$ </span><span class="nb">source</span><span class="w"> </span>venv/bin/activate
<span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div>
</div>
<p>With the above commands, you create and activate a virtual environment named <code>venv</code> by using Python’s built-in <code>venv</code> module.
The parentheses (<code>()</code>) surrounding <code>venv</code> in front of the prompt indicate that you’ve successfully activated the virtual environment.</p>
<p>After you’ve created and activated your virtual environment, it’s time to install Jinja with <a href="https://realpython.com/what-is-pip/"><code>pip</code></a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>Jinja2
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Don’t forget the <code>2</code> at the end of the package name.
Otherwise, you’ll install an <a href="https://pypi.org/project/Jinja/">old version</a> that isn’t compatible with Python 3.</p>
<p>It’s worth noting that although the current major version is actually greater than <code>2</code>, the package that you’ll install is nevertheless called <code>Jinja2</code>.
You can verify that you’ve installed a modern version of Jinja by running <code>pip list</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>list
<span class="go">Package    Version</span>
<span class="go">---------- -------</span>
<span class="go">Jinja2     3.x</span>
<span class="go">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To make things even more confusing, after installing Jinja with an uppercase <code>J</code>, you have to import it with a lowercase <code>j</code> in Python.
Try it out by opening the <a href="https://realpython.com/interacting-with-python/">interactive Python interpreter</a> and running the following commands:</p>
</div><h2><a href="https://realpython.com/primer-on-jinja-templating/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/primer-on-jinja-templating/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-21T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Primer on Jinja Templating</title>
<link>https://realpython.com/quizzes/primer-on-jinja-templating/</link>
<guid>https://realpython.com/quizzes/primer-on-jinja-templating/</guid>
<content:encoded><![CDATA[
<div> Jinja, Python, 模板, web 应用, 文本文件
<br /><br />总结:
Jinja 是 Python 中强大的模板工具，用于在 web 应用中构建丰富的模板，也可以用于创建具有程序化内容的文本文件。Jinja 可以帮助我们在 Python 网络应用程序中快速生成动态内容，提高开发效率。该工具可以利用模板来自动生成文本文件，实现内容的自定义和个性化。通过学习 Jinja 模板语法和用法，可以更好地理解和掌握 Python 中的模板化技术。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of Jinja templating.
Jinja is a powerful tool for building rich templates in Python web applications,
and it can also be used to create text files with programmatic content.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-21T12:00:00+00:00</pubDate>
</item>
<item>
<title>Exploring Astrophysics in Python With pandas and Matplotlib</title>
<link>https://realpython.com/courses/astrophysics-pandas-matplotlib/</link>
<guid>https://realpython.com/courses/astrophysics-pandas-matplotlib/</guid>
<content:encoded><![CDATA[
<div> Astro-physics, Python, pandas, Matplotlib, datascience  
Astro-physics的入门知识、pandas中的数据框架操作、科学单位的代码编写、Matplotlib中的信息可视化。  

<br /><br />总结:  
本课程利用三个常见的初级天文物理问题在Python中进行演示。在学习过程中，您将了解一些天文知识，以及如何使用各种数据科学库，如NumPy、Matplotlib、pandas和pint。
您将学习以下内容：
- 初级天文物理主题
- 在pandas中操作数据框
- 编写使用科学单位的代码
- 使用Matplotlib可视化信息 <div>
<p>This course uses three problems often covered in introductory astro-physics courses to play in Python. Along the way you&rsquo;ll learn some astronomy, and how to use a variety of datascience libraries like NumPy, Matplotlib, pandas, and pint.</p>
<p><strong>In this video course you&rsquo;ll learn about</strong>:</p>
<ul>
<li>Introductory astrophysics topics</li>
<li>Working with dataframes in pandas</li>
<li>Writing code that uses scientific units</li>
<li>Visualizing information with Matplotlib</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-20T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Classes: The Power of Object-Oriented Programming</title>
<link>https://realpython.com/python-classes/</link>
<guid>https://realpython.com/python-classes/</guid>
<content:encoded><![CDATA[
<div> classes, attributes, methods, inheritance, hierarchies

Python中的类是面向对象编程的重要组成部分，使用class关键字来定义类。类包括属性和方法，属性用于存储数据，方法提供行为。通过继承可以建立类的层次结构，实现代码重用。可以使用类来建模现实世界的对象，例如人、动物、车辆等。类也可以用于构建虚拟对象，如Web服务器、聊天机器人等。定义类时，需要使用class关键字，然后在类体中定义属性和方法。初始化方法__init__()用于设置对象的初始值。通过学习本教程，你将了解如何利用Python的类来解决复杂的编程问题。


<br /><br />
总结: 
- Python中的类使用class关键字来定义，包括属性和方法。
- 属性用于存储数据，方法提供行为。
- 可以通过继承建立类的层次结构，实现代码重用。
- 类可以用于建模现实世界的对象，也可以用于构建虚拟对象。
- 定义类时需要使用class关键字，并在类体中定义属性和方法。 <div>
<div><p>Python supports the <strong>object-oriented</strong> programming paradigm through <strong>classes</strong>. They provide an elegant way to define reusable pieces of code that encapsulate data and behavior in a single entity. With classes, you can quickly and intuitively model real-world objects and solve complex problems.</p>
<p>If you’re new to classes, need to refresh your knowledge, or want to dive deeper into them, then this tutorial is for you!</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Define Python classes with the <strong><code>class</code> keyword</strong></li>
<li>Add state to your classes with <strong>class</strong> and <strong>instance attributes</strong></li>
<li>Provide <strong>behavior</strong> to your classes with <strong>methods</strong></li>
<li>Use <strong>inheritance</strong> to build hierarchies of classes</li>
<li>Provide <strong>interfaces</strong> with <strong>abstract classes</strong></li>
</ul>
<p>To get the most out of this tutorial, you should know about Python <a href="https://realpython.com/python-variables/">variables</a>, <a href="https://realpython.com/python-data-types/">data types</a>, and <a href="https://realpython.com/defining-your-own-python-function/">functions</a>. Some experience with <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming (OOP)</a> is also a plus. Don’t worry if you’re not an OOP expert yet. In this tutorial, you’ll learn the key concepts that you need to get started and more. You’ll also write several practical examples to help reinforce your knowledge of Python classes.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-classes-code/">Click here to download your free sample code</a> that shows you how to build powerful object blueprints with classes in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Classes - The Power of Object-Oriented Programming” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-classes-oop/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Classes: The Power of Object-Oriented Programming" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Class-Concepts-Object-Oriented-Programming-in-Python_Watermarked.6cf327c51434.jpg" style="background: #aadfe5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-classes-oop/"><span class="my-0 h4">Python Classes - The Power of Object-Oriented Programming</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python classes. With this knowledge, you'll be able to define reusable pieces of code that encapsulate data and behavior in a single entity, model real-world objects, and solve complex problems.</p>
    </div>
  </div>

</div>

<h2 id="getting-started-with-python-classes">Getting Started With Python Classes<a class="headerlink" href="#getting-started-with-python-classes" title="Permanent link"></a></h2>
<p>Python is a <a href="https://en.wikipedia.org/wiki/Programming_paradigm">multiparadigm</a> programming language that supports <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming (OOP)</a> through classes that you can define with the <code>class</code> keyword. You can think of a class as a piece of code that specifies the <strong>data</strong> and <strong>behavior</strong> that represent and model a particular type of object.</p>
<p>What is a class in Python? A common analogy is that a class is like the blueprint for a house. You can use the blueprint to create several houses and even a complete neighborhood. Each concrete house is an <strong>object</strong> or <strong>instance</strong> that’s derived from the blueprint.</p>
<p>Each instance can have its own properties, such as color, owner, and interior design. These properties carry what’s commonly known as the object’s <a href="https://en.wikipedia.org/wiki/State_(computer_science)">state</a>. Instances can also have different behaviors, such as locking the doors and windows, opening the garage door, turning the lights on and off, watering the garden, and more.</p>
<p>In OOP, you commonly use the term <strong>attributes</strong> to refer to the properties or data associated with a specific object of a given class. In Python, attributes are <a href="https://realpython.com/python-variables/">variables</a> defined inside a class with the purpose of storing all the required data for the class to work.</p>
<p>Similarly, you’ll use the term <strong>methods</strong> to refer to the different behaviors that objects will show. Methods are functions that you define within a class. These functions typically operate on or with the attributes of the underlying instance or class. Attributes and methods are collectively referred to as <strong>members</strong> of a class or object.</p>
<p>You can write classes to model the real world. These classes will help you better organize your code and solve complex programming problems.</p>
<p>For example, you can use classes to create objects that emulate people, animals, vehicles, books, buildings, cars, or other objects. You can also model virtual objects, such as a web server, <a href="https://realpython.com/directory-tree-generator-python/#coding-the-high-level-directorytree-class">directory tree</a>, chatbot, file manager, and more.</p>
<p>Finally, you can use classes to build <strong>class hierarchies</strong>. This way, you’ll promote code reuse and remove repetition throughout your codebase.</p>
<p>In this tutorial, you’ll learn a lot about classes and all the cool things that you can do with them. To kick things off, you’ll start by defining your first class in Python. Then you’ll dive into other topics related to instances, attributes, and methods.</p>
<h3 id="defining-a-class-in-python">Defining a Class in Python<a class="headerlink" href="#defining-a-class-in-python" title="Permanent link"></a></h3>
<p>To define a class, you need to use the <code>class</code> keyword followed by the class name and a colon, just like you’d do for other <a href="https://docs.python.org/3/reference/compound_stmts.html">compound statements</a> in Python. Then you must define the class body, which will start at the next indentation level:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python Syntax</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">class</span> <span class="nc">ClassName</span><span class="p">:</span>
    <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In a class’s body, you can define attributes and methods as needed. As you already learned, attributes are variables that hold the class data, while methods are functions that provide behavior and typically act on the class data.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In Python, the body of a given class works as a <a href="https://realpython.com/python-namespaces-scope/">namespace</a> where attributes and methods live. You can only access those attributes and methods through the class or its objects.</p>
</div>
<p>As an example of how to define attributes and methods, say that you need a <code>Circle</code> class to model different circles in a drawing application. Initially, your class will have a single attribute to hold the radius. It’ll also have a method to calculate the circle’s area:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">circle.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">math</span>

<span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>

    <span class="k">def</span> <span class="nf">calculate_area</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code snippet, you define <code>Circle</code> using the <code>class</code> keyword. Inside the class, you write two methods. The <code>.__init__()</code> method has a special meaning in Python classes. This method is known as the object <a href="https://realpython.com/python-class-constructor/#object-initialization-with-__init__">initializer</a> because it defines and sets the initial values for the object’s attributes. You’ll learn more about this method in the <a href="#instance-attributes">Instance Attributes</a> section.</p>
</div><h2><a href="https://realpython.com/python-classes/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-classes/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-19T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #217: Packaging Data Analyses &amp; Using pandas GroupBy</title>
<link>https://realpython.com/podcasts/rpp/217/</link>
<guid>https://realpython.com/podcasts/rpp/217/</guid>
<content:encoded><![CDATA[
<div> Python、数据分析项目、最佳实践、包中心方法、优势<br />
数据分析项目在Python中的最佳实践包括组织良好的代码结构、使用版本控制、编写清晰的文档、以及进行单元测试等。采用包中心方法进行数据科学可以提高代码的复用性、可维护性和可扩展性，使得数据分析项目更加规范和高效。Christopher Trudeau本周再次带来PyCoder's Weekly的文章和项目，分享了相关主题和实践经验。<br /><br />总结: 数据分析项目可以通过遵循最佳实践和采用包中心方法来提高效率和质量，Christopher Trudeau分享了相关经验和资源。 <div>
<p>What are the best practices for organizing data analysis projects in Python? What are the advantages of a more package-centric approach to data science? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-16T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Web Scraping With Scrapy and MongoDB</title>
<link>https://realpython.com/quizzes/web-scraping-with-scrapy-and-mongodb/</link>
<guid>https://realpython.com/quizzes/web-scraping-with-scrapy-and-mongodb/</guid>
<content:encoded><![CDATA[
<div> Scrapy, web scraper, selectors, MongoDB, test<br />
<br />
提到在本文中，我们将测试对Scrapy项目的理解。我们将学习如何设置Scrapy项目，构建一个功能性的网络爬虫，使用选择器从网站提取数据，将抓取数据存储在MongoDB数据库中，以及测试和调试Scrapy网络爬虫。总结: 通过本文，您将学习设置Scrapy项目、构建网络爬虫、使用选择器提取数据、将数据存储在MongoDB中，并测试和调试网络爬虫。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/web-scraping-with-scrapy-and-mongodb/">Web Scraping with Scrapy and MongoDB</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to set up a Scrapy project, build a functional web scraper, extract data from websites using selectors, store scraped data in a MongoDB database, and test and debug your Scrapy web scraper.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-16T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: The Walrus Operator: Python's Assignment Expressions</title>
<link>https://realpython.com/quizzes/python-walrus-operator/</link>
<guid>https://realpython.com/quizzes/python-walrus-operator/</guid>
<content:encoded><![CDATA[
<div> Python 3.8, assignment expressions, operator, variables, values
<br />
Python 3.8引入的赋值表达式操作符可在表达式中用于给变量赋值。这个操作符使得在表达式中进行赋值操作更加简洁和方便。通过这个操作符，可以在一行代码中同时完成赋值和表达式操作，提高代码的可读性和简洁性。Python 3.8版本后提供了这一特性，使得代码编写更加高效和易于理解。总结: 使用Python 3.8的赋值表达式操作符可以简洁、高效地给变量赋值，提升代码的可读性和简洁性。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of the <a href="https://realpython.com/python-walrus-operator/">Python Walrus Operator</a>. This operator, used for assignment expressions, was introduced in Python 3.8 and can be used to assign values to variables as part of an expression.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-14T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Walrus Operator: Python's Assignment Expressions</title>
<link>https://realpython.com/python-walrus-operator/</link>
<guid>https://realpython.com/python-walrus-operator/</guid>
<content:encoded><![CDATA[
<div> assignment expressions, walrus operator, Python 3.8, PEP 572, syntax update
assignment expressions的引入是Python 3.8版本中的最大变化，引入了walrus operator（海象操作符）的新语法。这篇文章介绍了walrus operator的意义以及用法，让你了解为什么需要这种语法更新以及如何避免重复的代码。此外，还介绍了PEP 572中描述了assignment expressions的动机和语法细节，以及walrus operator的实现和演变过程。总结:assignment expressions的引入是Python 3.8的一项重大变化，通过PEP 572提出的walrus operator（海象操作符）更新了Python语法，使得代码更加简洁和高效。 <div>
<div><p>Each new version of Python adds new features to the language. Back when Python 3.8 was released, the biggest change was the addition of <strong>assignment expressions</strong>. Specifically, the <code>:=</code> operator gave you a new syntax for assigning variables in the middle of expressions. This operator is colloquially known as the <strong>walrus operator</strong>.</p>
<p>This tutorial is an in-depth introduction to the walrus operator. You’ll learn some of the motivations for the syntax update and explore examples where assignment expressions can be useful.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Identify <strong>the walrus operator</strong> and understand its meaning</li>
<li>Understand <strong>use cases</strong> for the walrus operator</li>
<li><strong>Avoid repetitive code</strong> by using the walrus operator</li>
<li>Convert between code using the walrus operator and code using <strong>other assignment methods</strong></li>
<li>Use appropriate <strong>style</strong> in your assignment expressions</li>
</ul>
<p>Note that all walrus operator examples in this tutorial require <a href="https://realpython.com/python38-new-features/">Python 3.8</a> or later to work.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-walrus-operator-code/">Click here to download the free sample code</a> that shows you how to use Python’s walrus operator.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “The Walrus Operator: Python's Assignment Expressions” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-walrus-operator/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="The Walrus Operator: Python's Assignment Expressions" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/The-Walrus-Operator-in-Python-3.8-UPDATE_Watermarked.d7eee1fde3ea.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-walrus-operator/"><span class="my-0 h4">The Walrus Operator: Python's Assignment Expressions</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the Python Walrus Operator. This operator was introduced in Python 3.8, and understanding it can help you write more concise and efficient code.</p>
    </div>
  </div>

</div>

<h2 id="walrus-operator-fundamentals">Walrus Operator Fundamentals<a class="headerlink" href="#walrus-operator-fundamentals" title="Permanent link"></a></h2>
<p>First, look at some different terms that programmers use to refer to this new syntax. You’ve already seen a few in this tutorial.</p>
<p>The <code>:=</code> operator is officially known as the <strong>assignment expression operator</strong>. During early discussions, it was dubbed the <strong>walrus operator</strong> because the <code>:=</code> syntax resembles the eyes and tusks of a <a href="https://en.wikipedia.org/wiki/Walrus">walrus</a> lying on its side. You may also see the <code>:=</code> operator referred to as the <strong>colon equals operator</strong>. Yet another term used for assignment expressions is <strong>named expressions</strong>.</p>
<h3 id="hello-walrus">Hello, Walrus!<a class="headerlink" href="#hello-walrus" title="Permanent link"></a></h3>
<p>To get a first impression of what assignment expressions are all about, start your <a href="https://realpython.com/python-repl/">REPL</a> and play around with the following code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="gp">&gt;&gt;&gt; </span><span class="n">walrus</span> <span class="o">=</span> <span class="kc">False</span>
<span class="linenos"> 2</span><span class="gp">&gt;&gt;&gt; </span><span class="n">walrus</span>
<span class="linenos"> 3</span><span class="go">False</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span><span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">walrus</span> <span class="o">:=</span> <span class="kc">True</span><span class="p">)</span>
<span class="linenos"> 6</span><span class="go">True</span>
<span class="linenos"> 7</span><span class="gp">&gt;&gt;&gt; </span><span class="n">walrus</span>
<span class="linenos"> 8</span><span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Line 1 shows a traditional <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements">assignment statement</a> where the value <code>False</code> is assigned to <code>walrus</code>. Next, on line 5, you use an assignment expression to assign the value <code>True</code> to <code>walrus</code>. After both lines 1 and 5, you can refer to the assigned values by using the <a href="https://realpython.com/python-variables/">variable</a> name <code>walrus</code>.</p>
<p>You might be wondering why you’re using parentheses on line 5, and you’ll learn why the parentheses are needed <a href="#walrus-operator-syntax">later on in this tutorial</a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> A <strong>statement</strong> in Python is a unit of code. An <strong>expression</strong> is a special statement that can be evaluated to some value.</p>
<p>For example, <code>1 + 2</code> is an expression that evaluates to the value <code>3</code>, while <code>number = 1 + 2</code> is an assignment statement that doesn’t evaluate to a value. Although running the statement <code>number = 1 + 2</code> doesn’t evaluate to <code>3</code>, it does <em>assign</em> the value <code>3</code> to <code>number</code>.</p>
<p>In Python, you often see <a href="https://docs.python.org/3/reference/simple_stmts.html">simple statements</a> like <a href="https://realpython.com/python-return-statement/"><code>return</code> statements</a> and <a href="https://realpython.com/python-import/"><code>import</code> statements</a>, as well as <a href="https://docs.python.org/3/reference/compound_stmts.html">compound statements</a> like <a href="https://realpython.com/python-conditional-statements/"><code>if</code> statements</a> and <a href="https://realpython.com/defining-your-own-python-function/">function definitions</a>. These are all statements, not expressions.</p>
</div>
<p>There’s a subtle—but important—difference between the two types of assignments with the <code>walrus</code> variable. An assignment expression returns the value, while a traditional assignment doesn’t. You can see this in action when the REPL doesn’t print any value after <code>walrus = False</code> on line 1 but prints out <code>True</code> after the assignment expression on line 5.</p>
<p>You can see another important aspect about walrus operators in this example. Though it might look new, the <code>:=</code> operator does <em>not</em> do anything that isn’t possible without it. It only makes certain constructs more convenient and can sometimes communicate the intent of your code more clearly.</p>
<p>Now you have a basic idea of what the <code>:=</code> operator is and what it can do. It’s an operator used in assignment expressions, which can return the value being assigned, unlike traditional assignment statements. To get deeper and really learn about the walrus operator, continue reading to see where you should and shouldn’t use it.</p>
<h3 id="implementation">Implementation<a class="headerlink" href="#implementation" title="Permanent link"></a></h3>
<p>Like most new features in Python, assignment expressions were introduced through a <strong>Python Enhancement Proposal</strong> (PEP). <a href="https://www.python.org/dev/peps/pep-0572">PEP 572</a> describes the motivation for introducing the walrus operator, the details of the syntax, and examples where the <code>:=</code> operator can be used to improve your code.</p>
<p>This PEP was <a href="https://mail.python.org/archives/list/python-ideas@python.org/message/H64ZNZ3T4RRJKMXR6UFNX3FK62IRPVOT/">originally</a> written by <a href="https://twitter.com/Rosuav">Chris Angelico</a> in February 2018. Following some heated discussion, PEP 572 was <a href="https://mail.python.org/archives/list/python-dev@python.org/message/J6EBK6ZEHZXTVWYSUO5N5XCUS45UQSB3/">accepted</a> by <a href="https://twitter.com/gvanrossum">Guido van Rossum</a> in July 2018.</p>
<p>Since then, Guido <a href="https://mail.python.org/archives/list/python-committers@python.org/message/GQONAGWBBFRHVRUPU7RNBM75MHKGUFJN/">announced</a> that he was stepping down from his role as <a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life">benevolent dictator for life (BDFL)</a>. Since early 2019, the Python language has been <a href="https://www.python.org/dev/peps/pep-0013/">governed</a> by an elected <a href="https://realpython.com/python38-new-features/#the-python-steering-council">steering council</a> instead.</p>
<p>The walrus operator was implemented by <a href="https://realpython.com/interview-emily-morehouse/">Emily Morehouse</a>, and made available in the first <a href="https://www.python.org/downloads/release/python-380a1/">alpha release</a> of Python 3.8.</p>
<h3 id="motivation">Motivation<a class="headerlink" href="#motivation" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/python-walrus-operator/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-walrus-operator/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-14T14:00:00+00:00</pubDate>
</item>
<item>
<title>Sorting Dictionaries in Python: Keys, Values, and More</title>
<link>https://realpython.com/courses/sorting-dictionaries-keys-values-more/</link>
<guid>https://realpython.com/courses/sorting-dictionaries-keys-values-more/</guid>
<content:encoded><![CDATA[
<div> sorted()函数, dictionary views, 字典转换为列表, 指定排序键, 字典解析, 备用数据结构
<br /><br />
总结: 在本视频课程中，我们学习了如何使用sorted()函数对字典进行排序。通过使用字典视图来进行迭代，了解了字典在排序过程中如何转换为列表。学会了如何通过值、键或嵌套属性来指定排序键进行排序。同时复习了字典解析和使用dict()构造函数来重建字典。最后考虑了备用数据结构来存储键值数据。通过这些内容，我们可以更好地处理和排序Python的字典数据。 <div>
<p>You&rsquo;ve got a <a href="https://realpython.com/python-dicts/">dictionary</a>, but you&rsquo;d like to sort the key-value pairs. Perhaps you&rsquo;ve tried passing a dictionary to the <code>sorted()</code> <a href="https://realpython.com/defining-your-own-python-function/">function</a> but didn&rsquo;t receive the results you expected. In this video course, you&rsquo;ll go over everything you need to know to sort dictionaries in Python.</p>
<p><strong>In this video course, you&rsquo;ll</strong>:</p>
<ul>
<li>Review how to use the <strong><code>sorted()</code></strong> function</li>
<li>Learn how to get dictionary <strong>views</strong> to <strong>iterate</strong> over</li>
<li>Understand how dictionaries are cast to <strong>lists</strong> during sorting</li>
<li>Learn how to specify a <strong>sort key</strong> to sort a dictionary by value, key, or nested attribute</li>
<li>Review dictionary <strong>comprehensions</strong> and the <code>dict()</code> <strong>constructor</strong> to rebuild your dictionaries</li>
<li>Consider alternative <strong>data structures</strong> for your <strong>key-value data</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-13T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News Roundup: August 2024</title>
<link>https://realpython.com/python-news-august-2024/</link>
<guid>https://realpython.com/python-news-august-2024/</guid>
<content:encoded><![CDATA[
<div> Python, 3.13.0b4, 3.13.0rc1, PSF, PyOhio 2024

Python语言的核心开发团队发布了3.13.0b4和3.13.0rc1版本，其中3.13.0b4标志着测试阶段的结束。该版本引入了改进的交互式解释器，提供了许多新功能，如带颜色的提示、保留历史记录的多行编辑等。此外，Python软件基金会（PSF）也发布了令人振奋的消息。PyOhio 2024和整个Python生态系统也有了重大进展。总的来说，Python社区有很多激动人心的新闻，让人期待未来的发展。<br /><br />总结: Python 3.13版本的测试阶段结束，引入了改进的交互式解释器，PSF发布了重要消息，PyOhio 2024和Python生态系统有了进步。 <div>
<div><p>In July, there was some exciting news for the Python community as the Python core development team released versions 3.13.0b4 and 3.13.0rc1 of the language. The 3.13.0b4 release marked the end of the beta phase and paved the way for the release candidate phase.</p>
<p>Note that 3.13.0rc1 is a pre-release, so you shouldn’t use it for production environments. However, it provides a great way to try some new and exciting language features.</p>
<p>There’s also great some news from the Python Software Foundation, PyOhio 2024, and the Python ecosystem.</p>
<p>Let’s dive into the most exciting <strong>Python news</strong> from last month!</p>
<h2 id="python-3130b4-and-3130rc1">Python 3.13.0b4 and 3.13.0rc1<a class="headerlink" href="#python-3130b4-and-3130rc1" title="Permanent link"></a></h2>
<p>Python 3.13 has reached its fourth beta release, marking the end of the beta phase. Beta releases serve to test new features and bug fixes. However, it’s important to note that this is a preview release and it isn’t recommended for use in production environments.</p>
<p>If you’re a library maintainer, you’re encouraged to test your code with this new version so you can prepare it to support the latest features of the language.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about pre-releases, check out the <a href="https://realpython.com/python-pre-release/">How Can You Install a Pre-Release Version of Python?</a> tutorial.</p>
</div>
<p>One of the most significant new features of Python 3.13 is the improved interactive interpreter or <a href="https://realpython.com/python-repl/">REPL</a>, which now provides several cool features, including:</p>
<ul>
<li>Colorized prompts</li>
<li>Multiline editing with history preservation</li>
<li>Interactive help browsing with <span class="keys"><kbd class="key-f1">F1</kbd></span> and a separate command history</li>
<li>History browsing with <span class="keys"><kbd class="key-f2">F2</kbd></span></li>
<li>Paste mode for larger blocks of code with <span class="keys"><kbd class="key-f3">F3</kbd></span></li>
<li>REPL-specific commands like <code>help</code>, <code>exit</code>, and <code>quit</code> without the call parentheses</li>
</ul>
<p>This is exciting news! The standard REPL up until Python 3.13 was lacking, and sometimes it was necessary to install a third-party tool like <a href="https://realpython.com/bpython-alternative-python-repl/">bpython</a> or <a href="https://realpython.com/ipython-interactive-python-shell/">IPython</a> to compensate.</p>
<p>Again, with this release, the beta phase has officially ended, and the first release candidate—3.13.0rc1—is considered the penultimate release preview. In this release candidate phase, only bug fixes are allowed.</p>
<p>The second candidate, which is the last planned release preview, should be out on September 3, 2024, and the official release of 3.13 should be ready on October 1, 2024. Only more excitement lies ahead! </p>
<h2 id="the-python-software-foundation-psf-shares-great-news">The Python Software Foundation (PSF) Shares Great News<a class="headerlink" href="#the-python-software-foundation-psf-shares-great-news" title="Permanent link"></a></h2>
</div><h2><a href="https://realpython.com/python-news-august-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-august-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-12T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #216: Learning Through Building the Black Python Devs Community</title>
<link>https://realpython.com/podcasts/rpp/216/</link>
<guid>https://realpython.com/podcasts/rpp/216/</guid>
<content:encoded><![CDATA[
<div> Black Python Devs, International organization, Hurdles, Empower others, Sharing responsibilities
<br />
国际组织，成立障碍，共享责任，赋予他人力量，Black Python Devs
<br /><br />总结: 本期节目中，我们与Jay Miller讨论了Black Python Devs，这是一个国际组织。在创立国际组织时，需要克服一些障碍，如文化差异、法律规定等。通过分享责任，可以赋予社区中的其他人力量，从而建立合作和团队精神。Black Python Devs致力于通过Python技巧和知识传播，为其他开发者提供帮助和支持。 <div>
<p>What hurdles must be cleared when starting an international organization? How do you empower others in a community by sharing responsibilities? This week on the show, we speak with Jay Miller about Black Python Devs.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-09T12:00:00+00:00</pubDate>
</item>
<item>
<title>Asynchronous Iterators and Iterables in Python</title>
<link>https://realpython.com/python-async-iterators/</link>
<guid>https://realpython.com/python-async-iterators/</guid>
<content:encoded><![CDATA[
<div> async iterators, async iterables, Python, .__aiter__(), .__anext__()

异步迭代器和可迭代对象是Python中的重要概念。异步迭代器用于控制异步for循环，而异步可迭代对象是可以使用异步for循环进行迭代的对象。它们允许您在不阻塞代码的情况下迭代异步对象，从而实现异步执行不同的任务。异步迭代器要实现.__aiter__()和.__anext__()方法，返回的下一个对象必须是awaitable对象。在迭代器到达末尾时，要通过引发StopAsyncIteration异常来结束异步迭代过程。通过实现异步函数，可以快速地创建等待对象。整个概念中，异步迭代器和可迭代对象在异步编程中扮演着重要角色，使得在Python中进行异步迭代变得更加灵活。<br /><br />总结: 异步迭代器和异步可迭代对象是Python中的重要概念，它们允许在异步编程中进行迭代操作。异步迭代器必须实现.__aiter__()和.__anext__()方法，返回的对象必须是awaitable对象。在异步编程中，异步迭代器和可迭代对象支持异步for循环，使得异步任务的执行更加灵活和高效。 <div>
<div><p>When you write asynchronous code in Python, you’ll likely need to create asynchronous iterators and iterables at some point. Asynchronous iterators are what Python uses to control <code>async for</code> loops, while asynchronous iterables are objects that you can iterate over using <code>async for</code> loops.</p>
<p>Both tools allow you to iterate over awaitable objects without blocking your code. This way, you can perform different tasks asynchronously.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Learn what <strong>async iterators</strong> and <strong>iterables</strong> are in Python</li>
<li>Create async <strong>generator expressions</strong> and <strong>generator iterators</strong></li>
<li>Code async iterators and iterables with the <strong><code>.__aiter__()</code></strong> and <strong><code>.__anext__()</code></strong> methods</li>
<li>Use async iterators in <strong>async loops</strong> and <strong>comprehensions</strong></li>
</ul>
<p>To get the most out of this tutorial, you should know the basics of Python’s <a href="https://realpython.com/python-iterators-iterables/">iterators and iterables</a>. You should also know about Python’s <a href="https://realpython.com/python-async-features/">asynchronous features</a> and <a href="https://realpython.com/async-io-python/">tools</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-async-iterators/">Click here to download the free sample code</a> that you’ll use to learn about asynchronous iterators and iterables in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Asynchronous Iterators and Iterables in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-async-iterators/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Asynchronous Iterators and Iterables in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Asynchronous-Iterators-and-Iterables-in-Python_Watermarked.c7ed7ce35df8.jpg" style="background: #b9abe6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-async-iterators/"><span class="my-0 h4">Asynchronous Iterators and Iterables in Python</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of how to create and use Python async iterators and iterables in the context of asynchronous code.</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-async-iterators-and-iterables-in-python">Getting to Know Async Iterators and Iterables in Python<a class="headerlink" href="#getting-to-know-async-iterators-and-iterables-in-python" title="Permanent link"></a></h2>
<p>Iterators and iterables are fundamental components in Python. You’ll use them in almost all your programs where you iterate over data streams using a <a href="https://realpython.com/python-for-loop/"><code>for</code> loop</a>. Iterators power and control the iteration process, while iterables typically hold data that you want to iterate over.</p>
<p>Python iterators implement the <a href="https://en.wikipedia.org/wiki/Iterator_pattern">iterator design pattern</a>, which allows you to traverse a container and access its elements. To implement this pattern, iterators need the <code>.__iter__()</code> and <code>.__next__()</code> <a href="https://realpython.com/python-magic-methods/">special methods</a>. Similarly, iterables are typically data containers that implement the <code>.__iter__()</code> method.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into iterators and iterables, check out the <a href="https://realpython.com/python-iterators-iterables/">Iterators and Iterables in Python: Run Efficient Iterations</a> tutorial.</p>
</div>
<p>Python has extended the concept of iterators and iterables to <strong>asynchronous programming</strong> with the <code>asyncio</code> module and the <a href="https://realpython.com/python-keywords/#asynchronous-programming-keywords-async-await"><code>async</code> and <code>await</code></a> keywords. In this scenario, asynchronous iterators drive the <strong>asynchronous iteration process</strong>, mainly powered by <code>async for</code> loops and <a href="#asynchronous-comprehensions-and-generator-expressions">comprehensions</a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In this tutorial, you won’t dive into the intricacies of Python’s asynchronous programming. So, you should be familiar with the related concepts. If you’re not, then you can check out the following tutorials:</p>
<ul>
<li><a href="https://realpython.com/python-async-features/">Getting Started With Async Features in Python</a></li>
<li><a href="https://realpython.com/async-io-python/">Async IO in Python: A Complete Walkthrough</a></li>
</ul>
<p>In these tutorials, you’ll gain the required background to prepare for exploring asynchronous iterators and iterables in more depth.</p>
</div>
<p>In the following sections, you’ll briefly examine the concepts of asynchronous iterators and iterables in Python.</p>
<h3 id="async-iterators">Async Iterators<a class="headerlink" href="#async-iterators" title="Permanent link"></a></h3>
<p>Python’s documentation defines <strong>asynchronous iterators</strong>, or <em>async iterators</em> for short, as the following:</p>
<blockquote>
<p>An object that implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__aiter__"><code>.__aiter__()</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__anext__"><code>.__anext__()</code></a> [special] methods. <code>.__anext__()</code> must return an <a href="https://docs.python.org/3/glossary.html#term-awaitable">awaitable</a> object. [An] <a href="https://docs.python.org/3/reference/compound_stmts.html#async-for"><code>async for</code></a> [loop] resolves the awaitables returned by an asynchronous iterator’s <code>.__anext__()</code> method until it raises a <a href="https://docs.python.org/3/library/exceptions.html#StopAsyncIteration"><code>StopAsyncIteration</code></a> exception. (<a href="https://docs.python.org/3/glossary.html#term-asynchronous-iterator">Source</a>)</p>
</blockquote>
<p>Similar to regular iterators that must implement <code>.__iter__()</code> and <code>.__next__()</code>, async iterators must implement <code>.__aiter__()</code> and <code>.__anext__()</code>. In regular iterators, the <code>.__iter__()</code> method usually returns the iterator itself. This is also true for async iterators.</p>
<p>To continue with this parallelism, in regular iterators, the <code>.__next__()</code> method must return the next object for the iteration. In async iterators, the <code>.__anext__()</code> method must return the next object, which must be awaitable.</p>
<p>Python defines awaitable objects as described in the quote below:</p>
<blockquote>
<p>An object that can be used in an <a href="https://docs.python.org/3/reference/expressions.html#await"><code>await</code></a> expression. [It] can be a <a href="https://docs.python.org/3/glossary.html#term-coroutine">coroutine</a> or an object with an <a href="https://docs.python.org/3/reference/datamodel.html#object.__await__"><code>.__await__()</code></a> method. (<a href="https://docs.python.org/3/glossary.html#term-awaitable">Source</a>)</p>
</blockquote>
<p>In practice, a quick way to make an awaitable object in Python is to call an asynchronous function. You define this type of function with the <a href="https://docs.python.org/3/reference/compound_stmts.html#async-def"><code>async def</code></a> keyword construct. This call creates a <strong>coroutine object</strong>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You can also create awaitable objects by implementing the <code>.__await__()</code> special method in a custom class. This method must return an <a href="https://docs.python.org/3/glossary.html#term-iterator">iterator</a> that yields control back to the <a href="https://docs.python.org/3/library/asyncio-eventloop.html">event loop</a> until the awaited result is ready. This topic is beyond the scope of this tutorial.</p>
</div>
<p>When the data stream runs out of data, the method must raise a <code>StopAsyncIteration</code> exception to end the asynchronous iteration process.</p>
<p>Here’s an example of an async iterator that allows iterating over a range of numbers asynchronously:</p>
</div><h2><a href="https://realpython.com/python-async-iterators/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-async-iterators/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-07T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Asynchronous Iterators and Iterables in Python</title>
<link>https://realpython.com/quizzes/python-async-iterators/</link>
<guid>https://realpython.com/quizzes/python-async-iterators/</guid>
<content:encoded><![CDATA[
<div> async iterators, iterables, asynchronous code, Python, quiz
总结:<br /><br />本文介绍了如何在Python中创建和使用异步迭代器和可迭代对象。首先介绍了异步迭代器和异步可迭代对象的概念，并且解释了它们在异步代码中的作用。接着详细介绍了如何使用async关键字和__aiter__、__anext__方法来定义异步迭代器。然后讲解了如何使用async for循环来遍历异步可迭代对象。最后，提供了一个测试的小测验，帮助读者加深对异步迭代器和可迭代对象的理解。通过本文的学习，读者可以更好地理解和运用Python中的异步编程技巧。 <div>
<p>Test your understanding of how to create and use Python async iterators and iterables in the context of asynchronous code.</p>
<p>You can take this quiz after reading the <a href="https://realpython.com/python-async-iterators/">Asynchronous Iterators and Iterables in Python</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-07T12:00:00+00:00</pubDate>
</item>
<item>
<title>Interacting With REST APIs and Python</title>
<link>https://realpython.com/courses/interacting-rest-apis-python/</link>
<guid>https://realpython.com/courses/interacting-rest-apis-python/</guid>
<content:encoded><![CDATA[
<div> REST architecture, REST APIs, requests library, build a REST API, Python tools
<br />
REST architecture 是一种常用的编程风格，通过 REST API 可以访问 Web 数据。使用 requests 库可以从 REST API 消费数据，而构建 REST API 需要遵循一定步骤。Python 提供了一些优秀的工具用于构建 REST API。总结: REST architecture 提供了访问 web 数据的方式，可以通过 requests 库获取 REST API 数据，同时可以使用 Python 工具构建自己的 REST API。 <div>
<p>There&rsquo;s an amazing amount of data available on the Web. Many <strong>web services</strong>, like YouTube and GitHub, make their data accessible to third-party applications through an <strong>application programming interface (API)</strong>. One of the most popular ways to build APIs is the <strong>REST</strong> architecture style. Python provides some great tools not only to get data from REST APIs but also to build your own Python REST APIs.</p>
<p><strong>In this video course, you&rsquo;ll learn:</strong></p>
<ul>
<li>What <strong>REST</strong> architecture is</li>
<li>How <strong>REST APIs</strong> provide access to web data</li>
<li>How to consume data from REST APIs using the <strong><code>requests</code></strong> library</li>
<li>What steps to take to <strong>build a REST API</strong></li>
<li>What some popular <strong>Python tools</strong> are for building REST APIs</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-06T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Functional Programming in Python: When and How to Use It</title>
<link>https://realpython.com/quizzes/python-functional-programming/</link>
<guid>https://realpython.com/quizzes/python-functional-programming/</guid>
<content:encoded><![CDATA[
<div> functional programming, functions as first-class citizens, lambda keyword, map(), filter(), reduce()

函数式编程范式中，函数被视为一等公民，可以作为参数传入其他函数中。在Python中，可以使用lambda关键字来创建匿名函数。通过map()，filter()和reduce()等函数，可以实现函数式编程的特性。总结：函数式编程中，函数是第一类公民，lambda关键字用于创建匿名函数，可以通过map()，filter()和reduce()函数实现函数式编程的特性。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-functional-programming/">Functional Programming in Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the functional programming paradigm, the concept of functions as first-class citizens in Python, the use of the <code>lambda</code> keyword, and how to implement functional code using <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Functional Programming in Python: When and How to Use It</title>
<link>https://realpython.com/python-functional-programming/</link>
<guid>https://realpython.com/python-functional-programming/</guid>
<content:encoded><![CDATA[
<div> first-class citizens, lambda, map(), filter(), reduce()<br />
首先，Python中函数是一等公民，支持lambda表达式，map()、filter()、reduce()等函数式编程工具。函数是Python中常见的对象，可以被赋值给变量，作为参数传递给其他函数，甚至可以作为字典的键。函数式编程的主要特点是使用纯函数，避免副作用和可变数据，使得程序透明、高级和可并行化。Python虽然支持函数式编程，但也包含其他编程范式的特征。虽然Python的函数式编程不如其他语言那么深入，但在阅读他人代码或需要时，了解和使用Python的函数式编程能力仍然具有优势。总结：Python函数是一等公民，支持lambda表达式和函数式编程工具，使得函数式编程在Python中实现简单且灵活。 <div>
<div><p><strong>Functional programming</strong> is a programming paradigm in which the primary method of computation is the evaluation of functions. But how does Python support functional programming?</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What the <strong>functional programming</strong> paradigm entails</li>
<li>What it means to say that <strong>functions</strong> are <strong>first-class citizens</strong> in Python</li>
<li>How to define <strong>anonymous functions</strong> with the <strong><code>lambda</code></strong> keyword</li>
<li>How to implement functional code using <strong><code>map()</code></strong>, <strong><code>filter()</code></strong>, and <strong><code>reduce()</code></strong></li>
</ul>
<p>Functional programming typically plays a minor role in Python code, but it’s still good to be familiar with it. You’ll probably encounter it from time to time when reading code written by others. And you may even find situations where it’s advantageous to use Python’s functional programming capabilities in your own code.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-functional-programming-code/">Click here to download the free sample code</a> that shows you when and how to use  functional programming in Python.</p>
</div>
<h2 id="what-is-functional-programming">What Is Functional Programming?<a class="headerlink" href="#what-is-functional-programming" title="Permanent link"></a></h2>
<p>A <strong>pure function</strong> is a function whose output value follows solely from its input values without any observable <a href="https://realpython.com/defining-your-own-python-function/#side-effects">side effects</a>. In <strong>functional programming</strong>, a program consists primarily of the evaluation of pure functions. Computation proceeds by nested or <a href="https://en.wikipedia.org/wiki/Function_composition_(computer_science)">composed function calls</a> without changes to state or mutable data.</p>
<p>The functional paradigm is popular because it offers several advantages over other programming paradigms. Functional code is:</p>
<ul>
<li><strong>High level:</strong> You describe the result you want rather than explicitly specifying the steps required to get there. Single statements tend to be concise but pack a lot of punch.</li>
<li><strong>Transparent:</strong> The behavior of a pure function can be described by its inputs and outputs, without intermediary values. This eliminates the possibility of side effects and facilitates <a href="https://realpython.com/python-debugging-pdb/">debugging</a>.</li>
<li><strong>Parallelizable:</strong> Routines that don’t cause side effects can more easily <a href="https://realpython.com/learning-paths/python-concurrency-parallel-programming/">run in parallel</a> with one another.</li>
</ul>
<p>Many programming languages support some degree of functional programming. In some languages, virtually all code follows the functional paradigm. <a href="https://www.haskell.org">Haskell</a> is one such example. Python, by contrast, does support functional programming but contains features of other programming models as well.</p>
<p>While it’s true that an in-depth description of <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a> is somewhat complex, the goal here isn’t to present a rigorous definition but to show you what you can do by way of functional programming in Python.</p>
<h2 id="how-well-does-python-support-functional-programming">How Well Does Python Support Functional Programming?<a class="headerlink" href="#how-well-does-python-support-functional-programming" title="Permanent link"></a></h2>
<p>To support functional programming, it’s beneficial if a <a href="https://realpython.com/defining-your-own-python-function/">function</a> in a given programming language can do these two things:</p>
<ol>
<li>Take another function as an argument</li>
<li>Return another function to its caller</li>
</ol>
<p>Python plays nicely in both respects. Everything in Python is an <a href="https://realpython.com/python-variables/#object-references">object</a>, and all objects in Python have more or less equal stature. Functions are no exception.</p>
<p>In Python, functions are <strong>first-class citizens</strong>. This means that functions have the same characteristics as values like <a href="https://realpython.com/python-strings/">strings</a> and <a href="https://realpython.com/python-numbers/">numbers</a>. Anything you would expect to be able to do with a string or number, you can also do with a function.</p>
<p>For example, you can assign a function to a variable. You can then use that variable the same way you would use the function itself:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
<span class="linenos"> 2</span><span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">"I am function func()!"</span><span class="p">)</span>
<span class="linenos"> 3</span><span class="gp">...</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span><span class="gp">&gt;&gt;&gt; </span><span class="n">func</span><span class="p">()</span>
<span class="linenos"> 6</span><span class="go">I am function func()!</span>
<span class="linenos"> 7</span>
<span class="hll"><span class="linenos"> 8</span><span class="gp">&gt;&gt;&gt; </span><span class="n">another_name</span> <span class="o">=</span> <span class="n">func</span>
</span><span class="linenos"> 9</span><span class="gp">&gt;&gt;&gt; </span><span class="n">another_name</span><span class="p">()</span>
<span class="linenos">10</span><span class="go">I am function func()!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The assignment <code>another_name = func</code> on line 8 creates a new reference to <code>func()</code> named <code>another_name</code>. You can then call the function by either of the two names, <code>func</code> or <code>another_name</code>, as shown on lines 5 and 9.</p>
<p>You can display a function to the console with <a href="https://realpython.com/python-print/"><code>print()</code></a>, include it as an element in a composite data object like a <a href="https://realpython.com/python-lists-tuples/">list</a>, or even use it as a <a href="https://realpython.com/python-dicts/">dictionary</a> key:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">"I am function func()!"</span><span class="p">)</span>
<span class="gp">...</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="s2">"cat"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
</span><span class="go">cat &lt;function func at 0x7f81b4d29bf8&gt; 42</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="n">objects</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"cat"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="mi">42</span><span class="p">]</span>
</span><span class="gp">&gt;&gt;&gt; </span><span class="n">objects</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="go">&lt;function func at 0x7f81b4d29bf8&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">objects</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span>
<span class="go">I am function func()!</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"cat"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">func</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">42</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class="gp">&gt;&gt;&gt; </span><span class="n">d</span><span class="p">[</span><span class="n">func</span><span class="p">]</span>
<span class="go">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, <code>func()</code> appears in all the same contexts as the values <code>"cat"</code> and <code>42</code>, and the interpreter handles it just fine.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> What you can or can’t do with an object in Python depends to some extent on context. Some operations work for certain object types but not for others. </p>
<p>For example, you can add two integer objects or <a href="https://realpython.com/python-string-concatenation/">concatenate</a> two string objects with the plus operator (<code>+</code>), but the plus operator isn’t defined for function objects.</p>
</div>
<p>For present purposes, what matters is that functions in Python satisfy the two criteria beneficial for functional programming listed above. You can pass a function to another function as an argument:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
<span class="linenos"> 2</span><span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">"I am function inner()!"</span><span class="p">)</span>
<span class="linenos"> 3</span><span class="gp">...</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
<span class="linenos"> 6</span><span class="gp">... </span>    <span class="n">function</span><span class="p">()</span>
<span class="linenos"> 7</span><span class="gp">...</span>
<span class="linenos"> 8</span>
<span class="hll"><span class="linenos"> 9</span><span class="gp">&gt;&gt;&gt; </span><span class="n">outer</span><span class="p">(</span><span class="n">inner</span><span class="p">)</span>
</span><span class="linenos">10</span><span class="go">I am function inner()!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-functional-programming/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-functional-programming/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-05T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #215: Fetching Graph Data in Django With Strawberry &amp; Prototype Purgatory</title>
<link>https://realpython.com/podcasts/rpp/215/</link>
<guid>https://realpython.com/podcasts/rpp/215/</guid>
<content:encoded><![CDATA[
<div> GraphQL, Python, web development, Django, APIs
<br />
关键词总结: GraphQL, Python, web development, Django, APIs
<br /><br />
总结: 本文介绍了如何将GraphQL集成到Python Web开发中，以及如何在Django的框架中快速构建基于图的API。Christopher Trudeau在本周的节目中带来了另一批PyCoder's Weekly文章和项目。文章讨论了使用GraphQL来改善PythonWeb开发的方法，以及如何利用Django的强大功能快速构建基于图的API。 <div>
<p>How do you integrate GraphQL into your Python web development? How about quickly building graph-based APIs inside Django's battery-included framework? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-08-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python String Formatting: Available Tools and Their Features</title>
<link>https://realpython.com/quizzes/python-string-formatting/</link>
<guid>https://realpython.com/quizzes/python-string-formatting/</guid>
<content:encoded><![CDATA[
<div> f-strings, .format() method, modulo operator, Python string formatting, quiz  
<br />
Python的字符串格式化工具包括f-strings, .format()方法和取模运算符。每种方法都可以用来格式化字符串，方便地插入变量值或表达式。f-strings使用{}来标记变量替换位置，.format()方法通过大括号{}和传入的参数来完成替换，取模运算符%也可以用来格式化字符串。本文介绍了这些工具，并通过测验来帮助读者加深对Python字符串格式化的理解。  
<br /><br />  
总结:  
1. Python的字符串格式化工具包括f-strings, .format()方法和取模运算符。  
2. f-strings使用{}来标记变量替换位置。  
3. .format()方法通过大括号{}和传入的参数来完成替换。  
4. 取模运算符%也可以用来格式化字符串。  
5. 通过阅读教程和参加测验，可以加深对Python字符串格式化的理解。 <div>
<p>Test your understanding of Python&rsquo;s tools for string formatting, including f-strings, the <code>.format()</code> method, and the modulo operator.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-string-formatting/">Python String Formatting: Available Tools and Their Features</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Strings and Character Data</title>
<link>https://realpython.com/quizzes/python-strings/</link>
<guid>https://realpython.com/quizzes/python-strings/</guid>
<content:encoded><![CDATA[
<div> Python、string、manipulating、operators、indexing<br />
Python的字符串数据类型提供了丰富的方法和操作符来处理文本数据。通过使用字符串字面值和str()函数，可以创建字符串对象。字符串方法可以帮助我们对文本数据进行各种操作，同时使用操作符和内置函数也可以对字符串进行处理。通过索引和切片操作，可以方便地访问和修改字符串的部分内容。熟练掌握这些方法和技巧可以使我们更有效地处理和操作文本数据。<br /><br />总结: <br />Python的字符串数据类型提供了丰富的方法和操作符来处理文本数据，通过使用字符串方法、操作符和索引操作，可以方便地对字符串进行各种操作。 <div>
<p>This quiz will evaluate your understanding of Python&rsquo;s string data type and test your knowledge about manipulating textual data with string objects. You&rsquo;ll cover the basics of creating strings using literals and the str() function, applying string methods, using operators and built-in functions with strings, indexing and slicing strings, and more!</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-strings/">Strings and Character Data in Python</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python's Built-in Exceptions: A Walkthrough With Examples</title>
<link>https://realpython.com/quizzes/python-built-in-exceptions/</link>
<guid>https://realpython.com/quizzes/python-built-in-exceptions/</guid>
<content:encoded><![CDATA[
<div> 内建异常、Python、处理、调试、代码、理解、常见异常、帮助、核心主题、异常处理、调试代码、处理异常、调试代码、常见内建异常。 <br />
异常处理是Python中的一个核心主题，理解如何使用一些常见的内置异常可以帮助您调试代码并处理自己的异常。在Python中，异常处理是至关重要的，了解常见异常的用法可以提高代码的质量和可靠性。不仅可以帮助您更好地理解代码的执行流程和可能遇到的问题，还可以使您的代码更加健壮和易于维护。通过合理地处理异常，可以提高代码的稳定性和可读性，使其更易于调试和维护。总结:<br />异常处理是Python中一个重要的核心主题，掌握常见的内建异常可以帮助您更好地处理和调试代码，提高代码的质量和可靠性。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of the most commonly used <a href="https://realpython.com/python-built-in-exceptions/">built-in exceptions in Python</a>.</p>
<p>Exception handling is a core topic in Python. Knowing how to use some of the most common built-in exceptions can help you to debug your code and handle your own exceptions.</p>
<p>Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-31T12:00:00+00:00</pubDate>
</item>
<item>
<title>How to Write an Installable Django App</title>
<link>https://realpython.com/installable-django-app/</link>
<guid>https://realpython.com/installable-django-app/</guid>
<content:encoded><![CDATA[
<div> Django, 安装, Python, 应用程序, 打包
<br />
本教程介绍了如何将Django应用程序打包成可安装的包，并发布到PyPI。首先，您需要了解项目和应用程序之间的区别，然后学习如何创建适用于Django应用程序的pyproject.toml文件。接着，您将学习如何在Django项目外部启动Django以测试您的应用程序，然后使用nox跨多个Python和Django版本进行测试。最后，您将学习如何使用Twine将可安装的Django应用程序发布到PyPI。文章中包含了一个可下载的工作包，来帮助您制作可安装的Django应用程序。文章中通过一个收据应用程序的示例来演示从Django项目到可安装的Django应用程序的转换过程。 <div>
<div><p>In the <a href="https://realpython.com/get-started-with-django-1/">Django</a> framework, a <strong>project</strong> refers to the collection of configuration files and code for a particular website. Django groups business logic into what it calls <strong>apps</strong>, which are the modules of the Django framework. There’s plenty of documentation on how to structure your projects and the apps within them, but when it comes time to package an installable Django app, information is harder to find.</p>
<p>In this tutorial, you’ll learn how to take an app out of a <a href="https://realpython.com/django-setup/">Django project</a> and package it so that it’s installable. Once you’ve packaged your app, you can share it on <a href="https://pypi.org/">PyPI</a> so that others can fetch it through <code>pip</code>.</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What the differences are between writing <strong>stand-alone apps</strong> and writing <strong>apps inside of projects</strong></li>
<li>How to create a <strong><code>pyproject.toml</code> file</strong> for publishing your Django app</li>
<li>How to <strong>bootstrap Django</strong> outside of a Django project so you can test your app</li>
<li>How to test across multiple versions of Python and Django using <strong><code>nox</code></strong></li>
<li>How to publish your installable Django app to PyPI using <strong>Twine</strong></li>
</ul>
<p>This tutorial includes a working package to help guide you through the process of making an installable Django app. You can download the source code by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/installable-django-app-update-code/">Click here to download the free sample code</a> that shows you how to write an installable Django app.</p>
</div>
<h2 id="prerequisites">Prerequisites<a class="headerlink" href="#prerequisites" title="Permanent link"></a></h2>
<p>This tutorial requires some familiarity with <a href="https://www.djangoproject.com/">Django</a>, <a href="https://pip.pypa.io/"><code>pip</code></a>, <a href="https://pypi.org">PyPI</a>, <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a>—or an equivalent virtual environment tool—and <a href="https://nox.thea.codes/"><code>nox</code></a>. To learn more about these, you can check out the following resources:</p>
<ul>
<li><a href="https://realpython.com/tutorials/django/">Django Tutorials</a></li>
<li><a href="https://realpython.com/what-is-pip/">Using Python’s pip to Manage Your Projects’ Dependencies</a></li>
<li><a href="https://realpython.com/pypi-publish-python-package/">How to Publish an Open-Source Python Package to PyPI</a></li>
<li><a href="https://realpython.com/intro-to-pyenv/">Managing Multiple Python Versions With pyenv</a></li>
</ul>
<h2 id="starting-a-sample-django-app-in-a-project">Starting a Sample Django App in a Project<a class="headerlink" href="#starting-a-sample-django-app-in-a-project" title="Permanent link"></a></h2>
<p>Even if you set out to make your Django app available as a package, you’ll likely start inside a project. In the sample code, you’ll find a <code>000_before</code> directory that shows the code before the app is moved onto its own, demonstrating the process of transitioning from a Django project to an installable Django app.  </p>
<p>You can also download the finished app at the <a href="https://pypi.org/project/realpython-django-receipts/">PyPI realpython-django-receipts</a> package page, or install the package by running <code>python -m pip install realpython-django-receipts</code>.</p>
<p>The sample app is a short representation of the line items on a receipt. In the <code>000_before</code> folder, you’ll find a directory named <code>sample_project</code> that contains a working Django project:</p>
<div class="highlight"><pre><span></span><code>sample_project/
│
├── receipts/
│   ├── fixtures/
│   │   └── receipts.json
│   │
│   ├── migrations/
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   │
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
│
├── sample_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── db.sqlite3
├── manage.py
├── resetdb.sh
└── runserver.sh
</code></pre></div>
<p>This tutorial was written using Django 5.0.7 and it was tested with Python 3.8 through 3.12. All of the steps outlined in this tutorial should be compatible with earlier versions of Django going back to Django 1.8. However, some modifications will be necessary if you’re using Python 2. For simplicity, the examples in this tutorial assume at least Python 3.8 across the code base.</p>
<h3 id="creating-the-django-project-from-scratch">Creating the Django Project From Scratch<a class="headerlink" href="#creating-the-django-project-from-scratch" title="Permanent link"></a></h3>
<p>The sample project and receipts app were created using the Django <code>admin</code> command and some small edits. To start, run the following code inside of a clean virtual environment:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>Django
<span class="gp">$ </span>django-admin<span class="w"> </span>startproject<span class="w"> </span>sample_project
<span class="gp">$ </span><span class="nb">cd</span><span class="w"> </span>sample_project
<span class="gp">$ </span>python<span class="w"> </span>manage.py<span class="w"> </span>startapp<span class="w"> </span>receipts
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This creates the <code>sample_project</code> project directory structure and a <code>receipts</code> app subdirectory with template files that you’ll use to create your installable Django app.</p>
<p>Next, the <code>sample_project/settings.py</code> file needs a few modifications:</p>
<ul>
<li>Add <code>"127.0.0.1"</code> to the <code>ALLOWED_HOSTS</code> setting so you can test locally.</li>
<li>Add <code>"receipts"</code> to the <code>INSTALLED_APPS</code> list.</li>
</ul>
<p>You’ll also need to register the <code>receipts</code> app’s URLs in the <code>sample_project/urls.py</code> file. To do so, add <code>path("receipts/", include("receipts.urls"))</code> to the <code>url_patterns</code> list. Note that you’ll need to add the <code>include</code> function as an import from <code>django.urls</code>.</p>
<h3 id="exploring-the-receipts-sample-app">Exploring the Receipts Sample App<a class="headerlink" href="#exploring-the-receipts-sample-app" title="Permanent link"></a></h3>
<p>The app consists of two ORM model classes: <code>Item</code> and <code>Receipt</code>. The <code>Item</code> class contains database field declarations for a description and a cost. The cost is contained in a <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#decimalfield"><code>DecimalField</code></a>. It’s never a good idea to use floating-point numbers to represent money. Instead, you should always use <a href="https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">fixed-point numbers</a> when dealing with currencies.</p>
<p>The <code>Receipt</code> class is a collection point for <code>Item</code> objects. This is achieved with a <code>ForeignKey</code> on <code>Item</code> that points to <code>Receipt</code>. <code>Receipt</code> also includes <code>total()</code> for getting the total cost of <code>Item</code> objects contained in the <code>Receipt</code>:</p>
</div><h2><a href="https://realpython.com/installable-django-app/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/installable-django-app/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-31T14:00:00+00:00</pubDate>
</item>
<item>
<title>Simulate a Text File in Python</title>
<link>https://realpython.com/courses/simulate-text-file/</link>
<guid>https://realpython.com/courses/simulate-text-file/</guid>
<content:encoded><![CDATA[
<div> io.StringIO, simulate, text file, mock file object, Python Tricks
<br />
io.StringIO模块可以用于模拟磁盘上的文本文件，通过io.StringIO对象可以执行文件操作，了解何时使用io.StringIO以及何时避免使用它，并掌握可能的替代方案，使用unittest.mock可以模拟文件对象。
<br /><br />
总结: io.StringIO模块可以模拟文本文件，帮助简化测试策略和开发流程，同时使用unittest.mock可以模拟文件对象，提高测试效率。 <div>
<p>Testing applications that read files from a disk can be challenging. Issues such as machine dependencies, special access requirements, and slow performance often arise when you need to read text from a file.</p>
<p>In this <strong>Code Conversation</strong> with instructor Martin Breuss, you&rsquo;ll discover how to simplify this process by simulating text files with StringIO from the io module in Python’s standard library.</p>
<p>In this video course, you’ll learn how to:</p>
<ul>
<li>Use <code>io.StringIO</code> to simulate a text file on disk</li>
<li>Perform file operations on a <code>io.StringIO</code> object</li>
<li>Decide when to use <code>io.StringIO</code> and when to avoid it</li>
<li>Understand possible alternatives</li>
<li>Mock a file object using <code>unittest.mock</code></li>
</ul>
<p>Understanding how to simulate text file objects and mock file objects can help streamline your testing strategy and development process.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>Strings and Character Data in Python</title>
<link>https://realpython.com/python-strings/</link>
<guid>https://realpython.com/python-strings/</guid>
<content:encoded><![CDATA[
<div> 字符串, 操作符, 方法, 索引, 创建
<br />
Python中的字符串是处理文本数据的数据类型。字符串是由字符序列组成的，可以使用操作符和内置函数处理字符串，用索引和切片访问字符串中的字符，进行字符串插值和格式化，以及使用字符串方法。 Python没有单个字符数据类型，单个字符也是长度为一的字符串。字符串是不可变的，任何修改字符串的操作都会创建一个新的字符串。字符串是有序的，可以通过整数索引访问字符，索引从0开始。创建字符串的方法包括使用字符串字面值和str()函数。字符串字面值有标准字面值、原始字面值和格式化字面值。标准字面值使用单引号或双引号，原始字面值使用r前缀，格式化字面值使用f前缀。总结: 在Python中，你需要了解字符串的基本概念，包括如何创建、操作和使用字符串。字符串是不可变的字符序列，可以通过索引和切片访问其中的字符。使用字符串字面值和str()函数可以创建新的字符串。了解如何利用操作符、内置函数和字符串方法处理文本数据是编程中的基本技能。 <div>
<div><p>In Python, <strong>string</strong> objects contain sequences of characters that allow you to manipulate textual data. It’s rare to find an application, program, or library that doesn’t need to manipulate strings to some extent. So, processing characters and strings is integral to programming and a fundamental skill for you as a Python programmer.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Create strings using <strong>literals</strong> and the <strong><code>str()</code></strong> function</li>
<li>Use <strong>operators</strong> and <strong>built-in functions</strong> with strings</li>
<li><strong>Index</strong> and <strong>slice</strong> strings</li>
<li>Do string <strong>interpolation</strong> and <strong>formatting</strong></li>
<li>Use string <strong>methods</strong></li>
</ul>
<p>To get the most out of this tutorial, you should have a good understanding of core Python concepts, including <a href="https://realpython.com/python-variables/">variables</a>, <a href="https://realpython.com/defining-your-own-python-function/">functions</a>, and <a href="https://realpython.com/python-operators-expressions/">operators and expressions</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-string-code/">Click here to download the free sample code</a> that shows you how to work with strings and character data in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Strings and Character Data” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-strings-update/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Strings and Character Data in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Strings-and-Character-Data-in-Python_Watermarked.797803948b10.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-strings-update/"><span class="my-0 h4">Python Strings and Character Data</span></a> 
      <p class="text-muted mb-0 small">This quiz will evaluate your understanding of Python's string data type and your knowledge about manipulating textual data with string objects. You'll cover the basics of creating strings using literals and the `str()` function, applying string methods, using operators and built-in functions with strings, indexing and slicing strings, and more!</p>
    </div>
  </div>

</div>

<h2 id="getting-to-know-strings-and-characters-in-python">Getting to Know Strings and Characters in Python<a class="headerlink" href="#getting-to-know-strings-and-characters-in-python" title="Permanent link"></a></h2>
<p>Python provides the <a href="https://realpython.com/python-data-types/#strings-and-characters">built-in string (<code>str</code>)</a> data type to handle textual data. Other programming languages, such as <a href="https://realpython.com/java-vs-python/">Java</a>, have a character data type for single characters. Python doesn’t have that. Single characters are strings of length one.</p>
<p>In practice, strings are <a href="https://realpython.com/python-mutable-vs-immutable-types/#immutable-built-in-data-types-in-python">immutable</a> sequences of characters. This means you can’t change a string once you define it. Any operation that modifies a string will create a new string instead of modifying the original one.</p>
<p>A string is also a <a href="https://realpython.com/python-sequences/">sequence</a>, which means that the characters in a string have a consecutive order. This feature allows you to access characters using integer indices that start with <code>0</code>. You’ll learn more about these concepts in the section about <a href="#indexing-strings">indexing strings</a>. For now, you’ll learn about how to create strings in Python.</p>
<h2 id="creating-strings-in-python">Creating Strings in Python<a class="headerlink" href="#creating-strings-in-python" title="Permanent link"></a></h2>
<p>There are different ways to create strings in Python. The most common practice is to use string <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals">literals</a>. Because strings are everywhere and have many use cases, you’ll find a few different types of string literals. There are standard literals, raw literals, and formatted literals.</p>
<p>Additionally, you can use the built-in <code>str()</code> function to create new strings from other existing objects.</p>
<p>In the following sections, you’ll learn about the multiple ways to create strings in Python and when to use each of them.</p>
<h3 id="standard-string-literals">Standard String Literals<a class="headerlink" href="#standard-string-literals" title="Permanent link"></a></h3>
<p>A standard string literal is just a piece of text or a <a href="https://realpython.com/python-sequences/">sequence</a> of characters that you enclose in quotes. To create single-line strings, you can use single (<code>''</code>) and double (<code>""</code>) quotes:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s1">'A single-line string in single quotes'</span>
<span class="go">'A single-line string in single quotes'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"A single-line string in double quotes"</span>
<span class="go">'A single-line string in double quotes'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the first example, you use single quotes to delimit the string literal. In the second example, you use double quotes.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Python’s standard <a href="https://realpython.com/python-repl/">REPL</a> displays string objects using single quotes even though you create them using double quotes.</p>
</div>
<p>You can define empty strings using quotes without placing characters between them:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">""</span>
<span class="go">''</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s1">''</span>
<span class="go">''</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span>
<span class="go">0</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>An empty string doesn’t contain any characters, so when you use the built-in <a href="https://realpython.com/len-python-function/"><code>len()</code></a> function with an empty string as an argument, you get <code>0</code> as a result.</p>
<p>To create multiline strings, you can use triple-quoted strings. In this case, you can use either single or double quotes:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sd">'''A triple-quoted string</span>
<span class="gp">... </span><span class="sd">spanning across multiple</span>
<span class="gp">... </span><span class="sd">lines using single quotes'''</span>
<span class="go">'A triple-quoted string\nspanning across multiple\nlines using single quotes'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="sd">"""A triple-quoted string</span>
<span class="gp">... </span><span class="sd">spanning across multiple</span>
<span class="gp">... </span><span class="sd">lines using double quotes"""</span>
<span class="go">'A triple-quoted string\nspanning across multiple\nlines using double quotes'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The primary use case for triple-quoted strings is to create multiline strings. You can also use them to define single-line strings, but this is a less common practice.</p>
</div><h2><a href="https://realpython.com/python-strings/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-strings/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-29T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Getting Started With Testing in Python</title>
<link>https://realpython.com/quizzes/testing-python/</link>
<guid>https://realpython.com/quizzes/testing-python/</guid>
<content:encoded><![CDATA[
<div> Python testing, fundamentals, quiz, complexity, application
<br />
Python测试对于许多人来说可能会有很大的复杂性，但其实并不难。通过几个简单的步骤，您可以开始为应用程序创建简单的测试，然后逐步完善。这个测验可以帮助您检查对Python测试基础知识的理解。祝您好运！
<br /><br />
总结: Python testing的基础知识是本文的重点，通过简单的步骤可以为应用程序创建测试，测试可能存在复杂性，但只要掌握基础知识，便可循序渐进地建立测试。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-testing/">testing your Python code</a>.</p>
<p>Testing in Python is a huge topic and can come with a lot of complexity, but it doesn&rsquo;t need to be hard. You can get started creating simple tests for your application in a few easy steps and then build on it from there.</p>
<p>With this quiz, you can check your understanding of the fundamentals of Python testing. Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-25T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Basics: Lists and Tuples</title>
<link>https://realpython.com/quizzes/python-basics-lists-and-tuples/</link>
<guid>https://realpython.com/quizzes/python-basics-lists-and-tuples/</guid>
<content:encoded><![CDATA[
<div> Lists Tuples Indexing Slicing Mutability

列表和元组是Python中重要的数据结构，它们都是有序的容器，可以包含其他对象。列表是可变的，元组是不可变的。我们可以通过索引和切片访问列表和元组中的元素。我们可以使用循环迭代这些容器。对于列表，我们可以添加和删除元素。通过掌握这些知识，我们可以更好地使用Python中的列表和元组这两种数据结构。总结：列表和元组是Python中重要的有序容器，列表可变而元组不可变，我们可以通过索引和切片访问它们，也可以使用循环迭代这些容器，以及对列表进行添加和删除操作。 <div>
<p>In <a href="https://realpython.com/courses/python-basics-lists-tuples/">Python Basics: Lists and Tuples</a>, you&rsquo;ve met two new and important data structures:</p>
<ul>
<li>Lists</li>
<li>Tuples</li>
</ul>
<p>Both of these data types are <a href="https://realpython.com/python-sequences/">sequences</a>, meaning they are objects that contain other objects in a certain order. They each have some important distinguishing properties and come with their own set of methods for interacting with objects of each type.</p>
<p>In this quiz, youll test your knowledge of:</p>
<ul>
<li><strong>Creating</strong> lists and tuples</li>
<li><strong>Indexing</strong> and <strong>slicing</strong> lists and tuples</li>
<li><strong>Iterating over</strong> these containers</li>
<li>Understanding their differences, specifically the impact of <strong>mutability</strong></li>
<li><strong>Adding</strong> and <strong>removing</strong> items from a list</li>
</ul>
<p>Then, you can move on to other <a href="https://realpython.com/learning-paths/python-basics/">Python Basics courses</a>.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-25T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #214: Build Captivating Display Tables in Python With Great Tables</title>
<link>https://realpython.com/podcasts/rpp/214/</link>
<guid>https://realpython.com/podcasts/rpp/214/</guid>
<content:encoded><![CDATA[
<div> Great Tables Python library, Richard Iannone, Michael Chow, data tables, Python

<br /><br />总结:
Richard Iannone和Michael Chow来自Posit公司，他们开发了Great Tables Python库，可以帮助Python用户创建美观和有吸引力的数据表格。这个库使得创建展示准备好的表格像创建图表和图形一样容易。通过使用Great Tables Python库，用户可以轻松地让他们的数据表在Python中看起来更有趣。 <div>
<p>Do you need help making data tables in Python look interesting and attractive? How can you create beautiful display-ready tables as easily as charts and graphs in Python? This week on the show, we speak with Richard Iannone and Michael Chow from Posit about the Great Tables Python library.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Logging in Python</title>
<link>https://realpython.com/quizzes/logging-in-python/</link>
<guid>https://realpython.com/quizzes/logging-in-python/</guid>
<content:encoded><![CDATA[
<div> logging, programmer, flow, errors, insights
<br />
日志记录是程序员工具箱中非常有用的工具之一。它可以帮助开发者更好地理解程序的流程，发现在开发过程中可能没有考虑到的情况。日志提供给开发者额外的一双眼睛，不断观察应用程序的流程。它们可以存储信息，比如哪个用户或IP访问了应用程序。如果发生错误，日志可以比堆栈跟踪提供更多见解，告诉您程序在发生错误之前的状态以及错误发生的代码行。
<br /><br />总结: 
- 日志记录是程序员工具箱中非常有用的工具之一，可以帮助开发者理解程序的流程。
- 日志提供额外的一双眼睛，不断观察应用程序的流程，存储关键信息。
- 当错误发生时，日志可以提供比堆栈跟踪更多的见解，帮助开发者找到问题。
- 通过日志，开发者可以了解程序在发生错误之前的状态以及错误发生的代码行。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-logging/">Python&rsquo;s <code>logging</code> module</a>.</p>
<p>Logging is a very useful tool in a programmer&rsquo;s toolbox. It can help you develop a better understanding of the flow of a program and discover scenarios that you might not have thought of while developing.</p>
<p>Logs provide developers with an extra set of eyes that are constantly looking at the flow an application is going through.</p>
<p>They can store information, like which user or IP accessed the application. If an error occurs, then they can provide more insights than a stack trace by telling you what the state of the program was before it arrived and the line of code where the error occurred.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Protocols: Leveraging Structural Subtyping</title>
<link>https://realpython.com/quizzes/python-protocol/</link>
<guid>https://realpython.com/quizzes/python-protocol/</guid>
<content:encoded><![CDATA[
<div> protocols, type hints, Python, functions, quiz
<br />
Python中的protocols可以通过类型提示来定义函数、变量、类和方法。本文介绍了如何创建和使用Python protocols，并提供了一个测试来检验对其理解。通过阅读本文，可以学习如何在Python中有效地使用protocols和类型提示，从而提高代码的可读性和维护性。总结: 本文介绍了Python中protocols的基本概念和用法，包括如何定义和使用它们，以及如何在代码中添加类型提示以提高代码质量。通过完成本文提供的测试，可以帮助读者加深对protocols和类型提示的理解。 <div>
<p>Test your understanding of how to create and use Python protocols while providing type hints for your functions, variables, classes, and methods.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-protocol/">Python Protocols: Leveraging Structural Subtyping</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>Hugging Face Transformers: Leverage Open-Source AI in Python</title>
<link>https://realpython.com/huggingface-transformers/</link>
<guid>https://realpython.com/huggingface-transformers/</guid>
<content:encoded><![CDATA[
<div> Hugging Face, Transformers, Python, AI models, Model cards
<br />
Hugging Face是一个强大的Python库，通过Transformers模块可以下载、操作和运行预训练的AI模型。Transformers库涵盖自然语言处理、计算机视觉、音频和多模态学习等多个领域的任务。使用预训练的开源模型可以降低成本、节省训练模型的时间，并能更好地控制部署的模型。Hugging Face生态系统包括模型、数据集、Spaces和付费服务，为开发者提供丰富的资源和工具。Model cards是Model Hub的核心组件，提供与每个模型相关的有用信息，可帮助用户选择和了解模型。总体来说，Hugging Face为用户提供了加速AI项目、促进创新和合作的平台。总结: <div>
<div><p>Transformers is a powerful Python library created by Hugging Face that allows you to download, manipulate, and run thousands of pretrained, open-source AI models. These models cover multiple tasks across modalities like natural language processing, computer vision, audio, and multimodal learning. Using pretrained open-source models can reduce costs, save the time needed to train models from scratch, and give you more control over the models you deploy.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Navigate</strong> the Hugging Face ecosystem</li>
<li><strong>Download, run, and manipulate</strong> models with Transformers</li>
<li><strong>Speed up</strong> model inference with GPUs</li>
</ul>
<p>Throughout this tutorial, you’ll gain a conceptual understanding of Hugging Face’s AI offerings and learn how to work with the Transformers library through hands-on examples. When you finish, you’ll have the knowledge and tools you need to start using models for your own use cases. Before starting, you’ll benefit from having an intermediate understanding of Python and popular deep learning libraries like <a href="https://realpython.com/pytorch-vs-tensorflow/"><code>pytorch</code> and <code>tensorflow</code></a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/huggingface-transformers-code/">Click here to download the free sample code</a> that shows you how to use Hugging Face Transformers to leverage open-source AI in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Hugging Face Transformers” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/hugging-face-transformers/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Hugging Face Transformers: Leverage Open-Source AI in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Showcase-HuggingFace-Transformers_Watermarked-3.bfafcf75db45.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/hugging-face-transformers/"><span class="my-0 h4">Hugging Face Transformers</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the Hugging Face Transformers library. This library is a popular choice for working with transformer models in natural language processing tasks, computer vision, and other machine learning applications.</p>
    </div>
  </div>

</div>

<h2 id="the-hugging-face-ecosystem">The Hugging Face Ecosystem<a class="headerlink" href="#the-hugging-face-ecosystem" title="Permanent link"></a></h2>
<p>Before using Transformers, you’ll want to have a solid understanding of the Hugging Face ecosystem. In this first section, you’ll briefly explore everything that Hugging Face offers with a particular emphasis on <strong>model cards</strong>.</p>
<h3 id="exploring-hugging-face">Exploring Hugging Face<a class="headerlink" href="#exploring-hugging-face" title="Permanent link"></a></h3>
<p><a href="https://huggingface.co/">Hugging Face</a> is a hub for state-of-the-art AI models. It’s primarily known for its wide range of open-source transformer-based models that excel in natural language processing (NLP), computer vision, and audio tasks. The platform offers several resources and services that cater to developers, researchers, businesses, and anyone interested in exploring AI models for their own use cases. </p>
<p>There’s a lot you can do with Hugging Face, but the primary offerings can be broken down into a few categories:</p>
<ul>
<li>
<p><strong>Models</strong>: Hugging Face hosts a vast repository of pretrained AI models that are readily accessible and highly customizable. This repository is called the Model Hub, and it hosts models covering a wide range of tasks, including text classification, text generation, translation, summarization, speech recognition, image classification, and more. The platform is community-driven and allows users to contribute their own models, which facilitates a diverse and ever-growing selection.</p>
</li>
<li>
<p><strong>Datasets</strong>: Hugging Face has a library of thousands of datasets that you can use to train, benchmark, and enhance your models. These range from small-scale benchmarks to massive, real-world datasets that encompass a variety of domains, such as text, image, and audio data. Like the Model Hub, 🤗 Datasets supports community contributions and provides the tools you need to search, download, and use data in your machine learning projects. </p>
</li>
<li>
<p><strong>Spaces</strong>: Spaces allows you to deploy and share machine learning applications directly on the Hugging Face website. This service supports a variety of frameworks and interfaces, including Streamlit, Gradio, and Jupyter notebooks. It is particularly useful for showcasing model capabilities, hosting interactive demos, or for educational purposes, as it allows you to interact with models in real time.</p>
</li>
<li>
<p><strong>Paid offerings</strong>: Hugging Face also offers several <a href="https://huggingface.co/pricing">paid services</a> for enterprises and advanced users. These include the Pro Account, the Enterprise Hub, and Inference Endpoints. These solutions offer private model hosting, advanced collaboration tools, and dedicated support to help organizations scale their AI operations effectively.</p>
</li>
</ul>
<p>These resources empower you to accelerate your AI projects and encourage collaboration and innovation within the community. Whether you’re a novice looking to experiment with pretrained models, or an enterprise seeking robust AI solutions, Hugging Face offers tools and platforms that cater to a wide range of needs.</p>
<p>This tutorial focuses on Transformers, a Python library that lets you run just about any model in the Model Hub. Before using <code>transformers</code>, you’ll need to understand what model cards are, and that’s what you’ll do next.</p>
<h3 id="understanding-model-cards">Understanding Model Cards<a class="headerlink" href="#understanding-model-cards" title="Permanent link"></a></h3>
<p><a href="https://huggingface.co/docs/hub/en/model-cards">Model cards</a> are the core components of the Model Hub, and you’ll need to understand how to search and read them to use models in Transformers. Model cards are nothing more than files that accompany each model to provide useful information. You can search for the model card you’re looking for on the Models page:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Screenshot_2024-05-25_at_2.50.35_PM.272112bd8bb6.png" target="_blank"><img alt="HuggingFace Models page" class="img-fluid mx-auto d-block " height="1936" src="https://files.realpython.com/media/Screenshot_2024-05-25_at_2.50.35_PM.272112bd8bb6.png" width="3370" /></a><figcaption class="figure-caption text-center">Hugging Face Models page</figcaption></figure>

<p>On the left side of the Models page, you can search for model cards based on the task you’re interested in. For example, if you’re interested in <a href="https://huggingface.co/tasks/zero-shot-classification">zero-shot text classification</a>, you can click the <code>Zero-Shot Classification</code> button under the <code>Natural Language Processing</code> section:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Screenshot_2024-05-26_at_1.16.02_PM.eecd94e4a2d0.png" target="_blank"><img alt="HuggingFace Models page filtered to zero-shot text classification" class="img-fluid mx-auto d-block " height="1666" src="https://files.realpython.com/media/Screenshot_2024-05-26_at_1.16.02_PM.eecd94e4a2d0.png" width="3074" /></a><figcaption class="figure-caption text-center">Hugging Face Models page filtered for zero-shot text classification models</figcaption></figure>

<p>In this search, you can see 266 different zero-shot text classification models, which is a paradigm where language models assign labels to text without explicit training or seeing any examples. In the upper-right corner, you can sort the search results based on model likes, downloads, creation dates, updated dates, and popularity trends. </p>
<p>Each model card button tells you the model’s task, when it was last updated, and how many downloads and likes it has. When you click a model card button, say the one for the <a href="https://huggingface.co/facebook/bart-large-mnli"><code>facebook/bart-large-mnli</code></a> model, the model card will open and display all of the model’s information:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Screenshot_2024-05-26_at_1.36.57_PM.87c9cde69339.png" target="_blank"><img alt="HuggingFace model card" class="img-fluid mx-auto d-block " height="1944" src="https://files.realpython.com/media/Screenshot_2024-05-26_at_1.36.57_PM.87c9cde69339.png" width="3448" /></a><figcaption class="figure-caption text-center">A Hugging Face model card</figcaption></figure>

<p>Even though a model card can display just about anything, Hugging Face has <a href="https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/templates/modelcard_template.md">outlined</a> the information that a good model card should provide. This includes detailed information about the model, its uses and limitations, the training parameters and experiment details, the dataset used to train the model, and the model’s evaluation performance.</p>
<p>A high-quality model card also includes metadata such as the model’s license, references to the training data, and links to research papers that describe the model in detail. In some model cards, you’ll also get to tinker with a deployed instance of the model via the <a href="https://huggingface.co/inference-api/serverless">Inference API</a>. You can see an example of this in the <code>facebook/bart-large-mnli</code> model card:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Screenshot_2024-05-27_at_10.34.39_PM.3e20bb8f558a.png" target="_blank"><img alt="HuggingFace Inference API within A model card" class="img-fluid mx-auto d-block " height="1106" src="https://files.realpython.com/media/Screenshot_2024-05-27_at_10.34.39_PM.3e20bb8f558a.png" width="1822" /></a><figcaption class="figure-caption text-center">Tinker with Hugging Face models using the Inference API</figcaption></figure>

</div><h2><a href="https://realpython.com/huggingface-transformers/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/huggingface-transformers/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Hugging Face Transformers</title>
<link>https://realpython.com/quizzes/hugging-face-transformers/</link>
<guid>https://realpython.com/quizzes/hugging-face-transformers/</guid>
<content:encoded><![CDATA[
<div> transformer, natural language processing, computer vision, machine learning, Hugging Face

总结:<br /><br /> Hugging Face是一个流行的库，用于在自然语言处理任务、计算机视觉和其他机器学习应用中处理transformer模型。该库在各种领域都得到广泛应用，特别是在处理自然语言处理和计算机视觉任务中表现出色。Hugging Face库为开发人员提供了丰富的工具和功能，使其在构建和部署各种机器学习模型时能够更加高效和灵活。通过使用Hugging Face库，开发人员可以快速搭建和训练transformer模型，从而实现更复杂的自然语言处理和计算机视觉任务。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/huggingface-transformers/">Hugging Face Transformers</a>. This library is a popular choice for working with transformer models in natural language processing tasks, computer vision, and other machine learning applications.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>pandas GroupBy: Grouping Real World Data in Python</title>
<link>https://realpython.com/courses/pandas-groupby-real-world-data/</link>
<guid>https://realpython.com/courses/pandas-groupby-real-world-data/</guid>
<content:encoded><![CDATA[
<div> pandas GroupBy操作，实际数据，split-apply-combine，分解操作链，方法分类<br />
<br />
使用pandas GroupBy操作处理真实数据时，可以理解split-apply-combine操作链如何运作。我们将学习如何将这个操作链分解为步骤，并根据意图和结果对pandas GroupBy对象的方法进行分类。这样可以帮助您更好地掌握和使用pandas的GroupBy功能。<br />
<br />
总结: 本课程通过实际数据集演示了如何使用pandas GroupBy操作，详细讲解了split-apply-combine操作链的工作原理，以及如何将其分解为步骤。同时，还介绍了如何根据意图和结果对pandas GroupBy对象的方法进行分类。这有助于提升对pandas GroupBy操作的理解和应用能力。 <div>
<p>Whether you&rsquo;ve just started working with <a href="https://realpython.com/pandas-python-explore-dataset/">pandas</a> and want to master one of its core capabilities, or you&rsquo;re looking to fill in some gaps in your understanding about <code>.groupby()</code>, this course will help you to break down and visualize a <strong>pandas GroupBy</strong> operation from start to finish.</p>
<p>This course is meant to complement the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html">official pandas documentation</a> and the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook-grouping">pandas Cookbook</a>, where there are self-contained, bite-sized examples. Here, however, you&rsquo;ll focus on three more involved walkthroughs that use real-world datasets.</p>
<p><strong>In this course, you&rsquo;ll cover:</strong></p>
<ul>
<li>How to use pandas <strong>GroupBy operations</strong> on <strong>real-world data</strong></li>
<li>How the <strong>split-apply-combine</strong> chain of operations works</li>
<li>How to <strong>decompose</strong> the split-apply-combine chain into steps</li>
<li>How to <strong>categorize methods</strong> of a pandas GroupBy object based on their intent and result</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>Logging in Python</title>
<link>https://realpython.com/python-logging/</link>
<guid>https://realpython.com/python-logging/</guid>
<content:encoded><![CDATA[
<div> logging, Python, module, records, levels
总结:<br /><br />本文介绍了在Python开发中记录日志的重要性。通过Python的logging模块，开发人员可以方便地记录应用程序执行过程中的相关信息。文章中提到了如何使用logging模块、设置基本的日志配置、利用日志级别、为日志消息添加格式化等内容。此外，还介绍了日志记录的作用和好处，以及日志记录在调试错误、分析性能和规划应用程序的扩展方面的重要性。文章还提到了Python的logging模块中的五个默认日志级别和它们的不同用途。通过本文，读者可以了解如何利用logging模块为Python应用程序添加强大的日志功能。 <div>
<div><p>Recording relevant information during the execution of your program is a good practice as a Python developer when you want to gain a better understanding of your code. This practice is called <strong>logging</strong>, and it’s a very useful tool for your programmer’s toolbox. It can help you discover scenarios that you might not have thought of while developing.</p>
<p>These records are called <strong>logs</strong>, and they can serve as an extra set of eyes that are constantly looking at your application’s flow. Logs can store information, like which user or IP accessed the application. If an error occurs, then logs may provide more insights than a stack trace by telling you the state of the program before the error and the line of code where it occurred.</p>
<p>Python provides a logging system as part of its standard library. You can add logging to your application with just a few lines of code. </p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Work with Python’s <strong><code>logging</code> module</strong></li>
<li>Set up a <strong>basic logging configuration</strong></li>
<li>Leverage <strong>log levels</strong></li>
<li>Style your log messages with <strong>formatters</strong></li>
<li>Redirect log records with <strong>handlers</strong></li>
<li>Define logging rules with <strong>filters</strong></li>
</ul>
<p>When you log useful data from the right places, you can debug errors, analyze the application’s performance to plan for scaling, or look at usage patterns to plan for marketing.</p>
<p>You’ll do the coding for this tutorial in the <a href="https://realpython.com/python-repl/">Python standard REPL</a>. If you prefer Python files, then you’ll find a full logging example as a script in the materials of this tutorial. You can download this script by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-logging-code/">Click here to download the free sample code</a> that you’ll use to learn about logging in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Logging in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/logging-in-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Logging in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Logging-in-Python_Watermarked.4ca8974dc55c.jpg" style="background: #e6c7ab;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/logging-in-python/"><span class="my-0 h4">Logging in Python</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python's logging module. With this knowledge, you'll be able to add logging to your applications, which can help you debug errors and analyze performance.</p>
    </div>
  </div>

</div>

<p>If you commonly use Python’s <a href="https://realpython.com/python-print/"><code>print()</code></a> function to get information about the flow of your programs, then logging is the natural next step for you. This tutorial will guide you through creating your first logs and show you how to make logging grow with your projects.</p>
<h2 id="starting-with-pythons-logging-module">Starting With Python’s Logging Module<a class="headerlink" href="#starting-with-pythons-logging-module" title="Permanent link"></a></h2>
<p>The <a href="https://docs.python.org/3/library/logging.html#module-logging/"><code>logging</code> module</a> in Python’s standard library is a ready-to-use, powerful module that’s designed to meet the needs of beginners as well as enterprise teams.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Since logs offer a variety of insights, the <code>logging</code> module is often used by other third-party Python libraries, too. Once you’re more advanced in the practice of logging, you can integrate your log messages with the ones from those libraries to produce a homogeneous log for your application.</p>
<p>To leverage this versatility, it’s a good idea to get a better understanding of how the <code>logging</code> module works under the hood. For example, you could take <a href="https://realpython.com/python-logging-source-code/">a stroll through the <code>logging</code> module’s source code</a></p>
</div>
<p>The main component of the <code>logging</code> module is something called the <strong>logger</strong>. You can think of the logger as a reporter in your code that decides what to record, at what level of detail, and where to store or send these records.</p>
<h3 id="exploring-the-root-logger">Exploring the Root Logger<a class="headerlink" href="#exploring-the-root-logger" title="Permanent link"></a></h3>
<p>To get a first impression of how the <code>logging</code> module and a logger work, open the <a href="https://realpython.com/python-repl/">Python standard REPL</a> and enter the code below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">logging</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s2">"Remain calm!"</span><span class="p">)</span>
<span class="go">WARNING:root:Remain calm!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The output shows the severity level before each message along with <code>root</code>, which is the name the <code>logging</code> module gives to its default logger. This output shows the default format that can be configured to include things like a timestamp or other details.</p>
<p>In the example above, you’re sending a message on the <code>root</code> logger. The <strong>log level</strong> of the message is <code>WARNING</code>. Log levels are an important aspect of logging. By default, there are five standard levels indicating the severity of events. Each has a corresponding function that can be used to log events at that level of severity. </p>
<div class="alert alert-primary">
<p><strong>Note:</strong> There’s also a <code>NOTSET</code> log level, which you’ll encounter later in this tutorial when you learn about custom logging handlers.</p>
</div>
<p>Here are the five default log levels, in order of increasing severity:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Log Level</th>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>DEBUG</code></td>
<td><code>logging.debug()</code></td>
<td>Provides detailed information that’s valuable to you as a developer.</td>
</tr>
<tr>
<td><code>INFO</code></td>
<td><code>logging.info()</code></td>
<td>Provides general information about what’s going on with your program.</td>
</tr>
<tr>
<td><code>WARNING</code></td>
<td><code>logging.warning()</code></td>
<td>Indicates that there’s something you should look into.</td>
</tr>
<tr>
<td><code>ERROR</code></td>
<td><code>logging.error()</code></td>
<td>Alerts you to an unexpected problem that’s occured in your program.</td>
</tr>
<tr>
<td><code>CRITICAL</code></td>
<td><code>logging.critical()</code></td>
<td>Tells you that a serious error has occurred and may have crashed your app.</td>
</tr>
</tbody>
</table>
</div>
<p>The <code>logging</code> module provides you with a default logger that allows you to get started with logging without needing to do much configuration. However, the <code>logging</code> functions listed in the table above reveal a quirk that you may not expect:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"This is a debug message"</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">"This is an info message"</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s2">"This is a warning message"</span><span class="p">)</span>
<span class="go">WARNING:root:This is a warning message</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">"This is an error message"</span><span class="p">)</span>
<span class="go">ERROR:root:This is an error message</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">logging</span><span class="o">.</span><span class="n">critical</span><span class="p">(</span><span class="s2">"This is a critical message"</span><span class="p">)</span>
<span class="go">CRITICAL:root:This is a critical message</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Notice that the <code>debug()</code> and <code>info()</code> messages didn’t get logged. This is because, by default, the logging module logs the messages with a severity level of <code>WARNING</code> or above. You can change that by configuring the logging module to log events of all levels. </p>
</div><h2><a href="https://realpython.com/python-logging/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-logging/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-22T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #213: Constraint Programming &amp; Exploring Python's Built-in Functions</title>
<link>https://realpython.com/podcasts/rpp/213/</link>
<guid>https://realpython.com/podcasts/rpp/213/</guid>
<content:encoded><![CDATA[
<div> discrete optimization problems, constraint programming, Python, Christopher Trudeau, PyCoder's Weekly<br />
<br />
关键词提取：discrete optimization problems, constraint programming, Python, Christopher Trudeau, PyCoder's Weekly。这篇文章介绍了离散优化问题以及如何使用Python中的约束编程来解决这些问题。Christopher Trudeau在本周的节目中带来了另一批PyCoder's Weekly的文章和项目。文章详细介绍了离散优化问题的概念，以及如何利用约束编程的方法在Python中解决这些问题。约束编程是一种解决复杂问题的方法，其重点在于定义问题的变量和约束条件，然后找到满足所有限制条件的最优解。通过Python中的约束编程技术，可以以更高效和可维护的方式解决各种离散优化问题。总结：离散优化问题是一种重要的问题类型，利用约束编程可以在Python中有效解决这类问题。Christopher Trudeau带来了关于PyCoder's Weekly的最新资讯。 <div>
<p>What are discrete optimization problems? How do you solve them with constraint programming in Python? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Strings and Character Data</title>
<link>https://realpython.com/quizzes/python-strings-update/</link>
<guid>https://realpython.com/quizzes/python-strings-update/</guid>
<content:encoded><![CDATA[
<div> Python、string data type、manipulating、textual data、string methods<br />
Python的字符串数据类型提供了丰富的操作方法，可以用来处理文本数据。通过使用字符串字面值和str()函数可以创建字符串，利用字符串方法可以进行各种操作。除此之外，还可以使用运算符和内置函数来处理字符串，通过索引和切片操作可以获取字符串中的特定部分。通过本文的学习和练习，可以加深对Python字符串数据类型的理解，提升对文本数据操作的能力。<br /><br />总结: <div>
<p>This quiz will evaluate your understanding of Python&rsquo;s string data type and test your knowledge about manipulating textual data with string objects. You&rsquo;ll cover the basics of creating strings using literals and the str() function, applying string methods, using operators and built-in functions with strings, indexing and slicing strings, and more!</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-strings/">Strings and Character Data in Python</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How Do You Choose Python Function Names?</title>
<link>https://realpython.com/quizzes/python-function-names/</link>
<guid>https://realpython.com/quizzes/python-function-names/</guid>
<content:encoded><![CDATA[
<div> Python、函数名称、可读性、维护性、减少错误
<br />
函数名称在Python中起着至关重要的作用。选择合适的函数名称可以使代码更具可读性和易维护性，也能减少错误的发生。通过本文，回顾了命名Python函数的规则和约定，强调了它们对于编程的重要性。希望通过合理命名函数，可以让代码更加清晰易懂，减少出错的可能性。总结：编程中，选择合适的函数名称对代码质量和效率至关重要，可读性和维护性是关键，也能有效减少bug的出现。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-function-names/">how to choose Python function names</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the rules and conventions for naming Python functions
and why they&rsquo;re important for <a href="https://realpython.com/learning-paths/writing-pythonic-code/">writing Pythonic code</a>.</p>
<p>Choosing the ideal Python function names makes your code more readable and easier to maintain.
Code with well-chosen names can also be less prone to bugs.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Protocols: Leveraging Structural Subtyping</title>
<link>https://realpython.com/python-protocol/</link>
<guid>https://realpython.com/python-protocol/</guid>
<content:encoded><![CDATA[
<div> protocols, static typing, duck typing, structural subtyping, Python

总结:<br /><br />
本文介绍了Python中的“协议”概念，重点在于第二种意义上的协议，即指定类必须实现的方法和属性以被认为是某种类型。Python是动态类型语言，但通过类型提示实现了静态类型检查，而通过协议可以实现静态鸭子类型。静态类型和动态类型之间的对比，以及鸭子类型的灵活性，可以使类之间建立关系而无需依赖继承。通过协议，可以定义类的内部结构，实现结构子类型化。最后还介绍了如何使用Python的Protocol类创建自定义协议，以及协议和抽象基类之间的区别。 <div>
<div><p>In Python, a <strong>protocol</strong> specifies the methods and attributes that a class must implement to be considered of a given type. Protocols are important in Python’s <strong>type hint system</strong>, which allows for static type checking through external tools, such as <a href="http://mypy-lang.org/">mypy</a>, <a href="https://github.com/microsoft/pyright">Pyright</a>, and <a href="https://pyre-check.org/">Pyre</a>.</p>
<p>Before there were protocols, these tools could only check for <strong>nominal subtyping</strong> based on inheritance. There was no way to check for <strong>structural subtyping</strong>, which relies on the internal structure of classes. This limitation affected Python’s <strong>duck typing</strong> system, which allows you to use objects without considering their nominal types. Protocols overcome this limitation, making static duck typing possible.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Gain clarity around the use of the term <strong>protocol</strong> in Python</li>
<li>Learn how <strong>type hints</strong> facilitate <strong>static type checking</strong></li>
<li>Learn how protocols allow <strong>static duck typing</strong></li>
<li>Create custom protocols with the <strong><code>Protocol</code> class</strong></li>
<li>Understand the differences between <strong>protocols</strong> and <strong>abstract base classes</strong></li>
</ul>
<p>To get the most out of this tutorial, you’ll need to know the basics of <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a> in Python, including concepts such as <a href="https://realpython.com/python-classes/">classes</a> and <a href="https://realpython.com/inheritance-composition-python/">inheritance</a>. You should also know about <a href="https://realpython.com/python-type-checking/">type checking</a> and <a href="https://realpython.com/duck-typing-python/">duck typing</a> in Python.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-protocol-code/">Click here to download the free sample code</a> that shows you how to leverage structural subtyping with Python protocols</p>
</div>
<h2 id="the-meaning-of-protocol-in-python">The Meaning of “Protocol” in Python<a class="headerlink" href="#the-meaning-of-protocol-in-python" title="Permanent link"></a></h2>
<p>During Python’s evolution, the term <strong>protocol</strong> became overloaded with two subtly different meanings. The first meaning refers to internal protocols, such as the <a href="https://realpython.com/python-iterators-iterables/#what-is-the-python-iterator-protocol">iterator</a>, <a href="https://realpython.com/python-with-statement/#creating-custom-context-managers">context manager</a>, and <a href="https://realpython.com/python-descriptors/">descriptor</a> protocols.</p>
<p>These protocols are widely understood in the community and consist of <a href="https://realpython.com/python-magic-methods/">special methods</a> that make up a given protocol. For example, the <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__iter__"><code>.__iter__()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__"><code>.__next__()</code></a> methods define the iterator protocol.</p>
<p><a href="https://realpython.com/python38-new-features/">Python 3.8</a> introduced a second, slightly different type of <a href="https://realpython.com/python38-new-features/#more-precise-types">protocol</a>. These protocols specify the methods and attributes that a class must implement to be considered of a given type. So, these protocols also have to do with a class’s internal structure.</p>
<p>With this kind of protocol, you can define interchangeable classes as long as they share a common internal structure. This feature allows you to enforce a relationship between types or classes without the burden of <a href="https://realpython.com/inheritance-composition-python/#whats-inheritance">inheritance</a>. This relationship is known as <strong>structural subtyping</strong> or <a href="https://realpython.com/duck-typing-python/#understanding-type-hints-and-static-duck-typing">static duck typing</a>.</p>
<p>In this tutorial, you’ll focus on this second meaning of the term protocol. First, you’ll have a look at how Python manages types.</p>
<h2 id="dynamic-and-static-typing-in-python">Dynamic and Static Typing in Python<a class="headerlink" href="#dynamic-and-static-typing-in-python" title="Permanent link"></a></h2>
<p>Python is a dynamically typed language, which means that the Python interpreter checks an object’s type when the code runs. It also means that while a variable can only reference one object at a time, the type of that object can change during the variable’s lifetime.</p>
<p>For example, you can have a variable that starts as a string and changes into an integer number:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">value</span> <span class="o">=</span> <span class="s2">"One hundred"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value</span>
<span class="go">'One hundred'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">value</span> <span class="o">=</span> <span class="mi">100</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value</span>
<span class="go">100</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you have a variable that starts as a string. Later in your code, you change the variable’s value to an integer.</p>
<p>Because of its dynamic nature, Python has embraced a flexible typing system that’s known as duck typing.</p>
<h3 id="duck-typing">Duck Typing<a class="headerlink" href="#duck-typing" title="Permanent link"></a></h3>
<p>Duck typing is a <a href="https://en.wikipedia.org/wiki/Type_system">type system</a> in which an object is considered compatible with a given type if it has all the <a href="https://realpython.com/python-classes/#providing-behavior-with-methods">methods</a> and <a href="https://realpython.com/python-classes/#attaching-data-to-classes-and-instances">attributes</a> that the type requires. This typing system supports the ability to use objects of independent and decoupled classes in a specific context as long as they adhere to some common interface.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into duck typing, check out the <a href="https://realpython.com/duck-typing-python/">Duck Typing in Python: Writing Flexible and Decoupled Code</a> tutorial.</p>
</div>
<p>As an example of duck typing, you can consider built-in container data types, such as <a href="https://realpython.com/python-list/">lists</a>, <a href="https://realpython.com/python-tuple/">tuples</a>, <a href="https://realpython.com/python-strings/">strings</a>, <a href="https://realpython.com/python-dicts/">dictionaries</a>, and <a href="https://realpython.com/python-sets/">sets</a>. All of these data types support iteration:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">person</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"Jane"</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="s2">"Python Dev"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span> <span class="o">=</span> <span class="s2">"abc"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ordinals</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"one"</span><span class="p">:</span> <span class="s2">"first"</span><span class="p">,</span> <span class="s2">"two"</span><span class="p">:</span> <span class="s2">"second"</span><span class="p">,</span> <span class="s2">"three"</span><span class="p">:</span> <span class="s2">"third"</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">even_digits</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">containers</span> <span class="o">=</span> <span class="p">[</span><span class="n">numbers</span><span class="p">,</span> <span class="n">person</span><span class="p">,</span> <span class="n">letters</span><span class="p">,</span> <span class="n">ordinals</span><span class="p">,</span> <span class="n">even_digits</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">container</span> <span class="ow">in</span> <span class="n">containers</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">container</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">" "</span><span class="p">)</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">()</span>
<span class="gp">...</span>
<span class="go">1 2 3 </span>
<span class="go">Jane 25 Python Dev </span>
<span class="go">a b c </span>
<span class="go">one two three </span>
<span class="go">8 2 4 6 </span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code snippet, you define a few variables using different built-in types. Then, you start a <a href="https://realpython.com/python-for-loop/"><code>for</code></a> loop over the collections and iterate over each of them to print their elements to the screen. Even though the built-in types are significantly different from one another, they all support iteration.</p>
<p>The duck typing system allows you to create code that can work with different objects, provided that they share a common interface. This system allows you to set relationships between classes that don’t rely on inheritance, which produces flexible and decoupled code.</p>
</div><h2><a href="https://realpython.com/python-protocol/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-protocol/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Exercises Course: Introduction to Web Scraping With Python</title>
<link>https://realpython.com/courses/exercises-introduction-web-scraping/</link>
<guid>https://realpython.com/courses/exercises-introduction-web-scraping/</guid>
<content:encoded><![CDATA[
<div> web scraping, Python, data collection, parsing, website data<br />
Python社区提供了一些强大的网络爬虫工具，用于从网站中收集和解析原始数据。在互联网上，包含了世界上最丰富的信息来源。许多学科，如商业智能和调查报道，都可以从收集和分析网站数据中获益。在这门课程中，您将练习使用字符串方法和正则表达式解析网站数据，使用HTML解析器解析网站数据，与表单和其他网站组件进行交互。<br /><br />总结: <div>
<p><strong>Web scraping</strong> is the process of collecting and parsing raw data from the Web, and the Python community has come up with some pretty powerful web scraping tools.</p>
<p>The Internet hosts the greatest source of information on the planet. Many disciplines, such as <a href="https://realpython.com/learning-paths/data-science-python-core-skills/">data science</a>, business intelligence, and investigative reporting, can benefit enormously from collecting and analyzing data from websites. </p>
<p><strong>In this course, you&rsquo;ll practice:</strong></p>
<ul>
<li>Parsing website data using <strong>string methods</strong> and <strong>regular expressions</strong></li>
<li>Parsing website data using an <strong>HTML parser</strong></li>
<li>Interacting with <strong>forms</strong> and other website components</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>Split Your Dataset With scikit-learn's train_test_split()</title>
<link>https://realpython.com/train-test-split-python-data/</link>
<guid>https://realpython.com/train-test-split-python-data/</guid>
<content:encoded><![CDATA[
<div> 数据分割、模型评估、验证、train_test_split()、过拟合、欠拟合

分割数据集对于评估模型性能及验证至关重要。在监督学习中，需要将数据集分为训练集、验证集和测试集，以保持评估的客观性。训练集用于训练模型，验证集用于评估模型性能，测试集用于最终的模型评估。过拟合和欠拟合是常见问题，分割数据有助于发现这些问题。通过使用scikit-learn库中的train_test_split()函数，可以方便地实现数据分割功能。通过掌握这些基本概念和工具，可以有效地进行模型训练和评估，提高模型的预测性能。<br /><br />总结:数据的分割及合理利用可以有效评估模型性能，并避免过拟合和欠拟合问题。 <div>
<div><p>One of the key aspects of supervised <a href="https://realpython.com/learning-paths/machine-learning-python/">machine learning</a> is model evaluation and validation. When you evaluate the predictive performance of your model, it’s essential that the process be unbiased. Using <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html"><strong><code>train_test_split()</code></strong></a> from the data science library <a href="https://scikit-learn.org/stable/index.html">scikit-learn</a>, you can split your dataset into subsets that minimize the potential for bias in your evaluation and validation process.</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>Why you need to <strong>split your dataset</strong> in supervised machine learning</li>
<li>Which <strong>subsets</strong> of the dataset you need for an unbiased evaluation of your model</li>
<li>How to use <strong><code>train_test_split()</code></strong> to split your data</li>
<li>How to combine <code>train_test_split()</code> with <strong>prediction methods</strong></li>
</ul>
<p>In addition, you’ll get information on related tools from <a href="https://scikit-learn.org/stable/api/sklearn.model_selection.html"><code>sklearn.model_selection</code></a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/train-test-split-python-data-code/">Click here to download the free sample code</a> that you’ll use to learn about splitting your dataset with scikit-learn’s train_test_split().</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Split Your Dataset With scikit-learn's train_test_split()” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/train-test-split-python-data/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Split Your Dataset With scikit-learn's train_test_split()" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Splitting-Datasets-With-sklearns-train_test_split_Watermarked.13dcac93b15d.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/train-test-split-python-data/"><span class="my-0 h4">Split Your Dataset With scikit-learn's train_test_split()</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of how to use the train_test_split() function from the scikit-learn library to split your dataset into subsets for unbiased evaluation in machine learning.</p>
    </div>
  </div>

</div>

<h2 id="the-importance-of-data-splitting">The Importance of Data Splitting<a class="headerlink" href="#the-importance-of-data-splitting" title="Permanent link"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Supervised_learning">Supervised machine learning</a> is about creating models that precisely map the given inputs to the given outputs. Inputs are also called independent variables or <strong>predictors</strong>, while outputs may be referred to as dependent variables or <strong>responses</strong>.</p>
<p>How you measure the precision of your model depends on the type of a problem you’re trying to solve. In <a href="https://realpython.com/linear-regression-in-python/#regression">regression analysis</a>, you typically use the <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination">coefficient of determination</a>, <a href="https://en.wikipedia.org/wiki/Root-mean-square_deviation">root mean square error</a>, <a href="https://en.wikipedia.org/wiki/Mean_absolute_error">mean absolute error</a>, or similar quantities. For <a href="https://realpython.com/logistic-regression-python/#classification">classification</a> problems, you often apply <a href="https://developers.google.com/machine-learning/crash-course/classification/accuracy">accuracy</a>, <a href="https://en.wikipedia.org/wiki/Precision_and_recall">precision, recall</a>, <a href="https://en.wikipedia.org/wiki/F1_score">F1 score</a>, and related indicators.</p>
<p>The acceptable numeric values that measure precision vary from field to field. You can find detailed explanations from <a href="https://statisticsbyjim.com/regression/how-high-r-squared/">Statistics By Jim</a>, <a href="https://www.quora.com/How-do-I-decide-whether-a-certain-R-square-value-is-good-enough-in-regression-analysis">Quora</a>, and many other resources.</p>
<p>What’s most important to understand is that you usually need <strong>unbiased evaluation</strong> to properly use these measures, assess the predictive performance of your model, and validate the model.</p>
<p>This means that you can’t evaluate the predictive performance of a model with the same data you used for training. You need evaluate the model with <strong>fresh data</strong> that hasn’t been seen by the model before. You can accomplish that by splitting your dataset before you use it.</p>
<h3 id="training-validation-and-test-sets">Training, Validation, and Test Sets<a class="headerlink" href="#training-validation-and-test-sets" title="Permanent link"></a></h3>
<p>Splitting your dataset is essential for an unbiased evaluation of prediction performance. In most cases, it’s enough to split your dataset randomly into <a href="https://en.wikipedia.org/wiki/Training,_validation,_and_test_sets">three subsets</a>:</p>
<ol>
<li>
<p><strong>The training set</strong> is applied to train or <strong>fit</strong> your model. For example, you use the training set to find the optimal weights, or coefficients, for <a href="https://realpython.com/linear-regression-in-python/">linear regression</a>, <a href="https://realpython.com/logistic-regression-python/">logistic regression</a>, or <a href="https://en.wikipedia.org/wiki/Artificial_neural_network">neural networks</a>.</p>
</li>
<li>
<p><strong>The validation set</strong> is used for unbiased model evaluation during <a href="https://en.wikipedia.org/wiki/Hyperparameter_optimization">hyperparameter tuning</a>. For example, when you want to find the optimal number of neurons in a neural network or the best kernel for a support vector machine, you experiment with different values. For each considered setting of hyperparameters, you fit the model with the training set and assess its performance with the validation set.</p>
</li>
<li>
<p><strong>The test set</strong> is needed for an unbiased evaluation of the final model. You shouldn’t use it for fitting or validation.</p>
</li>
</ol>
<p>In less complex cases, when you don’t have to tune hyperparameters, it’s okay to work with only the training and test sets.</p>
<h3 id="underfitting-and-overfitting">Underfitting and Overfitting<a class="headerlink" href="#underfitting-and-overfitting" title="Permanent link"></a></h3>
<p>Splitting a dataset might also be important for detecting if your model suffers from one of two very common problems, called <a href="https://en.wikipedia.org/wiki/Overfitting">underfitting and overfitting</a>:</p>
<ol>
<li>
<p><strong>Underfitting</strong> is usually the consequence of a model being unable to encapsulate the relations among data. For example, this can happen when trying to represent nonlinear relations with a linear model. Underfitted models will likely have poor performance with both training and test sets.</p>
</li>
<li>
<p><strong>Overfitting</strong> usually takes place when a model has an excessively complex structure and learns both the existing relations among data and noise. Such models often have bad generalization capabilities. Although they work well with training data, they usually yield poor performance with unseen test data.</p>
</li>
</ol>
<p>You can find a more detailed explanation of underfitting and overfitting in <a href="https://realpython.com/linear-regression-in-python/#underfitting-and-overfitting">Linear Regression in Python</a>.</p>
<h2 id="prerequisites-for-using-train_test_split">Prerequisites for Using <code>train_test_split()</code><a class="headerlink" href="#prerequisites-for-using-train_test_split" title="Permanent link"></a></h2>
<p>Now that you understand the need to split a dataset in order to perform unbiased model evaluation and identify underfitting or overfitting, you’re ready to learn how to split your own datasets.</p>
<p>You’ll use version 1.5.0 of <strong>scikit-learn</strong>, or <strong><code>sklearn</code></strong>. It has many packages for data science and machine learning, but for this tutorial, you’ll focus on the  <strong><code>model_selection</code></strong>  package, specifically on the function <strong><code>train_test_split()</code></strong>. </p>
<div class="alert alert-primary">
<p><strong>Note:</strong> While this tutorial is tested with this specific version of scikit-learn, the features that you’ll use are core to the library and should work equivalently in other versions of scikit-learn as well.</p>
</div>
<p>You can <a href="https://scikit-learn.org/stable/install.html">install <code>sklearn</code></a> with <a href="https://realpython.com/what-is-pip/"><code>pip</code></a>:</p>
</div><h2><a href="https://realpython.com/train-test-split-python-data/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/train-test-split-python-data/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Use Generators and yield in Python</title>
<link>https://realpython.com/quizzes/generators-and-yield-in-python/</link>
<guid>https://realpython.com/quizzes/generators-and-yield-in-python/</guid>
<content:encoded><![CDATA[
<div> Generators, Python yield statement, large datasets, maintain internal state, efficient data pipelines
<br />
Python的生成器和yield语句可以帮助处理大型数据集，避免内存溢出问题。另一个用例是在需要保持内部状态的复杂函数中使用生成器。理解Python生成器后，可以更Pythonic地处理大型数据集，创建生成器函数和表达式，以及构建高效的数据管道。 
<br /><br />总结: 理解Python生成器的工作原理可以有效处理大型数据集、维护内部状态，并构建高效的数据处理流程。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/introduction-to-python-generators/">Python generators</a>.</p>
<p>Generators and the Python <code>yield</code> statement can help you when you&rsquo;re working with large datasets that might overwhelm your machine&rsquo;s memory. Another use case is when you have a complex function that needs to maintain an internal state every time it&rsquo;s called.</p>
<p>When you understand Python generators, then you&rsquo;ll be able to work with large datasets in a more Pythonic fashion, create generator functions and expressions, and apply your knowledge towards building efficient data pipelines.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Write Beautiful Python Code With PEP 8</title>
<link>https://realpython.com/quizzes/python-pep8/</link>
<guid>https://realpython.com/quizzes/python-pep8/</guid>
<content:encoded><![CDATA[
<div> PEP 8, guidelines, development environment, Python code, quiz <br />
PEP 8 是针对 Python 代码风格的规范指南，通过本文中提供的测验来测试对 PEP 8 的理解。在文中，强调了如何遵循 PEP 8 的关键指导原则以及如何设置开发环境来编写符合 PEP 8 标准的 Python 代码。通过学习本文，可以加深对 PEP 8 的理解，提高写出符合规范的 Python 代码的能力。同时，本文还提供了一个技巧，即通过订阅邮件获取每隔几天发送的 Python 小技巧，帮助进一步提升 Python 编程技能。 <br /><br />总结: <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-pep8/">how to write beautiful Python code with PEP 8</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the key guidelines laid out in PEP 8 and how to set up your development environment to write PEP 8 compliant Python code.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Type Checking</title>
<link>https://realpython.com/quizzes/python-type-checking/</link>
<guid>https://realpython.com/quizzes/python-type-checking/</guid>
<content:encoded><![CDATA[
<div> type annotations, type hints, static types, static type checker, runtime enforcement
<br /><br />总结:
在这个测验中，您将测试自己对类型注解和类型提示的理解，将静态类型添加到代码中，运行静态类型检查器，并在运行时执行类型强制。通过这个测验，您将重新审视类型注解和类型提示，为代码添加静态类型，运行静态类型检查器，并在运行时强制类型。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-type-checking/">Python Type Checking</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit type annotations and type hints, adding static types to code, running a static type checker, and enforcing types at runtime.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-14T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Flatten a List of Lists in Python</title>
<link>https://realpython.com/quizzes/python-flatten-list/</link>
<guid>https://realpython.com/quizzes/python-flatten-list/</guid>
<content:encoded><![CDATA[
<div> 关键词：多维列表、一维列表、转换、代码、理解

多维列表转换一维列表，通过编写代码来强化对这一概念的理解。本文通过测试和问题回答，帮助读者重新学习如何将多维列表（如矩阵）转换为一维列表。文章提供了实际的编程练习，让读者亲自动手进行转换操作，加深对概念的理解。不仅仅是理论知识，通过实际操作，读者可以更好地掌握如何在Python中实现多维列表向一维列表的转换。通过这个过程，读者可以提升自己的编程能力，同时加深对Python中数据结构操作的理解。<br /><br />总结: 多维列表转换一维列表的概念，通过编写代码和回答问题来加深理解，实践操作有助于提升编程能力和掌握Python数据结构操作。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-flatten-list/">how to flatten a list in Python</a>.</p>
<p>You&rsquo;ll write code and answer questions to revisit the concept of converting a multidimensional list, such as a matrix, into a one-dimensional list.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-14T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #212: Digging Into Graph Theory in Python With David Amos</title>
<link>https://realpython.com/podcasts/rpp/212/</link>
<guid>https://realpython.com/podcasts/rpp/212/</guid>
<content:encoded><![CDATA[
<div> graph theory, Python, resources, libraries, exploration
Graph theory是一个有趣的主题，可以用Python进行探索。本文中将介绍使用Python来学习和实验graph theory的资源和库。文章中的嘉宾David Amos介绍了他的研究内容，并分享了关于Python中graph theory的知识。总结: 本文介绍了graph theory在Python中的探索和学习方法，包括相关资源和库。David Amos分享了他在这方面的知识和经验。 <div>
<p>Have you wondered about graph theory and how to start exploring it in Python? What resources and Python libraries can you use to experiment and learn more? This week on the show, former co-host David Amos returns to talk about what he's been up to and share his knowledge about graph theory in Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Build a Blog Using Django, GraphQL, and Vue</title>
<link>https://realpython.com/quizzes/python-django-blog/</link>
<guid>https://realpython.com/quizzes/python-django-blog/</guid>
<content:encoded><![CDATA[
<div> Django, Vue, GraphQL, blog, back end
<br />
本文介绍了如何构建一个使用Django构建博客后端和Vue构建前端的应用程序，并通过GraphQL进行通信。您将学习如何同时在计算机上运行Django服务器和Vue应用程序。总结: 本文讲解了如何使用Django构建博客后端和Vue构建前端，并通过GraphQL进行通信。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of building a Django blog back end and a Vue front end, using GraphQL to communicate between them. </p>
<p>You&rsquo;ll revisit how to run the Django server and a Vue application on your computer at the same time.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-11T12:00:00+00:00</pubDate>
</item>
<item>
<title>How Do You Choose Python Function Names?</title>
<link>https://realpython.com/python-function-names/</link>
<guid>https://realpython.com/python-function-names/</guid>
<content:encoded><![CDATA[
<div> Python, function names, naming conventions, snake case, rules

Python编程中选择函数名称是一项具有挑战性的任务。在Python中，函数命名应该遵循规则和常规惯例，使用snake_case风格，并描述清晰简洁的函数操作。同时避免使用数字开头、空格或特殊字符，并尽量使用拉丁字符。此外，根据PEP 8风格指南，Python函数应该使用小写字母和下划线分隔单词。适当使用下划线可以表示函数仅供内部使用或避免与Python关键字或内置函数发生冲突。双前导下划线通常用于类中的属性，以实现名称混淆。正确选择Python函数名称有助于提高代码可读性、易维护性和减少错误。<br /><br />总结: <div>
<div><p><em>One of the hardest decisions in programming is choosing names</em>. Programmers often use this phrase to highight the challenges of selecting Python function names. It may be an exaggeration, but there’s still a lot of truth in it.</p>
<p>There are some hard <strong>rules</strong> you can’t break when naming Python functions and other objects. There are also other <strong>conventions and best practices</strong> that don’t raise errors when you break them, but they’re still important when writing <strong>Pythonic code</strong>.</p>
<p>Choosing the ideal Python function names makes your code more readable and easier to maintain. Code with well-chosen names can also be less prone to bugs.</p>
<p>In this tutorial, you’ll learn about the rules and conventions for naming Python functions and why they’re important. So, <strong>how do you choose Python function names?</strong></p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-function-names-code/">Click here to download the free sample code</a> that you’ll use as you learn how to choose Python function names.</p>
</div>
<h2 id="in-short-use-descriptive-python-function-names-using-snake_case">In Short: Use Descriptive Python Function Names Using <code>snake_case</code><a class="headerlink" href="#in-short-use-descriptive-python-function-names-using-snake_case" title="Permanent link"></a></h2>
<p>In Python, the labels you use to refer to objects are called <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers"><em>identifiers</em> or <em>names</em></a>. You set a name for a Python function when you use the <a href="https://realpython.com/defining-your-own-python-function/"><code>def</code> keyword</a>.</p>
<p>When creating Python names, you can use uppercase and lowercase letters, the digits 0 to 9, and the underscore (<code>_</code>). However, you can’t use digits as the first character. You can use some other <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> characters in Python identifiers, but not all Unicode characters are valid. <a href="https://github.com/python/cpython/pull/1686">Not even 🐍 is valid</a>!</p>
<p>Still, it’s preferable to use only the Latin characters present in <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>. The Latin characters are easier to type and more universally found on most keyboards. Using other characters rarely improves readability and can be a source of bugs.</p>
<p>Here are some syntactically valid and invalid names for Python functions and other objects:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Name</th>
<th>Validity</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>number</code></td>
<td>Valid</td>
<td></td>
</tr>
<tr>
<td><code>first_name</code></td>
<td>Valid</td>
<td></td>
</tr>
<tr>
<td><code>first name</code></td>
<td>Invalid</td>
<td>No whitespace allowed</td>
</tr>
<tr>
<td><code>first_10_numbers</code></td>
<td>Valid</td>
<td></td>
</tr>
<tr>
<td><code>10_numbers</code></td>
<td>Invalid</td>
<td>No digits allowed at the start of names</td>
</tr>
<tr>
<td><code>_name</code></td>
<td>Valid</td>
<td></td>
</tr>
<tr>
<td><code>greeting!</code></td>
<td>Invalid</td>
<td>No ASCII punctuation allowed except for the underscore (<code>_</code>)</td>
</tr>
<tr>
<td><code>café</code></td>
<td>Valid</td>
<td>Not recommended</td>
</tr>
<tr>
<td><code>你好</code></td>
<td>Valid</td>
<td>Not recommended</td>
</tr>
<tr>
<td><code>hello⁀world</code></td>
<td>Valid</td>
<td>Not recommended—<a href="https://en.wikipedia.org/wiki/Template:Punctuation_marks_in_Unicode#Pc,_connector">connector punctuation characters</a> and other marks are valid characters</td>
</tr>
</tbody>
</table>
</div>
<p>However, Python has conventions about naming functions that go beyond these rules. One of the core Python Enhancement Proposals, <a href="https://peps.python.org/pep-0008/#naming-conventions">PEP 8</a>, defines Python’s style guide, which includes naming conventions.  </p>
<p>According to PEP 8 style guidelines, Python functions should be named using lowercase letters and with an underscore separating words. This style is often referred to as <a href="https://simple.wikipedia.org/wiki/Snake_case">snake case</a>. For example, <code>get_text()</code> is a better function name than <code>getText()</code> in Python.</p>
<p>Function names should also describe the actions being performed by the function clearly and concisely whenever possible. For example, for a function that calculates the total value of an online order, <code>calculate_total()</code> is a better name than <code>total()</code>.</p>
<p>You’ll explore these conventions and best practices in more detail in the following sections of this tutorial.</p>
<h2 id="what-case-should-you-use-for-python-function-names">What Case Should You Use for Python Function Names?<a class="headerlink" href="#what-case-should-you-use-for-python-function-names" title="Permanent link"></a></h2>
<p>Several character cases, like <strong>snake case</strong> and <strong>camel case</strong>, are used in programming for identifiers to name the various entities. Programming languages have their own preferences, so the right style for one language may not be suitable for another.</p>
<p>Python functions are generally written in <em>snake case</em>. When you use this format, all the letters are lowercase, including the first letter, and you use an underscore to separate words. You don’t need to use an underscore if the function name includes only one word. The following function names are examples of snake case:</p>
<ul>
<li><code>find_winner()</code></li>
<li><code>save()</code></li>
</ul>
<p>Both function names include lowercase letters, and one of them has two English words separated by an underscore. You can also use the underscore at the beginning or end of a function name. However, there are conventions outlining when you should use the underscore in this way.</p>
<p>You can use a <a href="https://realpython.com/python-double-underscore/#single-leading-underscore-in-python-names">single leading underscore</a>, such as with <code>_find_winner()</code>, to indicate that a function is meant only for internal use. An object with a leading single underscore in its name can be used internally within a module or a class. While Python doesn’t enforce private variables or functions, a leading underscore is an accepted convention to show the programmer’s intent.</p>
<p>A <a href="https://realpython.com/python-double-underscore/#trailing-underscores-in-python-names">single trailing underscore</a> is used by convention when you want to avoid a conflict with existing Python names or keywords. For example, you can’t use the name <em>import</em> for a function since <code>import</code> is a keyword. You can’t use keywords as names for functions or other objects. You can choose a different name, but you can also add a trailing underscore to create <code>import_()</code>, which is a valid name.</p>
<p>You can also use a single trailing underscore if you wish to reuse the name of a built-in function or other object. For example, if you want to define a function that you’d like to call <em>max</em>, you can name your function <code>max_()</code> to avoid conflict with the built-in function <code>max()</code>.</p>
<p>Unlike the case with the keyword <code>import</code>, <code>max()</code> is not a keyword but a built-in function. Therefore, you <em>could</em> define your function using the same name, <code>max()</code>, but it’s generally preferable to avoid this approach to prevent confusion and ensure you can still use the built-in function.</p>
<p>Double leading underscores are also used for attributes in classes. This notation invokes <strong>name mangling</strong>, which makes it harder for a user to access the attribute and prevents subclasses from accessing them. You’ll read more about name mangling and attributes with double leading underscores later.</p>
</div><h2><a href="https://realpython.com/python-function-names/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-function-names/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-10T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Choosing the Best Font for Programming</title>
<link>https://realpython.com/quizzes/coding-fonts/</link>
<guid>https://realpython.com/quizzes/coding-fonts/</guid>
<content:encoded><![CDATA[
<div> 程序字体、选择、技术细节、特征、高质量<br />
<br />
技术细节和特征是选择程序字体时需要考虑的关键因素。文章提供了如何选择适合日常编程的最佳字体的指导，强调了如何识别高质量的编程字体。在选择字体时，需要考虑其在编程环境中的可读性和易用性，同时还要关注字体的技术特性和编程体验。通过了解程序字体的最佳选择方法，程序员可以提高编程效率和舒适度，提升工作体验。<br /><br />总结: 文章强调了在选择程序字体时需要考虑的技术细节和特征，包括可读性和易用性。建议程序员选择高质量的编程字体，以提升编程效率和工作体验。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of how to choose the best font for your daily programming. You&rsquo;ll get questions about the technicalities and features to consider when choosing a programming font and refresh your knowledge about how to spot a high-quality coding font.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-10T12:00:00+00:00</pubDate>
</item>
<item>
<title>Customize VS Code Settings</title>
<link>https://realpython.com/courses/customize-vscode-settings/</link>
<guid>https://realpython.com/courses/customize-vscode-settings/</guid>
<content:encoded><![CDATA[
<div> settings, customize, interface, productivity, profile
<br />
用户可以通过自定义设置来优化Visual Studio Code的界面，提高工作效率。创建个人配置文件，调整特定设置，清理界面可以帮助用户专注于编码工作，并且可以在不同设备间导出和重复使用个人配置文件。总结: 通过优化设置和界面，用户可以提高工作效率并更好地利用Visual Studio Code进行Python开发。 <div>
<p>Visual Studio Code, is an open-source code editor available on all platforms. It’s also a great platform for Python development. The default settings in VS Code present a somewhat cluttered environment. </p>
<p>This <strong>Code Conversation</strong> with instructor Philipp Acsany is about learning how to customize the settings within the interface of VS Code. Having a clean digital workspace is an important part of your work life. Removing distractions and making code more readable can increase productivity and even help you spot bugs.</p>
<p>In this <strong>Code Conversation</strong>, you&rsquo;ll learn how to:</p>
<ul>
<li>Work With User Settings</li>
<li>Create a VS Code Profile</li>
<li>Find and Adjust Specific Settings</li>
<li>Clean Up the VS Code User Interface</li>
<li>Export Your Profile to Re-use Across Installations</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-09T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Split Your Dataset With scikit-learn's train_test_split()</title>
<link>https://realpython.com/quizzes/train-test-split-python-data/</link>
<guid>https://realpython.com/quizzes/train-test-split-python-data/</guid>
<content:encoded><![CDATA[
<div> sklearn, 数据集分割, train_test_split, 监督学习, 评估模型<br />
<br />
数据集在监督学习中的分割对于评估模型非常重要。使用train_test_split()函数可以将数据集分为训练集和测试集，确保评估模型时的客观性和准确性。通过在训练集上训练模型，然后在测试集上进行预测和评估，可以有效地检验模型的泛化能力。在sklearn库中提供了train_test_split()函数来实现数据集的分割，并可结合各种预测方法进行模型训练和评估。这种数据集分割和模型评估的流程是监督学习中不可或缺的步骤。总结: 数据集分割是监督学习中评估模型的重要步骤，通过使用train_test_split()函数可以实现数据集分割，并结合预测方法进行模型训练和评估。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/train-test-split-python-data/">how to use <code>train_test_split()</code></a> from the <code>sklearn</code> library.</p>
<p>By working through this quiz, you&rsquo;ll revisit why you need to split your dataset in supervised machine learning, which subsets of the dataset you need for an unbiased evaluation of your model, how to use <code>train_test_split()</code> to split your data, and how to combine <code>train_test_split()</code> with prediction methods.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-09T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python News Roundup: July 2024</title>
<link>https://realpython.com/python-news-july-2024/</link>
<guid>https://realpython.com/python-news-july-2024/</guid>
<content:encoded><![CDATA[
<div> NumPy, Polars, PyCon US, NumPy 2.0, Python Language Summit  
NumPy发布了2.0版本，包括改进和一些破坏性改变；Polars达到了1.0版本，现在可用于生产；PyCon US在宾夕法尼亚州匹兹堡举办，激发了新想法和讨论。NumPy是数据科学领域的基础软件包，提供内存中的N维数组和许多快速操作函数。NumPy的新版本2.0添加了改进的字符串类型，清理了库并提高了性能。NumPy数组限制为具有相同数据类型，因此可以快速查找和处理单个元素。NumPy 2.0允许使用可变长度字符串来解决处理字符串时的一些限制。<br /><br />总结: NumPy发布2.0版本，支持改进和破坏性改变；Polars达到1.0版本，可用于生产；PyCon US举办激发新想法和讨论；NumPy数组限制相同数据类型，提高性能；NumPy 2.0支持可变长度字符串解决字符串处理限制。 <div>
<div><p>Summer isn’t all holidays and lazy days at the beach. Over the last month, two important players in the data science ecosystem released new major versions. NumPy published version 2.0, which comes with several improvements but also some breaking changes. At the same time, Polars reached its version 1.0 milestone and is now considered production-ready.</p>
<p>PyCon US was hosted in Pittsburgh, Pennsylvania in May. The conference is an important meeting spot for the community and sparked some new ideas and discussions. You can read about some of these in PSF’s coverage of the Python Language Summit, and watch some of the videos posted from the conference.</p>
<p>Dive in to learn more about the most important Python news from the last month. </p>
<h2 id="numpy-version-20">NumPy Version 2.0<a class="headerlink" href="#numpy-version-20" title="Permanent link"></a></h2>
<p><a href="https://realpython.com/numpy-tutorial/">NumPy</a> is a foundational package in the data science space. The library provides in-memory <em>N</em>-dimensional arrays and many functions for fast operations on those arrays.</p>
<p>Many libraries in the ecosystem use NumPy under the hood, including <a href="https://realpython.com/pandas-dataframe/">pandas</a>, <a href="https://realpython.com/python-scipy-cluster-optimize/">SciPy</a>, and <a href="https://realpython.com/train-test-split-python-data/">scikit-learn</a>. The NumPy package has been around for close to twenty years and has played an important role in the rising popularity of Python among data scientists.</p>
<p>The new version 2.0 of NumPy is an important milestone, which adds an improved string type, cleans up the library, and improves performance. However, it comes with some changes that may affect your code.</p>
<p>The biggest breaking changes happen in the C-API of NumPy. Typically, this won’t affect you directly, but it can affect other libraries that you rely on. The community has rallied strongly and most of the bigger packages already support NumPy 2.0. You can check NumPy’s table of <a href="https://github.com/numpy/numpy/issues/26191">ecosystem support</a> for details.</p>
<p>One of the main reasons for using NumPy is that the library can do fast and convenient array operations. For a simple example, the following code calculates square numbers:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">number</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">]</span>
</span><span class="go">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">**</span><span class="mi">2</span>
</span><span class="go">array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>First, you use <a href="https://realpython.com/python-range/"><code>range()</code></a> and a <a href="https://realpython.com/list-comprehension-python/">list comprehension</a> to calculate the first ten square numbers in pure Python. Then, you repeat the calculation with NumPy. Note that you don’t need to explicitly spell out the loop. NumPy handles that for you under the hood.</p>
<p>Furthermore, the NumPy version will be considerably faster, especially for bigger arrays of numbers. One of the secrets to this speed is that NumPy arrays are limited to having one data type, while a Python list can be heterogeneous. One list can contain elements as different as integers, floats, strings, and even nested lists. That’s not possible in a NumPy array.</p>
<h3 id="improved-string-handling">Improved String Handling<a class="headerlink" href="#improved-string-handling" title="Permanent link"></a></h3>
<p>By enforcing all elements to be of the same type that take up the same number of bytes in memory, NumPy can quickly find and work with individual elements. One downside to this has been that strings can be awkward to work with:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s2">"numpy"</span><span class="p">,</span> <span class="s2">"python"</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">words</span>
<span class="go">array(['numpy', 'python'], dtype='&lt;U6')</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">words</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"monty python"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">words</span>
<span class="go">array(['numpy', 'monty '], dtype='&lt;U6')</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You first create an array consisting of two strings. Note that NumPy automatically detects that the longest string is six characters long, so it sets aside space for each string to be six characters long. The <code>6</code> in the data type string, <code>&lt;U6</code>, indicates this.</p>
<p>Next, you try to replace the second string with a longer string. Unfortunately, only the first six characters are stored since that’s how much space NumPy has set aside for each string in this array. There are ways to work around these limitations, but in NumPy 2.0, you can take advantage of variable length strings instead:</p>
</div><h2><a href="https://realpython.com/python-news-july-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-july-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python's Built-in Functions: A Complete Exploration</title>
<link>https://realpython.com/quizzes/python-built-in-functions/</link>
<guid>https://realpython.com/quizzes/python-built-in-functions/</guid>
<content:encoded><![CDATA[
<div> built-in functions, Python, code, quiz, tutorial
总结:<br /><br />
本文重点介绍了Python内置函数的使用，通过阅读教程并参加测验来测试对Python内置函数的理解。教程中提供了关于如何使用Python内置函数的详细指导，帮助读者更好地掌握Python编程技巧。测验可以帮助读者检验对Python内置函数的掌握程度，加深对Python知识的理解。建议读者在阅读完本文后，通过实际操作和练习来巩固所学知识，提高自己的Python编程水平。通过不断学习和实践，可以更加熟练地运用Python内置函数，实现更加复杂和高效的编程任务。这篇文章为读者提供了学习Python内置函数的基础知识，帮助他们在编程过程中更加游刃有余。 <div>
<p>Test your understanding of Python&rsquo;s built-in functions and how to use them in your code.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-built-in-functions/">Python&rsquo;s Built-in Functions: A Complete Exploration</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-01T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #211: Python Doesn't Round Numbers the Way You Might Think</title>
<link>https://realpython.com/podcasts/rpp/211/</link>
<guid>https://realpython.com/podcasts/rpp/211/</guid>
<content:encoded><![CDATA[
<div> Python, round, math, default method, variety  
Python中的round方法与数学课上学到的方式可能不同。Python使用的默认方法以及在Python中对数字进行舍入的多种方式可能让你感到惊讶。本周节目中，Christopher Trudeau带来了另一批PyCoder's Weekly文章和项目。  

<br /><br />总结:  
1. Python中的round方法与数学课上学到的方式可能不同。  
2. Python使用的默认方法可能会让你感到惊讶。  
3. Python提供了多种对数字进行舍入的方式。  
4. 本周节目中，Christopher Trudeau带来了PyCoder's Weekly文章和项目。 <div>
<p>Does Python round numbers the same way you learned back in math class? You might be surprised by the default method Python uses and the variety of ways to round numbers in Python. Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python's Magic Methods: Leverage Their Power in Your Classes</title>
<link>https://realpython.com/quizzes/python-magic-methods/</link>
<guid>https://realpython.com/quizzes/python-magic-methods/</guid>
<content:encoded><![CDATA[
<div> magic methods, Python, customize, classes, behavior
<br /><br />总结:
magic methods 是 Python 中的特殊方法，可以用来自定义类的行为。通过实现这些特殊方法，你可以定制类的操作，如算术运算、比较和类型转换。在编写类时，可以利用这些 magic methods 来增强类的灵活性和功能性，使其符合特定需求。为了更好地理解 magic methods 的工作原理和如何应用它们，建议通过实践测试来加深认识。对于想要提升 Python 技能和加强类设计能力的人来说，掌握 magic methods 是一个很好的方式。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-magic-methods/">Python&rsquo;s Magic Methods</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the concept of magic methods in Python, how they work, and how you can use them to customize the behavior of your classes.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Working With JSON Data in Python</title>
<link>https://realpython.com/python-json/</link>
<guid>https://realpython.com/python-json/</guid>
<content:encoded><![CDATA[
<div> JSON, Python, syntax, data interchange, tools
总结:<br /><br />这篇文章介绍了JSON在Python中的应用。它首先解释了JSON的语法和起源，指出JSON已经成为信息交换的主流标准，同时Python提供了强大的工具来处理JSON数据。文章展示了如何将Python数据转换为JSON，以及如何将JSON反序列化为Python。此外，还介绍了如何写入和读取JSON文件，验证JSON语法，以及如何在终端美化和压缩JSON。最后，文章还提到了JSON与XML的比较。 <div>
<div><p>Since its introduction, <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> has rapidly emerged as the predominant standard for the exchange of information. Whether you want to transfer data with an <a href="https://realpython.com/api-integration-in-python/">API</a> or store information in a <a href="https://realpython.com/introduction-to-mongodb-and-python/">document database</a>, it’s likely you’ll encounter JSON. Fortunately, Python provides robust tools to facilitate this process and help you manage JSON data efficiently.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li><strong>Understand</strong> the JSON syntax</li>
<li><strong>Convert</strong> Python data to JSON</li>
<li><strong>Deserialize</strong> JSON to Python</li>
<li><strong>Write and read</strong> JSON files</li>
<li><strong>Validate</strong> JSON syntax</li>
<li><strong>Prettify</strong> JSON in the terminal</li>
<li><strong>Minify</strong> JSON with Python</li>
</ul>
<p>While JSON is the most common format for data distribution, it’s not the only option for such tasks. Both <a href="https://realpython.com/python-xml-parser/">XML</a> and <a href="https://realpython.com/python-yaml/">YAML</a> serve similar purposes. If you’re interested in how the formats differ, then you can check out the tutorial on how to <a href="https://realpython.com/python-serialize-data/">serialize your data with Python</a>.</p>
<div class="alert alert-warning">
<p><strong>Free Bonus:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-json/">Click here to download the free sample code</a> that shows you how to work with JSON data in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Working With JSON Data in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-json/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Working With JSON Data in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Working-With-JSON-Data-in-Python_Watermarked.66a8fdcb8859.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-json/"><span class="my-0 h4">Working With JSON Data in Python</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of working with JSON in Python. JSON has become the de facto standard for information exchange, and Python provides easy-to-use tools to handle JSON data.</p>
    </div>
  </div>

</div>

<h2 id="introducing-json">Introducing JSON<a class="headerlink" href="#introducing-json" title="Permanent link"></a></h2>
<p>The acronym <strong>JSON</strong> stands for <a href="https://www.json.org/">JavaScript Object Notation</a>. As the name suggests, JSON originated from <a href="https://realpython.com/python-vs-javascript/">JavaScript</a>. However, JSON has transcended its origins to become language-agnostic and is now recognized as the <a href="https://tools.ietf.org/html/rfc8259">standard</a> for <strong>data interchange</strong>.</p>
<p>The popularity of JSON can be attributed to native support by the JavaScript language, resulting in excellent parsing performance in web browsers. On top of that, JSON’s straightforward syntax allows both humans and computers to read and write JSON data effortlessly.</p>
<p>To get a first impression of JSON, have a look at this example code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--purple">
    <span class="mr-2 noselect">JSON</span>
    <span class="mr-2"><code style="color: inherit;">hello_world.json</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="p">{</span>
<span class="w">  </span><span class="nt">"greeting"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Hello, world!"</span>
<span class="p">}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You’ll learn more about the JSON syntax later in this tutorial. For now, recognize that the JSON format is <strong>text-based</strong>. In other words, you can create JSON files using the code editor of your choice. Once you set the file extension to <code>.json</code>, most code editors display your JSON data with syntax highlighting out of the box:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/json-syntax-highlighting.bf172e2b07bd.png" target="_blank"><img alt="Editor screenshot with code highlighting for a JSON file" class="img-fluid mx-auto d-block " height="1080" src="https://files.realpython.com/media/json-syntax-highlighting.bf172e2b07bd.png" width="1920" /></a></figure>

<p>The screenshot above shows how <a href="https://realpython.com/python-development-visual-studio-code/">VS Code</a> displays JSON data using the <a href="https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme">Bearded color theme</a>. You’ll have a closer look at the syntax of the JSON format next!</p>
<h3 id="examining-json-syntax">Examining JSON Syntax<a class="headerlink" href="#examining-json-syntax" title="Permanent link"></a></h3>
<p>In the previous section, you got a first impression of how JSON data looks. And as a Python developer, the JSON structure probably reminds you of <a href="https://realpython.com/python-data-structures/">common Python data structures</a>, like a dictionary that contains a string as a key and a value. If you understand the syntax of a <a href="https://realpython.com/python-dicts/">dictionary</a> in Python, you already know the general syntax of a <strong>JSON object</strong>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Later in this tutorial, you’ll learn that you’re free to use lists and other data types at the top level of a JSON document.</p>
</div>
<p>The similarity between Python dictionaries and JSON objects is no surprise. One idea behind establishing JSON as the go-to data interchange format was to make working with JSON as convenient as possible, independently of which programming language you use:</p>
<blockquote>
<p>[A collection of key-value pairs and arrays] are universal data structures. Virtually all modern programming languages support them in one form or another. It makes sense that a data format that is interchangeable with programming languages is also based on these structures. (<a href="https://www.json.org/json-en.html">Source</a>)</p>
</blockquote>
<p>To explore the JSON syntax further, create a new file named <code>hello_frieda.json</code> and add a more complex JSON structure as the content of the file:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--purple">
    <span class="mr-2 noselect">JSON</span>
    <span class="mr-2"><code style="color: inherit;">hello_frieda.json</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="p">{</span>
<span class="linenos"> 2</span><span class="w">  </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Frieda"</span><span class="p">,</span>
<span class="linenos"> 3</span><span class="w">  </span><span class="nt">"isDog"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span>
<span class="linenos"> 4</span><span class="w">  </span><span class="nt">"hobbies"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"eating"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sleeping"</span><span class="p">,</span><span class="w"> </span><span class="s2">"barking"</span><span class="p">],</span>
<span class="linenos"> 5</span><span class="w">  </span><span class="nt">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span>
<span class="linenos"> 6</span><span class="w">  </span><span class="nt">"address"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span>
<span class="linenos"> 7</span><span class="w">    </span><span class="nt">"work"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span>
<span class="linenos"> 8</span><span class="w">    </span><span class="nt">"home"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"Berlin"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Germany"</span><span class="p">]</span>
<span class="linenos"> 9</span><span class="w">  </span><span class="p">},</span>
<span class="linenos">10</span><span class="w">  </span><span class="nt">"friends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span>
<span class="linenos">11</span><span class="w">    </span><span class="p">{</span>
<span class="linenos">12</span><span class="w">      </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Philipp"</span><span class="p">,</span>
<span class="linenos">13</span><span class="w">      </span><span class="nt">"hobbies"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"eating"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sleeping"</span><span class="p">,</span><span class="w"> </span><span class="s2">"reading"</span><span class="p">]</span>
<span class="linenos">14</span><span class="w">    </span><span class="p">},</span>
<span class="linenos">15</span><span class="w">    </span><span class="p">{</span>
<span class="linenos">16</span><span class="w">      </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mitch"</span><span class="p">,</span>
<span class="linenos">17</span><span class="w">      </span><span class="nt">"hobbies"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"running"</span><span class="p">,</span><span class="w"> </span><span class="s2">"snacking"</span><span class="p">]</span>
<span class="linenos">18</span><span class="w">    </span><span class="p">}</span>
<span class="linenos">19</span><span class="w">  </span><span class="p">]</span>
<span class="linenos">20</span><span class="p">}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the code above, you see data about a dog named Frieda, which is formatted as JSON. The top-level value is a JSON object. Just like Python dictionaries, you wrap JSON objects inside curly braces (<code>{}</code>).</p>
<p>In line 1, you start the JSON object with an opening curly brace (<code>{</code>), and then you close the object at the end of line 20 with a closing curly brace (<code>}</code>).</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Although whitespace doesn’t matter in JSON, it’s customary for JSON documents to be formatted with two or four spaces to indicate indentation. If the file size of the JSON document is important, then you may consider minifying the JSON file by removing the whitespace. You’ll learn more about minifying JSON data later in the tutorial.</p>
</div>
<p>Inside the JSON object, you can define zero, one, or more key-value pairs. If you add multiple key-value pairs, then you must separate them with a comma (<code>,</code>).</p>
</div><h2><a href="https://realpython.com/python-json/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-json/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-03T14:00:00+00:00</pubDate>
</item>
<item>
<title>Defining Python Constants for Code Maintainability</title>
<link>https://realpython.com/courses/defining-constants-code-maintainability/</link>
<guid>https://realpython.com/courses/defining-constants-code-maintainability/</guid>
<content:encoded><![CDATA[
<div> Python、constants、naming convention、readability、reusability
<br />
常量是在程序执行过程中不会改变的值，在Python中通过大写字母命名来表示常量，以防止被重新赋值。学习如何正确定义Python常量，并识别一些内置常量，可以提高代码的可读性、重用性和可维护性。在项目中组织和管理常量时，可以采用不同的方法，并使用多种技巧使Python中的常量变得完全不可变。总结: <div>
<p>In programming, the term <strong>constant</strong> refers to names representing values that don&rsquo;t change during a program&rsquo;s execution. Constants are a fundamental concept in programming, and Python developers use them in many cases. However, Python doesn&rsquo;t have a dedicated syntax for defining constants. In practice, Python constants are just <strong>variables</strong> that <em>never change</em>.</p>
<p>To prevent programmers from reassigning a name that&rsquo;s supposed to hold a constant, the Python community has adopted a naming convention: <em>use uppercase letters</em>. For every Pythonista, it&rsquo;s essential to know what constants are, as well as why and when to use them.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Properly <strong>define constants</strong> in Python</li>
<li>Identify some <strong>built-in constants</strong> </li>
<li>Use constants to improve your code&rsquo;s <strong>readability</strong>, <strong>reusability</strong>, and <strong>maintainability</strong></li>
<li>Apply different approaches to <strong>organize</strong> and <strong>manage</strong> constants in a project</li>
<li>Use several techniques to make constants <strong>strictly constant</strong> in Python</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-02T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python's Built-in Functions: A Complete Exploration</title>
<link>https://realpython.com/python-built-in-functions/</link>
<guid>https://realpython.com/python-built-in-functions/</guid>
<content:encoded><![CDATA[
<div> 综述:内置函数, Python, 数学计算, 绝对值, 商和余数, 财务计算

本教程介绍了Python的内置函数，涵盖了数学计算，财务计算等常见编程任务。首先介绍了与数学计算相关的内置函数，如计算绝对值的abs()函数和计算商和余数的divmod()函数。通过示例演示了如何使用这些函数进行数学计算和财务计算。最后，强调了内置函数的重要性和实用性，帮助程序员更高效地处理各种编程问题。 <div>
<div><p>Python has many <strong>built-in functions</strong> that you can use directly without importing anything. These functions cover a wide variety of common programming tasks that include performing math operations, working with built-in data types, processing iterables of data, handling input and output in your programs, working with scopes, and more.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Get to know Python’s <strong>built-in functions</strong></li>
<li>Learn about common <strong>use cases</strong> of Python’s built-in functions</li>
<li>Use these functions to solve <strong>practical problems</strong></li>
</ul>
<p>To get the most out of this tutorial, you’ll need to be familiar with Python programming, including topics like working with built-in <a href="https://realpython.com/python-data-types/">data types</a>, <a href="https://realpython.com/defining-your-own-python-function/">functions</a>, <a href="https://realpython.com/python-classes/">classes</a>, <a href="https://realpython.com/primer-on-python-decorators/">decorators</a>, <a href="https://realpython.com/python-scope-legb-rule/">scopes</a>, and the <a href="https://realpython.com/python-import/">import</a> system.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-built-in-functions-code/">Click here to download the free sample code</a> that shows you how to use Python’s built-in functions.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python's Built-in Functions: A Complete Exploration” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/python-built-in-functions/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python's Built-in Functions: A Complete Exploration" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Pythons-Built-in-Functions-A-Quick-Exploration_Watermarked.44a8e102943b.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="/quizzes/python-built-in-functions/"><span class="my-0 h4">Python's Built-in Functions: A Complete Exploration</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your knowledge of the available built-in functions in Python. By taking this quiz, you'll deepen your understanding of how to use these functions and the common programming problems they cover, from mathematical computations to Python-specific features.</p>
    </div>
  </div>

</div>

<h2 id="built-in-functions-in-python">Built-in Functions in Python<a class="headerlink" href="#built-in-functions-in-python" title="Permanent link"></a></h2>
<p>Python has several <a href="https://realpython.com/defining-your-own-python-function/">functions</a> available for you to use directly from anywhere in your code. These functions are known as <a href="https://docs.python.org/3/library/functions.html">built-in functions</a> and they cover many common programming problems, from mathematical computations to Python-specific features.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Many of Python’s built-in functions are classes with function-style names. Good examples are <code>str</code>, <code>tuple</code>, <code>list</code>, and <code>dict</code>, which are classes that define built-in data types. These classes are listed in the Python documentation as <em>built-in functions</em> and you’ll find them in this tutorial.</p>
</div>
<p>In this tutorial, you’ll learn the basics of Python’s built-in functions. By the end, you’ll know what their use cases are and how they work. To kick things off, you’ll start with those built-in functions related to math computations.</p>
<h2 id="using-math-related-built-in-functions">Using Math-Related Built-in Functions<a class="headerlink" href="#using-math-related-built-in-functions" title="Permanent link"></a></h2>
<p>In Python, you’ll find a few built-in functions that take care of common math operations, like computing the absolute value of a <a href="https://realpython.com/python-numbers/">number</a>, calculating powers, and more. Here’s a summary of the math-related built-in functions in Python:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://realpython.com/python-absolute-value/"><code>abs()</code></a></td>
<td>Calculates the absolute value of a number</td>
</tr>
<tr>
<td><a href="https://docs.python.org/3/library/functions.html#divmod"><code>divmod()</code></a></td>
<td>Computes the quotient and remainder of integer division</td>
</tr>
<tr>
<td><a href="https://realpython.com/python-min-and-max/"><code>max()</code></a></td>
<td>Finds the largest of the given arguments or items in an iterable</td>
</tr>
<tr>
<td><a href="https://realpython.com/python-min-and-max/"><code>min()</code></a></td>
<td>Finds the smallest of the given arguments or items in an iterable</td>
</tr>
<tr>
<td><a href="https://docs.python.org/3/library/functions.html#pow"><code>pow()</code></a></td>
<td>Raises a number to a power</td>
</tr>
<tr>
<td><a href="https://realpython.com/python-rounding/#pythons-built-in-round-function"><code>round()</code></a></td>
<td>Rounds a floating-point value</td>
</tr>
<tr>
<td><a href="https://realpython.com/python-sum-function/"><code>sum()</code></a></td>
<td>Sums the values in an iterable</td>
</tr>
</tbody>
</table>
</div>
<p>In the following sections, you’ll learn how these functions work and how to use them in your Python code.</p>
<h3 id="getting-the-absolute-value-of-a-number-abs">Getting the Absolute Value of a Number: <code>abs()</code><a class="headerlink" href="#getting-the-absolute-value-of-a-number-abs" title="Permanent link"></a></h3>
<p>The <a href="https://en.wikipedia.org/wiki/Absolute_value">absolute value</a> or <strong>modulus</strong> of a <a href="https://en.wikipedia.org/wiki/Real_number">real number</a> is its non-negative value. In other words, the absolute value is the number without its <a href="https://en.wikipedia.org/wiki/Sign_(mathematics)">sign</a>. For example, the absolute value of <em>-5</em> is <em>5</em>, and the absolute value of <em>5</em> is also <em>5</em>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about <code>abs()</code>, check out the <a href="https://realpython.com/python-absolute-value/">How to Find an Absolute Value in Python</a> tutorial.</p>
</div>
<p>Python’s built-in <code>abs()</code> function allows you to quickly compute the absolute value or modulus of a <a href="https://realpython.com/python-numbers/">number</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">Decimal</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">fractions</span> <span class="kn">import</span> <span class="n">Fraction</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">)</span>
<span class="go">42</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mf">42.42</span><span class="p">)</span>
<span class="go">42.42</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="mf">42.42</span><span class="p">)</span>
<span class="go">42.42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="s2">"-2+3j"</span><span class="p">))</span>
<span class="go">3.605551275463989</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="s2">"2+3j"</span><span class="p">))</span>
<span class="go">3.605551275463989</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">Fraction</span><span class="p">(</span><span class="s2">"-1/2"</span><span class="p">))</span>
<span class="go">Fraction(1, 2)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">Fraction</span><span class="p">(</span><span class="s2">"1/2"</span><span class="p">))</span>
<span class="go">Fraction(1, 2)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="s2">"-0.5"</span><span class="p">))</span>
<span class="go">Decimal('0.5')</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="s2">"0.5"</span><span class="p">))</span>
<span class="go">Decimal('0.5')</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In these examples, you compute the absolute value of different numeric types using the <code>abs()</code> function. First, you use integer numbers, then floating-point and complex numbers, and finally, fractional and decimal numbers. In all cases, when you call the function with a negative value, the final result removes the sign.</p>
<p>For a practical example, say that you need to compute the total profits and losses of your company from a month’s transactions:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">transactions</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">incomes</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">income</span> <span class="k">for</span> <span class="n">income</span> <span class="ow">in</span> <span class="n">transactions</span> <span class="k">if</span> <span class="n">income</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">expenses</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span>
<span class="hll"><span class="gp">... </span>    <span class="nb">sum</span><span class="p">(</span><span class="n">expense</span> <span class="k">for</span> <span class="n">expense</span> <span class="ow">in</span> <span class="n">transactions</span> <span class="k">if</span> <span class="n">expense</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="gp">... </span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Total incomes: $</span><span class="si">{</span><span class="n">incomes</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="go">Total incomes: $800</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Total expenses: $</span><span class="si">{</span><span class="n">expenses</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="go">Total expenses: $300</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Total profit: $</span><span class="si">{</span><span class="n">incomes</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">expenses</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="go">Total profit: $500</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, to compute the expenses, you use the <code>abs()</code> function to get the absolute value of the expenses, which results in a positive value.</p>
<h3 id="finding-the-quotient-and-remainder-in-division-divmod">Finding the Quotient and Remainder in Division: <code>divmod()</code><a class="headerlink" href="#finding-the-quotient-and-remainder-in-division-divmod" title="Permanent link"></a></h3>
<p>Python provides a built-in function called <code>divmod()</code> that takes two numbers as arguments and <a href="https://realpython.com/python-return-statement/">returns</a> a tuple with the <strong>quotient</strong> and <strong>remainder</strong> that result from the integer division of the input numbers:</p>
</div><h2><a href="https://realpython.com/python-built-in-functions/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-built-in-functions/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-07-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #210: Creating a Guitar Synthesizer &amp; Generating WAV Files With Python</title>
<link>https://realpython.com/podcasts/rpp/210/</link>
<guid>https://realpython.com/podcasts/rpp/210/</guid>
<content:encoded><![CDATA[
<div> Python, Guitar Synthesizer, Bartosz Zaczyński, Techniques, High-Level Programming

通过与Real Python作者和核心团队成员Bartosz Zaczyński的讨论，了解了如何在Python中合成吉他声音的技术以及在构建高级项目时可以练习的更高级编程和Python概念。 Bartosz Zaczyński最近一步一步的项目《构建吉他合成器：在Python中播放乐谱》展示了如何用Python实现吉他合成器，可以演奏音乐的简谱。通过这篇文章，读者可以了解到如何在Python中实现复杂的音乐合成功能，并提高自己的编程技能。<br /><br />总结: Python技术，吉他合成器，Bartosz Zaczyński，技术，高级编程。 <div>
<p>What techniques go into synthesizing a guitar sound in Python? What higher-level programming and Python concepts can you practice while building advanced projects? This week on the show, we talk with Real Python author and core team member Bartosz Zaczyński about his recent step-by-step project, Build a Guitar Synthesizer: Play Musical Tablature in Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-28T12:00:00+00:00</pubDate>
</item>
<item>
<title>Understanding the Python Mock Object Library</title>
<link>https://realpython.com/python-mock-library/</link>
<guid>https://realpython.com/python-mock-library/</guid>
<content:encoded><![CDATA[
<div> Mock, unittest.mock, Python, patch, testing
Mock是Python的unittest.mock库提供的模拟对象，用于测试中替代真实对象。patch是用于替换代码中真实对象为Mock实例的函数。Mock类是用于模拟对象的基类，非常灵活。使用Mock可以控制代码的行为，检查调用方法和频率等使用数据。unittest.mock库提供了解决mocking对象中一些常见问题的解决方案。总结: Mock是unittest.mock库中的重要概念，可以帮助在测试中模拟对象，替换真实对象，控制代码行为，并解决常见问题。 <div>
<div><p>Python’s <code>unittest.mock</code> library is a tool that helps you create mock objects to simulate complex logic and unpredictable <a href="https://realpython.com/courses/managing-python-dependencies/">dependencies</a>.
This helps you write valuable tests that verify your application logic is correct, reliable, and efficient.</p>
<p><strong>By the end of this tutorial, you’ll be able to:</strong></p>
<ul>
<li><strong>Create Python mock objects</strong> using <code>Mock</code></li>
<li><strong>Assert</strong> that you’re using objects as you intended</li>
<li><strong>Inspect</strong> usage data stored on your Python mocks</li>
<li><strong>Configure</strong> certain aspects of your Python mock objects</li>
<li>Substitute your mocks for real objects using <strong><code>patch()</code></strong></li>
<li><strong>Avoid common problems</strong> inherent in Python mocking</li>
</ul>
<p>You’ll begin by learning about what mocking is and how you can use it to improve your tests.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-mock-library-code/">Click here to download the free sample code</a> that you’ll use to learn about Python’s mock object library.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Understanding the Python Mock Object Library” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-mock-library/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Understanding the Python Mock Object Library" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/unittest.mock-Tutorial_Watermarked.8e92b54478af.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-mock-library/"><span class="my-0 h4">Understanding the Python Mock Object Library</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python's unittest.mock library. With this knowledge, you'll be able to write robust tests, create mock objects, and ensure your code is reliable and efficient.</p>
    </div>
  </div>

</div>

<h2 id="what-is-mocking">What Is Mocking?<a class="headerlink" href="https://realpython.com/atom.xml#what-is-mocking" title="Permanent link"></a></h2>
<p>A <a href="https://en.wikipedia.org/wiki/Mock_object">mock object</a> substitutes and imitates a real object within a <a href="https://realpython.com/python-testing/">testing environment</a>. Using mock objects is a versatile and powerful way to <a href="https://realpython.com/python-cli-testing/#mocks">improve the quality of your tests</a>. This is because by using Python mock objects, you can control your code’s behavior during testing.</p>
<p>For example, if your code makes <a href="https://realpython.com/python-requests/">HTTP requests</a> to external services, then your tests execute predictably only so far as the services are behaving as you expected. Sometimes, a temporary change in the behavior of these external services can cause intermittent failures within your test suite.</p>
<p>Because of this, it would be better for you to test your code in a controlled environment. <a href="https://realpython.com/testing-third-party-apis-with-mocks/">Replacing the actual request with a mock object</a> would allow you to simulate external service outages and successful responses in a predictable way.</p>
<p>Sometimes, it’s difficult to test certain areas of your codebase. Such areas include <code>except</code> blocks and <code>if</code> statements that are hard to satisfy. Using Python mock objects can help you control the execution path of your code to reach these areas and improve your <a href="https://en.wikipedia.org/wiki/Code_coverage">code coverage</a>.</p>
<p>Another reason to use mock objects is to better understand how you’re using their real counterparts in your code. A Python mock object contains data about its usage that you can inspect, such as:</p>
<ul>
<li>If you called a method</li>
<li>How you called the method</li>
<li>How often you called the method</li>
</ul>
<p>Understanding what a mock object does is the first step to learning how to use one.
Next, you’ll explore the Python mock object library to see how to use Python mock objects.</p>
<h2 id="the-python-mock-library">The Python Mock Library<a class="headerlink" href="https://realpython.com/atom.xml#the-python-mock-library" title="Permanent link"></a></h2>
<p>Python’s built-in mock object library is <a href="https://docs.python.org/3/library/unittest.mock.html"><code>unittest.mock</code></a>. It provides an easy way to introduce mocks into your tests.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> The standard library includes <code>unittest.mock</code> starting from Python 3.3 and in all newer versions. If you’re using an older version of Python, then you’ll need to install the official backport of the library.</p>
<p>To do so, install <a href="https://pypi.org/project/mock/"><code>mock</code></a> from the <strong>Python Package Index (PyPI)</strong> using <a href="https://realpython.com/what-is-pip/"><code>pip</code></a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>mock
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You may want to create and activate a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> before installing the package.</p>
</div>
<p><code>unittest.mock</code> provides a class called <code>Mock</code>, which you’ll use to imitate real objects in your codebase. <code>Mock</code>, along with its subclasses, offers incredible flexibility and insightful data that will meet most of your Python mocking needs.</p>
<p>The library also provides a function called <code>patch()</code>, which replaces the real objects in your code with <code>Mock</code> instances. You can use <code>patch()</code> as either a <a href="https://realpython.com/primer-on-python-decorators/">decorator</a> or a <a href="https://realpython.com/python-with-statement/">context manager</a>, giving you control over the scope in which the object will be mocked. Once the designated scope exits, <code>patch()</code> will clean up your code by replacing the mocked objects with their original counterparts.</p>
<p>Finally, <code>unittest.mock</code> provides solutions for some of the issues inherent in mocking objects, which you’ll explore later in this tutorial. </p>
<p>Now that you have a better understanding of what mocking is and the library you’ll be using, it’s time to dive in and explore the features and functionalities <code>unittest.mock</code> has to offer.</p>
<h2 id="the-mock-object">The <code>Mock</code> Object<a class="headerlink" href="https://realpython.com/atom.xml#the-mock-object" title="Permanent link"></a></h2>
<p><code>unittest.mock</code> offers a base class for mocking objects called <code>Mock</code>. The use cases for <code>Mock</code> are practically limitless because <code>Mock</code> is so flexible.</p>
<p>Begin by instantiating a new <code>Mock</code> instance:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">unittest.mock</span> <span class="kn">import</span> <span class="n">Mock</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mock</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mock</span>
<span class="go">&lt;Mock id='4561344720'&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-mock-library/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-mock-library/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-26T14:00:00+00:00</pubDate>
</item>
<item>
<title>Build a GUI Calculator With PyQt and Python</title>
<link>https://realpython.com/courses/build-gui-calculator-pyqt/</link>
<guid>https://realpython.com/courses/build-gui-calculator-pyqt/</guid>
<content:encoded><![CDATA[
<div> Python, PyQt, GUI, desktop applications, libraries
<br />
这个视频课程将教你如何使用Python和PyQt构建GUI桌面应用程序。你将学习如何创建图形用户界面，将用户事件与应用逻辑连接起来，使用适当的项目布局组织PyQt应用程序，以及如何创建一个完全功能的GUI应用程序。这个课程适合对构建传统GUI桌面应用程序感兴趣的开发者，为他们提供了丰富的库选择和实用的技能。总结: <br /><br /> <div>
<p>Even though web and mobile applications appear to have taken over the software development market, there&rsquo;s still demand for traditional <strong>graphical user interface (GUI)</strong> desktop applications. If you&rsquo;re interested in building these kinds of applications in Python, then you&rsquo;ll find a wide variety of libraries to choose from. They include <a href="https://docs.python.org/3/library/tkinter.html">Tkinter</a>, <a href="https://realpython.com/python-gui-with-wxpython/">wxPython</a>, <a href="https://www.riverbankcomputing.com/software/pyqt/intro">PyQt</a>, <a href="https://wiki.qt.io/Qt_for_Python">PySide</a>, and a few others.</p>
<p>In this video course, you&rsquo;ll learn the basics of building GUI desktop applications with Python and <strong>PyQt</strong>.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Create <strong>graphical user interfaces</strong> with Python and PyQt</li>
<li>Connect the <strong>user&rsquo;s events</strong> on the app&rsquo;s GUI with the <strong>app&rsquo;s logic</strong></li>
<li>Organize a PyQt app using a proper <strong>project layout</strong></li>
<li>Create a <strong>fully functional GUI application</strong> with PyQt</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-25T14:00:00+00:00</pubDate>
</item>
<item>
<title>Creating Great README Files for Your Python Projects</title>
<link>https://realpython.com/readme-python-project/</link>
<guid>https://realpython.com/readme-python-project/</guid>
<content:encoded><![CDATA[
<div> README file, Python projects, organization, sections, benefits
<br /><br />
总结:
README文件是Python项目中至关重要的一部分，提供了关于项目的基本信息和使用指南。它有助于吸引用户和贡献者，以及让项目在众多项目中脱颖而出。一个优质的README文件通常包括项目概述、设置和使用指南、贡献指南等常见部分。通过创建一个结构良好的README文件，您可以让您的项目更加专业和吸引人。 <div>
<div><p>Most software projects benefit from having a piece of documentation that provides a quick start guide for setting up, using, and contributing to the project. This is especially true in open-source projects where you typically want to attract users and contributors. This type of document is commonly known as a <strong><code>README</code></strong> file, and you should add one to each Python project you create.</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What a <strong><code>README</code></strong> file is</li>
<li>How to <strong>organize</strong> a <code>README</code> file</li>
<li>What <strong>document format</strong> to use for <code>README</code> files</li>
<li>How to prepare a <code>README</code> file for platforms like <strong>PyPI</strong> and <strong>GitHub</strong></li>
<li>What <strong>tools</strong> and <strong>templates</strong> to use to create <code>README</code> files</li>
</ul>
<p>You won’t need special knowledge to read through this tutorial. However, to start creating your own <code>README</code> files, you should familiarize yourself with markup languages, such as <a href="https://www.markdownguide.org/">Markdown</a> and <a href="https://docutils.sourceforge.io/rst.html">reStructuredText</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Template:</strong> <a class="alert-link" href="https://realpython.com/bonus/readme-python-project-template/">Click here to download the free template</a> you can use to create your own great README files.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Creating Great README Files for Your Python Projects” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/readme-python-project/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Creating Great README Files for Your Python Projects" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Creating-Good-README.md-Files-for-Your-Python-Projects_Watermarked.034ab572fa3e.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/readme-python-project/"><span class="my-0 h4">Creating Great README Files for Your Python Projects</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of how a great README file can make your Python project stand out and how to create your own README files.</p>
    </div>
  </div>

</div>

<h2 id="what-is-a-readme-file">What Is a <code>README</code> File?<a class="headerlink" href="https://realpython.com/atom.xml#what-is-a-readme-file" title="Permanent link"></a></h2>
<p>A <a href="https://en.wikipedia.org/wiki/README"><code>README</code></a> file is a document that you typically add to the root directory of a software project. It’s often a short guide that provides essential information about the project. The <code>README</code> file aims to help users and developers understand the project’s purpose, how to use it, and how to contribute to it. It’s also a way to communicate with potential users, collaborators, and contributors.</p>
<p><code>README</code> files are typically plain text files that are the most visible piece of documentation and often the landing page for many software projects, including <a href="https://en.wikipedia.org/wiki/Open-source_software">open-source</a> projects.</p>
<p>In most cases, the file name is written in uppercase letters to draw the user’s attention and ensure it’s the first thing they read.</p>
<p>A <code>README</code> should contain only the necessary information for users, collaborators, and developers to get started using and contributing to your project. For more extended documentation, <a href="https://en.wikipedia.org/wiki/Wiki">wikis</a> or dedicated <a href="https://realpython.com/python-project-documentation-with-mkdocs/">documentation pages</a> are more appropriate and recommended.</p>
<h2 id="why-do-you-need-a-readme-in-your-python-projects">Why Do You Need a <code>README</code> in Your Python Projects?<a class="headerlink" href="https://realpython.com/atom.xml#why-do-you-need-a-readme-in-your-python-projects" title="Permanent link"></a></h2>
<p><code>README</code> files have a long history in <a href="https://en.wikipedia.org/wiki/Free_software">free</a> and <a href="https://en.wikipedia.org/wiki/Open-source_software">open-source</a> software. The <a href="https://en.wikipedia.org/wiki/GNU_Coding_Standards">GNU Coding Standards</a> encourage you to include a <code>README</code> to provide a <em>general overview</em> of the package’s contents. However, this type of file isn’t limited to free and open-source projects. You can add a <code>README</code> to any project you like.</p>
<p>Why should you spend time writing a <code>README</code> file for your Python projects? Here are a few general reasons:</p>
<ul>
<li><code>README</code> files are kind of a <strong>standard</strong> in the software industry.</li>
<li>The <code>README</code> file is frequently the first thing your users will <strong>notice or search for</strong> when they find your project.</li>
<li>A good <code>README</code> file helps your project <strong>stand out</strong> from other projects.</li>
<li>A high-quality <code>README</code> file differentiates a <strong>good project</strong> from a bad one.</li>
<li><code>README</code> files are often displayed as the <strong>project’s landing page</strong> on software development platforms like <a href="https://realpython.com/python-git-github-intro/">GitHub</a> and <a href="https://about.gitlab.com/">GitLab</a>.</li>
</ul>
<p>From a more specialized point of view, a good <code>README</code> file can help you:</p>
<ul>
<li><strong>Introduce the project</strong> by providing an overview of what the project is about, its purpose, and its main features.</li>
<li><strong>Provide guidance</strong> by offering instructions on how to set up the project for use and contributions.</li>
<li><strong>Attract contributors</strong> by providing clear guidelines on how to contribute to the project.</li>
<li><strong>Provide documentation</strong> by working as the primary source of documentation for the project.</li>
<li><strong>Supply support and contact Information</strong> by providing details on how to get help or contact the project maintainers.</li>
<li><strong>Include license information</strong> by specifying the terms for using and contributing to the project.</li>
</ul>
<p>These are just a few of the benefits of adding a <code>README</code> file to your Python projects. So, what do you think? Is it worth it to add them?</p>
<h2 id="what-is-the-usual-structure-of-a-great-readme-file">What Is the Usual Structure of a Great <code>README</code> File?<a class="headerlink" href="https://realpython.com/atom.xml#what-is-the-usual-structure-of-a-great-readme-file" title="Permanent link"></a></h2>
<p>First, you should know that there isn’t <em>one right way</em> to structure a high-quality <code>README</code> file. In practice, the content and sections you include in this file will depend on your specific project. However, you’ll find that most <code>README</code> files have common sections, such as the project’s name, the instructions on how to set up and use the project, guidelines for contributing to the project, and similar topics.</p>
<p>In the following sections, you’ll learn about the most commonly used sections in <code>README</code> files and their content.</p>
<h3 id="common-sections-in-great-readme-files">Common Sections in Great <code>README</code> Files<a class="headerlink" href="https://realpython.com/atom.xml#common-sections-in-great-readme-files" title="Permanent link"></a></h3>
<p>Before discussing how to organize a <code>README</code> file in a well-structured document with pertinent sections, you’ll briefly consider the general content that most <code>README</code> files contain. To approach this topic for a given Python project, you try to answer the following questions:</p>
</div><h2><a href="https://realpython.com/readme-python-project/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/readme-python-project/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #209: Python's Command-Line Utilities &amp; Music Information Retrieval Tools</title>
<link>https://realpython.com/podcasts/rpp/209/</link>
<guid>https://realpython.com/podcasts/rpp/209/</guid>
<content:encoded><![CDATA[
<div> Python模块,命令行工具,Windows机器,功能添加,Christopher Trudeau<br />
总结:<br />
Python模块中有内置的一些可作为实用命令行工具的功能，可以为Windows机器增加更多功能。Christopher Trudeau在本周节目中带来了另一批PyCoder's Weekly文章和项目。 <div>
<p>What are the built-in Python modules that can work as useful command-line tools? How can these tools add more functionality to Windows machines? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-21T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Creating Great README Files for Your Python Projects</title>
<link>https://realpython.com/quizzes/readme-python-project/</link>
<guid>https://realpython.com/quizzes/readme-python-project/</guid>
<content:encoded><![CDATA[
<div> README 文件 Python 项目 突出 重要性 创建

README 文件 是一个 Python 项目 的关键组成部分，通过清晰、简洁、有组织的 README 文件，可以使你的项目脱颖而出。README 文件应当包含项目的介绍、安装指南、使用示例、贡献方式和作者信息等内容，帮助他人更快速地了解和使用你的项目。在创建 README 文件时，应当注意格式排版、使用标记语言、追加徽章和链接、添加漂亮的图片等，让 README 文件更加吸引人。通过不断完善和更新 README 文件，可以提升项目的可读性，吸引更多的用户和贡献者。总结: README 文件是 Python 项目中不容忽视的重要组成部分，可以通过清晰的介绍和吸引人的排版，让你的项目更加突出和受欢迎。 <div>
<p>Test your understanding of how a great <code>README</code> file can make your Python project stand out and how to create your own README files.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/readme-python-project/">Creating Great README Files for Your Python Projects</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Build a Guitar Synthesizer: Play Musical Tablature in Python</title>
<link>https://realpython.com/python-guitar-synthesizer/</link>
<guid>https://realpython.com/python-guitar-synthesizer/</guid>
<content:encoded><![CDATA[
<div> Python, Guitar Synthesizer, Karplus-Strong algorithm, Tablature, Music

<br /><br />总结: 
本教程介绍了如何使用Python构建吉他合成器，通过实现Karplus-Strong弦乐合成算法，模拟不同类型的弦乐器和调音方式，结合多个振动弦实现和弦，模拟真实吉他拨弦和扫弦技术，使用真实乐器的冲激响应来复制其独特音色，读取科学音高记谱和吉他谱。通过这篇文章，您可以学习如何搭建一个数字吉他合成器，设计数据格式存储吉他谱并解释，使用Python脚本实现解释吉他谱的功能，需要的先决条件是有基本音乐理论和计算机音频处理知识，项目将使用Poetry管理依赖包，设计两个Python包：digitar用于数字吉他音效合成，tablature用于读取和解释吉他谱谱表及Python脚本实现功能，您还将学习如何解析音乐谱谱表，完成后您将拥有一个数字吉他。 <div>
<div><p>Have you ever wanted to compose music without expensive gear or a professional studio? Maybe you’ve tried to play a musical instrument before but found the manual dexterity required too daunting or time-consuming. If so, you might be interested in harnessing the power of Python to create a guitar synthesizer. By following a few relatively simple steps, you’ll be able to turn your computer into a virtual guitar that can play any song.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Implement the <strong>Karplus-Strong</strong> plucked string synthesis algorithm</li>
<li>Mimic different types of <strong>string instruments</strong> and their <strong>tunings</strong></li>
<li>Combine multiple vibrating strings into <strong>polyphonic chords</strong></li>
<li>Simulate realistic <strong>guitar picking</strong> and <strong>strumming</strong> finger techniques</li>
<li>Use <strong>impulse responses</strong> of real instruments to replicate their unique timbre</li>
<li>Read <strong>musical notes</strong> from <strong>scientific pitch notation</strong> and <strong>guitar tablature</strong></li>
</ul>
<p>At any point, you’re welcome to download the complete source code of the guitar synthesizer, as well as the sample tablature and other resources that you’ll use throughout this tutorial. They might prove useful in case you want to explore the code in more detail or get a head start. To download the bonus materials now, visit the following link:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-guitar-synthesizer-code/">Click here to download the free sample code</a> that you’ll use to build a guitar synthesizer in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Build a Guitar Synthesizer” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-guitar-synthesizer/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Build a Guitar Synthesizer: Play Musical Tablature in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Build-a-Guitar-Synthesizer-with-Python_Watermarked.a80fc2b14da2.jpg" style="background: #ffc774;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-guitar-synthesizer/"><span class="my-0 h4">Build a Guitar Synthesizer</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of what it takes to build a guitar synthesizer in Python. By working through this quiz, you'll revisit a few key concepts from music theory and sound synthesis.</p>
    </div>
  </div>

</div>

<h2 id="demo-guitar-synthesizer-in-python">Demo: Guitar Synthesizer in Python<a class="headerlink" href="https://realpython.com/atom.xml#demo-guitar-synthesizer-in-python" title="Permanent link"></a></h2>
<p>In this step-by-step guide, you’ll build a <a href="https://en.wikipedia.org/wiki/Plucked_string_instrument">plucked string instrument</a> synthesizer based on the <a href="https://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis">Karplus-Strong</a> algorithm in Python. Along the way, you’ll create an ensemble of virtual instruments, including an <a href="https://en.wikipedia.org/wiki/Acoustic_guitar">acoustic</a>, <a href="https://en.wikipedia.org/wiki/Bass_guitar">bass</a>, and <a href="https://en.wikipedia.org/wiki/Electric_guitar">electric guitar</a>, as well as a <a href="https://en.wikipedia.org/wiki/Banjo">banjo</a> and <a href="https://en.wikipedia.org/wiki/Ukulele">ukulele</a>. Then, you’ll implement a custom <strong>guitar tab</strong> reader so that you can play your favorite songs.</p>
<p>By the end of this tutorial, you’ll be able to synthesize music from <a href="https://en.wikipedia.org/wiki/Tablature#Guitar_tablature">guitar tablature</a>, or guitar tabs for short, which is a simplified form of musical notation that allows you to play music without having to learn how to read standard sheet music. Finally, you’ll store the result in an <a href="https://en.wikipedia.org/wiki/MP3">MP3</a> file for playback.</p>
<p>Below is a short demonstration of the synthesizer, re-creating the iconic soundtracks of classic video games like <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">Doom</a> and <a href="https://en.wikipedia.org/wiki/Diablo_(video_game)">Diablo</a>. Click the play button to listen to the sample output:</p>
<figure>
  <div class="embed-responsive embed-responsive-16by9 rounded mb-3 border">
    
  </div>
  <figcaption class="figure-caption text-center">E1M1 - At Doom's Gate (Bobby Prince), Tristram (Matt Uelmen)</figcaption>
</figure>

<p>Once you find a guitar tab that you like, you can plug it into your Python guitar synthesizer and bring the music to life. For example, the <a href="https://www.songsterr.com/">Songsterr</a> website is a fantastic resource with a wide range of songs you can choose from.</p>
<h2 id="project-overview">Project Overview<a class="headerlink" href="https://realpython.com/atom.xml#project-overview" title="Permanent link"></a></h2>
<p>For your convenience, the project that you’re about to build, along with its third-party dependencies, will be managed by Poetry. The project will contain two Python packages with distinctly different areas of responsibility:</p>
<ol>
<li><strong><code>digitar</code>:</strong> For the synthesis of the digital guitar sound</li>
<li><strong><code>tablature</code>:</strong> For reading and interpreting guitar tablature from a file</li>
</ol>
<p>You’ll also design and implement a custom <strong>data format</strong> to store guitar tabs on disk or in memory. This will allow you to play music based on a fairly standard tablature notation, which you’ll find in various places on the Internet. Your project will also provide a <strong>Python script</strong> to tie everything together, which will let you interpret the tabs with a single command right from your terminal.</p>
<p>Now, you can dive into the details of what you’ll need to set up your development environment and start coding.</p>
<h2 id="prerequisites">Prerequisites<a class="headerlink" href="https://realpython.com/atom.xml#prerequisites" title="Permanent link"></a></h2>
<p>Although you don’t need to be a musician to follow along with this tutorial, a basic understanding of <a href="https://en.wikipedia.org/wiki/Music_theory">musical concepts</a> such as <a href="https://en.wikipedia.org/wiki/Musical_note">notes</a>, <a href="https://en.wikipedia.org/wiki/Semitone">semitones</a>, <a href="https://en.wikipedia.org/wiki/Octave">octaves</a>, and <a href="https://en.wikipedia.org/wiki/Chord_(music)">chords</a> will help you grasp the information more quickly. It’d also be nice if you had a rough idea of how computers represent and process <a href="https://en.wikipedia.org/wiki/Digital_audio">digital audio</a> in terms of sampling rate, bit depth, and file formats like <a href="https://realpython.com/python-wav-files/">WAV</a>.</p>
<p>But don’t worry if you’re new to these ideas! You’ll be guided through each step in small increments with clear explanations and examples. So, even if you’ve never done any music synthesis before, you’ll have a working <strong>digital guitar</strong> or <strong>digitar</strong> by the end of this tutorial.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You can <a href="https://www.youtube.com/watch?v=rgaTLrZGlk0">learn music theory in half an hour</a> by watching an excellent and free video by Andrew Huang.</p>
</div>
<p>The project that you’ll build was tested against <a href="https://realpython.com/python312-new-features/">Python 3.12</a> but should work fine in earlier Python versions, too, down to <a href="https://realpython.com/python310-new-features/">Python 3.10</a>. In case you need a quick refresher, here’s a list of helpful resources covering the most important language features that you’ll take advantage of in your digital guitar journey:</p>
<ul>
<li><a href="https://realpython.com/python-walrus-operator/">Assignment expressions</a></li>
<li><a href="https://realpython.com/python-data-classes/">Data classes</a></li>
<li><a href="https://realpython.com/python-enum/">Enumerations</a></li>
<li><a href="https://realpython.com/duck-typing-python/#understanding-type-hints-and-static-duck-typing">Protocols (static duck typing)</a></li>
<li><a href="https://realpython.com/python310-new-features/#structural-pattern-matching">Structural pattern matching</a></li>
<li><a href="https://realpython.com/python-type-checking/">Type hints</a></li>
</ul>
<p>Other than that, you’ll use the following third-party Python packages in your project:</p>
<ul>
<li><a href="https://realpython.com/numpy-tutorial/">NumPy</a> to simplify and speed up the underlying sound synthesis</li>
<li><a href="https://pypi.org/project/pedalboard/">Pedalboard</a> to apply special effects akin to electric guitar amplifiers </li>
<li><a href="https://realpython.com/python-pydantic/">Pydantic</a> and <a href="https://realpython.com/python-yaml/">PyYAML</a> to parse musical tablature representing finger movements on a guitar neck</li>
</ul>
</div><h2><a href="https://realpython.com/python-guitar-synthesizer/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-guitar-synthesizer/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-19T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Build a Guitar Synthesizer</title>
<link>https://realpython.com/quizzes/python-guitar-synthesizer/</link>
<guid>https://realpython.com/quizzes/python-guitar-synthesizer/</guid>
<content:encoded><![CDATA[
<div> 音乐理论,声音合成,Python,测验,理解<br />
音乐理论和声音合成是本文的主要内容，通过Python测验来测试对这些概念的理解。文章提供了一些关键概念，可以帮助读者回顾相关知识。<br /><br />总结: 音乐理论和声音合成是本文的主要内容，通过Python测验来测试对这些概念的理解。文章提供了一些关键概念，可以帮助读者回顾相关知识。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of what it takes to <a href="https://realpython.com/python-guitar-synthesizer/">build a guitar synthesizer</a> in Python. By working through this quiz, you&rsquo;ll revisit a few key concepts from the music theory and sound synthesis.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-18T12:00:00+00:00</pubDate>
</item>
<item>
<title>Rounding Numbers in Python</title>
<link>https://realpython.com/courses/rounding-numbers-python/</link>
<guid>https://realpython.com/courses/rounding-numbers-python/</guid>
<content:encoded><![CDATA[
<div> 数据分析、数据集、偏见、四舍五入、Python<br />
四舍五入在数据分析中的重要性不容忽视，熟练掌握Python中的四舍五入方法可以避免引入偏见。本视频课程将教授不同四舍五入策略的实现方法，以及四舍五入对数据的影响。学习者将掌握在纯Python、NumPy数组和pandas数据框中进行四舍五入的技能，并了解何时应用不同的四舍五入策略，避免数据集的偏见。<br /><br />总结: 数据分析中避免偏见至关重要，学习正确的四舍五入方法对数据集的准确性至关重要。Python中的四舍五入方法能够实现不同的策略，同时也能最小化数据集的偏见。 <div>
<p>With many businesses <a href="https://stackoverflow.blog/2017/09/14/python-growing-quickly/">turning to Python&rsquo;s powerful data science ecosystem</a> to analyze their data, understanding how to avoid introducing bias into datasets is absolutely vital. If you&rsquo;ve studied some statistics, then you&rsquo;re probably familiar with terms like reporting bias, selection bias, and sampling bias. There&rsquo;s another type of bias that plays an important role when you&rsquo;re dealing with numeric data: rounding bias. </p>
<p>Understanding how rounding works in Python can help you avoid biasing your dataset. This is an important skill. After all, drawing conclusions from biased data can lead to costly mistakes.</p>
<p><strong>In this video course, you&rsquo;ll learn:</strong></p>
<ul>
<li>Why the way you round numbers is important</li>
<li>How to round a number according to <strong>various rounding strategies</strong></li>
<li>How to <strong>implement</strong> each strategy in pure Python</li>
<li>How <strong>rounding affects data</strong> and which rounding strategy <strong>minimizes this effect</strong></li>
<li>How to round numbers in <strong>NumPy arrays</strong> and <strong>pandas DataFrames</strong></li>
<li>When to apply different rounding strategies</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-18T14:00:00+00:00</pubDate>
</item>
<item>
<title>Ruff: A Modern Python Linter for Error-Free and Maintainable Code</title>
<link>https://realpython.com/ruff-python/</link>
<guid>https://realpython.com/ruff-python/</guid>
<content:encoded><![CDATA[
<div> Linting, Ruff, Python, errors, installation
Linting是写作干净可读代码的重要工具，Ruff是一个现代的linter，能够分析代码并寻找错误、风格问题和可疑结构。通过linting，可以在提交代码之前解决问题并与他人分享。Ruff是一个快速且拥有简单界面的linter工具，可作为其他linting和格式化工具的替代品。本文介绍了安装Ruff的方法、检查Python代码的错误、自动修复linting错误、格式化代码以及添加配置以增强linting的方式。总结：通过Ruff这一现代Python linter，您可以检查和格式化代码，同时提供一系列可选配置选项以简化linting过程。 <div>
<div><p>Linting is essential to writing <strong>clean and readable code</strong> that you can share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and <a href="https://realpython.com/python-code-quality/">improve your code quality</a> before you <a href="https://realpython.com/python-git-github-intro/#committing-changes">commit</a> your code and share it with others. </p>
<p>Ruff is a modern linter that’s extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as <a href="https://github.com/PyCQA/flake8">Flake8</a>, <a href="https://github.com/PyCQA/isort">isort</a>, and <a href="https://github.com/psf/black">Black</a>. It’s quickly becoming one of the most popular Python linters.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Install <strong>Ruff</strong></li>
<li><strong>Check your Python code</strong> for errors</li>
<li>Automatically <strong>fix your linting errors</strong></li>
<li>Use Ruff to <strong>format your code</strong></li>
<li><strong>Add optional configurations</strong> to supercharge your linting</li>
</ul>
<p>To get the most from this tutorial, you should be familiar with <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environments</a>, <a href="https://realpython.com/what-is-pip/">installing third-party modules</a>, and be comfortable with using the <a href="https://realpython.com/terminal-commands/">terminal</a>.</p>
<div class="alert alert-warning">
<p><strong>Ruff cheat sheet:</strong> <a class="alert-link" href="https://realpython.com/bonus/ruff-python-pdf/">Click here to get access to a free Ruff cheat sheet</a> that summarizes the main Ruff commands you’ll use in this tutorial.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Ruff: A Modern Python Linter” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/ruff-python/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Ruff: A Modern Linter for Error-Free and Maintainable Code" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Showcase-Ruff-Linter_Watermarked.71e600eb11de.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/ruff-python/"><span class="my-0 h4">Ruff: A Modern Python Linter</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Ruff, a modern linter for Python. By working through this quiz, you'll revisit why you'd want to use Ruff to check your Python code and how it automatically fixes errors, formats your code, and provides optional configurations to enhance your linting.</p>
    </div>
  </div>

</div>

<h2 id="installing-ruff">Installing Ruff<a class="headerlink" href="https://realpython.com/atom.xml#installing-ruff" title="Permanent link"></a></h2>
<p>Now that you know why linting your code is important and how Ruff is a powerful tool for the job, it’s time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it. </p>
<p>Assuming your project is already set up with a virtual environment, you can install Ruff in the following ways:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>ruff
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In addition to <code>pip</code>, you can also install Ruff with <a href="https://brew.sh/">Homebrew</a> if you’re on macOS or Linux:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>brew<span class="w"> </span>install<span class="w"> </span>ruff
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p><a href="https://docs.conda.io/en/latest/">Conda</a> users can install Ruff using <code>conda-forge</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>conda<span class="w"> </span>install<span class="w"> </span>-c<span class="w"> </span>conda-forge<span class="w"> </span>ruff
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>If you use Arch, Alpine, or openSUSE Linux, you can also use the official distribution repositories. You’ll find specific instructions on the <a href="https://docs.astral.sh/ruff/installation/">Ruff installation page</a> of the official documentation.</p>
<p>Additionally, if you’d like Ruff to be available for all your projects, you might want to install Ruff with <a href="https://realpython.com/python-pipx/"><code>pipx</code></a>.</p>
<p>You can check that Ruff installed correctly by using the <code>ruff version</code> command:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>ruff<span class="w"> </span>version
<span class="go">ruff 0.4.7</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>For the <code>ruff</code> command to appear in your <a href="https://en.wikipedia.org/wiki/PATH_(variable)"><code>PATH</code></a>, you may need to close and reopen your terminal application or start a new terminal session.</p>
<h2 id="linting-your-python-code">Linting Your Python Code<a class="headerlink" href="https://realpython.com/atom.xml#linting-your-python-code" title="Permanent link"></a></h2>
<p>While linting helps keep your code consistent and error-free, it doesn’t guarantee that your code will be <em>bug-free</em>. Finding the bugs in your code is best handled with a <a href="https://realpython.com/python-debug-idle/">debugger</a> and adequate <a href="https://realpython.com/pytest-python-testing/">testing</a>, which won’t be covered in this tutorial. Coming up in the next sections, you’ll learn how to use Ruff to check for errors and speed up your workflow.</p>
<h3 id="checking-for-errors">Checking for Errors<a class="headerlink" href="https://realpython.com/atom.xml#checking-for-errors" title="Permanent link"></a></h3>
<p>The code below is a simple script called <code>one_ring.py</code>. When you run it, it gets a <a href="https://realpython.com/python-random/">random</a> <strong>Lord of the Rings</strong> character name from a <a href="https://realpython.com/python-tuple/"><code>tuple</code></a> and lets you know if that character bore the burden of the <strong>One Ring</strong>. This code has no real practical use and is just a bit of fun. Regardless of the size of your code base, the steps are going to be the same: </p>
</div><h2><a href="https://realpython.com/ruff-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/ruff-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Ruff: A Modern Python Linter</title>
<link>https://realpython.com/quizzes/ruff-python/</link>
<guid>https://realpython.com/quizzes/ruff-python/</guid>
<content:encoded><![CDATA[
<div> 自动修复、代码格式化、可选配置、Linting、Ruff <br />
Linting工具Ruff能够自动修复Python代码中的错误，格式化代码，并提供可选配置以增强Linting功能。通过使用Ruff，可以提高Python代码的质量和可读性，确保代码风格一致，同时自动修复常见错误，使代码更加规范。Linting是代码审查的一种重要方式，能够帮助开发人员发现并解决潜在的问题，提高代码质量和稳定性。Ruff为Python开发者提供了一个方便实用的工具，有助于提升编码效率和整体代码质量。 <br /><br />总结: 自动修复、代码格式化、可选配置、Linting、Ruff。Linting工具Ruff能够提高Python代码质量和可读性，通过自动修复错误、格式化代码和提供可选配置，帮助开发人员发现并解决潜在问题，提高代码质量和稳定性。Ruff为Python开发者提供便捷的工具，促进编码效率和代码质量的提升。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/ruff-python/">Ruff, a modern linter for Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit why you&rsquo;d want to use Ruff to check your Python code and how it automatically fixes errors, formats your code, and provides optional configurations to enhance your linting.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #208: Detecting Outliers in Your Data With Python</title>
<link>https://realpython.com/podcasts/rpp/208/</link>
<guid>https://realpython.com/podcasts/rpp/208/</guid>
<content:encoded><![CDATA[
<div> 关键词: 数据, 异常点检测, Python, Brett Kennedy, 图书<br />
<br />
数据分析中的关键环节是发现数据中最有趣或可疑的点，可以使用Python中的库和技术来检测这些异常值。本周节目邀请了作者Brett Kennedy谈论他的书籍"Outlier Detection in Python"，详细介绍了如何利用Python进行异常点检测的方法和技巧。本书可以帮助读者更好地理解和利用数据中潜在的特殊点和异常值，提高数据分析的准确性和深度。<br /><br />总结: 数据分析关键，Python库技术，异常点处理，Brett Kennedy，书籍介绍。 <div>
<p>How do you find the most interesting or suspicious points within your data? What libraries and techniques can you use to detect these anomalies with Python? This week on the show, we speak with author Brett Kennedy about his book "Outlier Detection in Python."</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-14T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Mappings: A Comprehensive Guide</title>
<link>https://realpython.com/python-mappings/</link>
<guid>https://realpython.com/python-mappings/</guid>
<content:encoded><![CDATA[
<div> Mappings, Characteristics, Operations, defaultdict, Counter
<br />
字典是Python中常见的映射，具有查找键并检索值的功能。映射的特征包括能够使用键检索值，例如使用`points["Sarah"]`查找字典中相应的值。字典还可以设置缺失键的默认值，可以使用`collections`模块中的`defaultdict`实现。另外，映射也是可迭代容器，具有特定的长度，并且可以通过`len()`方法获取其长度。比如，使用`Counter`可以将字符串中的字符转换为键，以字符的出现次数作为值，同时也可以使用`in`关键字检查映射中是否存在某个元素。Mappings是一种常见的数据结构，对于Python编程非常重要。 
<br /><br />总结: <div>
<div><p>One of the main data structures you learn about early in your Python learning journey is the dictionary. Dictionaries are the most common and well-known of Python’s <strong>mappings</strong>. However, there are other mappings in Python’s standard library and third-party modules. Mappings share common characteristics, and understanding these shared traits will help you use them more effectively.</p>
<p><strong>In this tutorial, you’ll learn about:</strong></p>
<ul>
<li>Basic <strong>characteristics of a mapping</strong></li>
<li><strong>Operations</strong> that are <strong>common to most mappings</strong></li>
<li>Abstract base classes <strong><code>Mapping</code> and <code>MutableMapping</code></strong></li>
<li><strong>User-defined mutable and immutable mappings</strong> and how to create them</li>
</ul>
<p>This tutorial assumes that you’re familiar with <a href="https://realpython.com/python-data-types/">Python’s built-in data types</a>, especially <a href="https://realpython.com/python-dicts/">dictionaries</a>, and with the <a href="https://realpython.com/python3-object-oriented-programming/">basics of object-oriented programming</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-mappings-code/">Click here to download the free sample code</a> that you’ll use to learn about mappings in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Mappings” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-mappings/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Mappings: A Comprehensive Guide" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-Mappings_Watermarked-2.a8cbbb3a0c5d.jpg" style="background: #b8aae5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-mappings/"><span class="my-0 h4">Python Mappings</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the basic characteristics and operations of Python mappings. By working through this quiz, you'll revisit the key concepts and techniques of creating a custom mapping.</p>
    </div>
  </div>

</div>

<h2 id="understanding-the-main-characteristics-of-python-mappings">Understanding the Main Characteristics of Python Mappings<a class="headerlink" href="https://realpython.com/atom.xml#understanding-the-main-characteristics-of-python-mappings" title="Permanent link"></a></h2>
<p>A <a href="https://docs.python.org/3/glossary.html#term-mapping">mapping</a> is a collection that allows you to look up a key and retrieve its value. The keys in mappings can be objects of a broad range of types. However, in most mappings, there are object types that can’t be used as keys, as you’ll learn later in this tutorial.</p>
<p>The previous paragraph described mappings as <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection">collections</a>. A collection is an iterable container that has a defined size. However, mappings also have additional features. You’ll explore each of these mapping characteristics with examples from Python’s main mapping types.</p>
<p>The feature that’s most characteristic of mappings is the ability to retrieve a value using a key. You can use a <a href="https://realpython.com/python-dicts/">dictionary</a> to demonstrate this operation:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">points</span> <span class="o">=</span> <span class="p">{</span>
<span class="gp">... </span>    <span class="s2">"Denise"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="gp">... </span>    <span class="s2">"Igor"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
<span class="gp">... </span>    <span class="s2">"Sarah"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="gp">... </span>    <span class="s2">"Trevor"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="gp">... </span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points</span><span class="p">[</span><span class="s2">"Sarah"</span><span class="p">]</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points</span><span class="p">[</span><span class="s2">"Matt"</span><span class="p">]</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">KeyError</span>: <span class="n">'Matt'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The dictionary <code>points</code> contains four items, each with a key and a value. You can use the key within the square brackets to fetch the value associated with that key. However, if the key doesn’t exist in the dictionary, the code raises a <code>KeyError</code>.</p>
<p>You can use one of the mappings in the standard-library <a href="https://realpython.com/python-collections-module/"><code>collections</code></a> module to assign a default value for keys that aren’t present in the collection. The <strong><a href="https://realpython.com/python-defaultdict/"><code>defaultdict</code></a></strong> type includes a callable that’s called each time you try to access a key that doesn’t exist. If you want the default value to be zero, you can use a <a href="https://realpython.com/python-lambda/"><code>lambda</code> function</a> that returns 0 as the first argument in <code>defaultdict</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points_default</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span>
<span class="gp">... </span>    <span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">points</span><span class="p">,</span>
<span class="gp">... </span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">points_default</span>
<span class="go">defaultdict(&lt;function &lt;lambda&gt; at 0x104a95da0&gt;, {'Denise': 3,</span>
<span class="go">    'Igor': 2, 'Sarah': 3, 'Trevor': 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points_default</span><span class="p">[</span><span class="s2">"Sarah"</span><span class="p">]</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points_default</span><span class="p">[</span><span class="s2">"Matt"</span><span class="p">]</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">points_default</span>
<span class="go">defaultdict(&lt;function &lt;lambda&gt; at 0x103e6c700&gt;, {'Denise': 3,</span>
<span class="go">    'Igor': 2, 'Sarah': 3, 'Trevor': 1, 'Matt': 0})</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <code>defaultdict</code> <a href="https://realpython.com/python-class-constructor/">constructor</a> has two arguments in this example. The first argument is the callable that’s used when a default value is needed. The second argument is the dictionary you created earlier. You can use any valid argument when you call <code>dict()</code> as the second argument in <code>defaultdict()</code> or omit this argument to create an empty <code>defaultdict</code>.</p>
<p>When you access a key that’s missing from the dictionary, the key is added, and the default value is assigned to it. You can also create the same <code>points_default</code> object using the callable <code>int</code> as the first argument since calling <code>int()</code> with no arguments returns 0.</p>
<p>All mappings are also collections, which means they’re iterable containers with a defined length. You can explore these characteristics with another mapping in Python’s standard library, <strong><a href="https://realpython.com/python-counter/"><code>collections.Counter</code></a></strong>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="s2">"learning python"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span>
<span class="go">Counter({'n': 3, 'l': 1, 'e': 1, 'a': 1, 'r': 1, 'i': 1, 'g': 1,</span>
<span class="go">    ' ': 1, 'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1})</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The letters in the string <code>"learning python"</code> are converted into keys in <code>Counter</code>, and the number of occurrences of each letter is used as the value corresponding to each key.</p>
<p>You can confirm that this mapping is iterable, has a defined length, and is a container:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">letters</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">l</span>
<span class="go">e</span>
<span class="go">a</span>
<span class="go">r</span>
<span class="go">n</span>
<span class="go">i</span>
<span class="go">g</span>

<span class="go">p</span>
<span class="go">y</span>
<span class="go">t</span>
<span class="go">h</span>
<span class="go">o</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
<span class="go">13</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">"n"</span> <span class="ow">in</span> <span class="n">letters</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s2">"x"</span> <span class="ow">in</span> <span class="n">letters</span>
<span class="go">False</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You can use the <code>Counter</code> object <code>letters</code> in a <code>for</code> loop, which confirms it’s iterable. All mappings are iterable. However, the iteration loops through the keys and not the values. You’ll see how to iterate through the values or through both keys and values later in this tutorial.</p>
<p>The built-in <a href="https://realpython.com/len-python-function/"><code>len()</code> function</a> returns the number of items in the mapping. This is equal to the number of unique characters in the original string, including the space character. The object is sized since <code>len()</code> returns a value.</p>
<p>You can use the <code>in</code> keyword to confirm which elements are in the mapping. This check alone isn’t sufficient to confirm that the mapping is a container. However, you can also access the object’s <code>.__contains__()</code> special method directly:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span><span class="o">.</span><span class="fm">__contains__</span><span class="p">(</span><span class="s2">"n"</span><span class="p">)</span>
<span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-mappings/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-mappings/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-12T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Mappings</title>
<link>https://realpython.com/quizzes/python-mappings/</link>
<guid>https://realpython.com/quizzes/python-mappings/</guid>
<content:encoded><![CDATA[
<div> 提取关键词:
- quiz
- basic characteristics
- operations
- custom mapping
- Python Tricks

<br />总结:
这篇文章介绍了关于Python的基本特征和操作，以及创建自定义映射的关键概念和技术。通过这篇文章，读者可以测试对Python的理解，复习重要概念和技巧。另外，还提到了Python Tricks，为读者提供了一种通过简短的技巧增强Python编程能力的方式。这篇文章帮助读者全面理解Python的基础知识和操作，以及如何创建自定义映射。<br /> <div>
<p>In this quiz, you&rsquo;ll test your understanding of the basic characteristics and operations of <a href="https://realpython.com/python-mappings/">Python mappings</a>. By working through this quiz, you&rsquo;ll revisit the key concepts and techniques of creating a custom mapping.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Listing All Files in a Directory With Python</title>
<link>https://realpython.com/courses/listing-all-files-directory/</link>
<guid>https://realpython.com/courses/listing-all-files-directory/</guid>
<content:encoded><![CDATA[
<div> 文件夹、Python、列表、内容、方法
<br />
文件夹中有多种方法可以获取其内容，每种方法都有其优点和缺点。本视频课程将重点介绍Python中最通用的方法来列出文件夹中的项目，同时也会涉及一些替代工具。总结：文件夹中内容获取的方法多样，需要根据具体情况选择适合的方法。 <div>
<p>Getting a <a href="https://realpython.com/python-lists-tuples/">list</a> of all the <a href="https://en.wikipedia.org/wiki/Computer_file">files</a> and folders in a <a href="https://en.wikipedia.org/wiki/Directory_(computing)">directory</a> is a natural first step for many <strong>file-related operations</strong> in Python. When looking into it, though, you may be surprised to find various ways to go about it.</p>
<p>When you&rsquo;re faced with many ways of doing something, it can be a good indication that there&rsquo;s no one-size-fits-all solution to your problems. Most likely, every solution will have its own advantages and trade-offs. This is the case when it comes to getting a list of the contents of a directory in Python.</p>
<p>In this video course, you&rsquo;ll be focusing on the most general-purpose techniques in the <a href="https://realpython.com/python-pathlib/"><code>pathlib</code> module</a> to list items in a directory, but you&rsquo;ll also learn a bit about some alternative tools.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-11T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News: What's New From May 2024</title>
<link>https://realpython.com/python-news-may-2024/</link>
<guid>https://realpython.com/python-news-may-2024/</guid>
<content:encoded><![CDATA[
<div> Python 3.13, beta版本, 发布, 特性, 测试

总结:<br /><br />Python 3.13的第一个beta版本发布了，重点在内部优化和清理，第二个beta版本将引入更多功能。开发者可以通过安装Python 3.13.0b1来尝试新功能，但目前一些功能在Windows上无法使用。Python 3.13的最终发布计划在今年10月，第一个beta版本的目的是让第三方库维护者进行兼容性测试。PEP 649推迟到Python 3.14发布。Python Software Foundation发布了2023年度影响报告。EuroPython 2024的主题演讲嘉宾也已经公布。 <div>
<div><p>May was packed with exciting updates and events in the Python community. This month saw the release of the first beta version of <strong>Python 3.13</strong>, the conclusion of <strong>PyCon US 2024</strong>, and the announcement of the keynote speakers for <strong>EuroPython 2024</strong>. Additionally, <strong>PEP 649</strong> has been delayed until the Python 3.14 release, and the Python Software Foundation published its <strong>2023 Annual Impact Report</strong>.</p>
<p>Get ready to explore the recent highlights!</p>
<div class="alert alert-warning"><p><strong>Join Now:</strong> <a class="alert-link" href="https://realpython.com/atom.xml">Click here to join the Real Python Newsletter</a> and you'll never miss another Python tutorial, course update, or post.</p></div>

<h2 id="the-first-beta-version-of-python-313-released">The First Beta Version of Python 3.13 Released<a class="headerlink" href="https://realpython.com/atom.xml#the-first-beta-version-of-python-313-released" title="Permanent link"></a></h2>
<p>After nearly a year of continuous development, the first beta release of <a href="https://www.python.org/downloads/release/python-3130b1/">Python 3.13</a> was made available to the general public. It marks a significant milestone in Python’s <a href="https://peps.python.org/pep-0602/">annual release cycle</a>, officially kicking off the <a href="https://en.wikipedia.org/wiki/Software_release_life_cycle#Beta">beta testing</a> phase and introducing a <a href="https://en.wikipedia.org/wiki/Freeze_(software_engineering)">freeze</a> on new features. Beyond this point, Python’s core developers will shift their focus to only identifying and fixing bugs, enhancing security, and improving the interpreter’s performance.</p>
<p>While it’s still months before the final release planned for October 2024, as indicated by the <a href="https://peps.python.org/pep-0719/">Python 3.13 release schedule</a>, third-party library maintainers are strongly encouraged to test their packages with this new Python version. The goal of early beta testing is to ensure compatibility and address any issues that may arise so that users can expect a smoother transition when Python 3.13 gets officially released later this year.</p>
<p>Although you shouldn’t use a beta version in any of your projects, especially in production environments, you can go ahead and try out the new version today. To check out Python’s latest features, you must install <strong>Python 3.13.0b1</strong> using one of several approaches.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> If you’d like to share your feedback or file a bug against a <a href="https://realpython.com/python-pre-release/">pre-release</a> development version, then <a href="https://github.com/python/cpython/issues">open an issue</a> on Python’s GitHub repository.</p>
</div>
<p>The quickest and arguably the most straightforward way to <a href="https://realpython.com/intro-to-pyenv/">manage multiple Python versions</a> alongside your system-wide interpreter is to use a tool like <code>pyenv</code> in the terminal:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="hll"><span class="gp">$ </span>pyenv<span class="w"> </span>install<span class="w"> </span><span class="m">3</span>.13.0b1
</span><span class="gp">$ </span>pyenv<span class="w"> </span>shell<span class="w"> </span><span class="m">3</span>.13.0b1
<span class="gp">$ </span>python
<span class="go">Python 3.13.0b1 (main, May 15 2024, 10:41:55) [GCC 13.2.0] on linux</span>
<span class="go">Type "help", "copyright", "credits" or "license" for more information.</span>
<span class="go">&gt;&gt;&gt; </span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The highlighted line brings the first beta release of Python 3.13 onto your computer, while the following command temporarily sets the path to the <code>python</code> executable in your current <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shell</a> session. As a result, the <code>python</code> command points to the specified Python interpreter.</p>
<p>Alternatively, you can use a Python installer, which you’ll find at the bottom of the <a href="https://www.python.org/downloads/release/python-3130b1/">downloads page</a>, or <a href="https://realpython.com/python-versions-docker/">run Python in an isolated Docker container</a> to keep it completely separate from your operating system. However, for ultimate control, you can try <a href="https://github.com/python/cpython?tab=readme-ov-file#build-instructions">building the interpreter from source code</a> based on the instructions in the README file. This method will let you experiment with more advanced features, like turning off the <a href="https://realpython.com/python-gil/">GIL</a>.</p>
<p>Unlike previous Python releases, which introduced a host of tangible syntactical features that you could get your hands on, this one mainly emphasizes internal optimizations and cleanup. That said, according to the official <a href="https://docs.python.org/3.13/whatsnew/3.13.html">release summary</a> document, there are a few notable <strong>new features</strong> that will be immediately visible to most Python programmers:</p>
<ul>
<li><a href="https://docs.python.org/3.13/whatsnew/3.13.html#whatsnew313-better-interactive-interpreter">A better standard Python REPL</a></li>
<li><a href="https://docs.python.org/3.13/whatsnew/3.13.html#improved-error-messages">Improved error messages</a></li>
</ul>
<p>Some of these features don’t work on Windows at the moment because they rely on Unix-specific libraries, so you won’t see any difference unless you’re a macOS or Linux user. The good news is that <a href="https://fosstodon.org/@tonybaloney/112477098396842900">Windows support</a> is coming in the second beta release, which will arrive soon, thanks to Real Python team member <a href="https://realpython.com/interview-anthony-shaw/">Anthony Shaw</a>.</p>
</div><h2><a href="https://realpython.com/python-news-may-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-may-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-10T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #207: Decomposing Software Problems &amp; Avoiding the Trap of Clever Code</title>
<link>https://realpython.com/podcasts/rpp/207/</link>
<guid>https://realpython.com/podcasts/rpp/207/</guid>
<content:encoded><![CDATA[
<div> PyCoder's Weekly, Christopher Trudeau, software problem, individual steps, writing overly clever code
<br />
PyCoder's Weekly是一本涉及Python开发的周刊，本文介绍了Christopher Trudeau带来的一系列文章和项目。文章主要讨论了如何有效地将软件问题分解为单独的步骤以及写过于巧妙的代码的迹象。总结: PyCoder's Weekly周刊带来了Christopher Trudeau的文章和项目，介绍了如何将软件问题分解为步骤，以及如何避免写过于巧妙的代码。 <div>
<p>How do you effectively break a software problem into individual steps? What are signs you're writing overly clever code? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-07T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python String Formatting: Available Tools and Their Features</title>
<link>https://realpython.com/quizzes/python-string-formatting-update/</link>
<guid>https://realpython.com/quizzes/python-string-formatting-update/</guid>
<content:encoded><![CDATA[
<div> 关键词: Python, 字符串格式化, f-strings, .format() 方法, 取模运算符
总结：<br />Python提供了多种工具来进行字符串格式化，包括使用f-strings, .format() 方法和取模运算符。f-strings是一种简洁且直观的方法，通过在字符串前加上f或F来创建，可以在{}内插入变量。另一种方法是使用.format()方法，通过在字符串中使用{}占位符并在.format()方法中传入变量的值来进行字符串格式化。另外，可以使用取模运算符来进行字符串格式化，使用%符号来指定占位符并在后面传入变量。通过掌握这些工具，可以更灵活地对字符串进行格式化。 <br /><br />总结: <div>
<p>Test your understanding of Python&rsquo;s tools for string formatting, including f-strings, the <code>.format()</code> method, and the modulo operator.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-string-formatting/">Python String Formatting: Available Tools and Their Features</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python String Formatting: Available Tools and Their Features</title>
<link>https://realpython.com/python-string-formatting/</link>
<guid>https://realpython.com/python-string-formatting/</guid>
<content:encoded><![CDATA[
<div> f-strings, .format(), modulo operator, string interpolation, string formatting<br />
<br />
总结:<br />
文章介绍了Python中的字符串格式化工具，包括f-strings、.format()方法和百分号操作符。使用f-strings和.format()方法可以对字符串进行格式化，支持更多的格式选项，而百分号操作符则较为陈旧且选项有限。文章说明了如何使用f-strings进行字符串插值和格式化，以及如何使用.format()方法和百分号操作符进行字符串格式化。概述了Python中的字符串插入和格式化的基本概念，并详细介绍了这些工具的优点和限制。 <div>
<div><p><strong>String formatting</strong> is the process of applying a proper format to a given value while using this value to create a new string through interpolation. Python has several tools for string interpolation that support many formatting features. In modern Python, you’ll use f-strings or the <code>.format()</code> method most of the time. However, you’ll see the modulo operator (<code>%</code>) being used in legacy code.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Format strings using <strong>f-strings</strong> for eager interpolation</li>
<li>Use the <strong><code>.format()</code></strong> method to format your strings lazily</li>
<li>Work with the <strong>modulo operator (<code>%</code>)</strong> for string formatting</li>
<li>Decide which interpolation and <strong>formatting tool</strong> to use</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with Python’s <a href="https://realpython.com/python-strings/">string data type</a> and the available <a href="https://realpython.com/python-string-interpolation/">string interpolation</a> tools. Having a basic knowledge of the string <a href="https://realpython.com/python-format-mini-language/">formatting mini-language</a> is also a plus.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-string-formatting-code/">Click here to download the free sample code</a> you’ll use to learn about Python’s string formatting tools.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python String Formatting: Available Tools and Their Features” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-string-formatting-update/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python String Formatting: Available Tools and Their Features" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-String-Formatting-Best-Practices_Watermarked-2.e0a560b0184d.jpg" style="background: #abe0e6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-string-formatting-update/"><span class="my-0 h4">Python String Formatting: Available Tools and Their Features</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of the available tools for string formatting in Python, as well as their strengths and weaknesses. These tools include f-strings, the .format() method, and the modulo operator.</p>
    </div>
  </div>

</div>

<h2 id="interpolating-and-formatting-strings-in-python">Interpolating and Formatting Strings in Python<a class="headerlink" href="https://realpython.com/atom.xml#interpolating-and-formatting-strings-in-python" title="Permanent link"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/String_interpolation">String interpolation</a> involves generating strings by inserting other strings or objects into specific places in a base string or template. For example, here’s how you can do some string interpolation using an f-string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Bob"</span>

<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">!"</span>
<span class="go">'Hello, Bob!'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this quick example, you first have a Python <a href="https://realpython.com/python-variables/">variable</a> containing a string object, <code>"Bob"</code>. Then, you create a new string using an f-string. In this string, you insert the content of your <code>name</code> variable using a replacement field. When you run this last line of code, Python builds a final string, <code>'Hello, Bob!'</code>. The insertion of <code>name</code> into the f-string is an interpolation.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into string interpolation, check out the <a href="https://realpython.com/python-string-interpolation/">String Interpolation in Python: Exploring Available Tools</a> tutorial.</p>
</div>
<p>When you do string interpolation, you may need to <em>format</em> the interpolated values to produce a well-formatted final string. To do this, you can use different string interpolation tools that support string formatting. In Python, you have these three tools:</p>
<ol>
<li><a href="https://realpython.com/python-f-strings/">F-strings</a></li>
<li>The <a href="https://realpython.com/python-string-interpolation/#creating-strings-with-the-strformat-method"><code>str.format()</code></a> method</li>
<li>The <a href="https://realpython.com/python-string-interpolation/#using-the-modulo-operator-for-interpolation">modulo operator (<code>%</code>)</a></li>
</ol>
<p>The first two tools support the string formatting mini-language, a feature that allows you to fine-tune your strings. The third tool is a bit old and has fewer formatting options. However, you can use it to do some minimal formatting.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> The built-in <a href="https://docs.python.org/3/library/functions.html#format"><code>format()</code></a> function is yet another tool that supports the format specification mini-language. This function is typically used for date and number formatting, but you won’t cover it in this tutorial.</p>
</div>
<p>In the following sections, you’ll start by learning a bit about the string formatting mini-language. Then, you’ll dive into using this language, f-strings, and the <code>.format()</code> method to format your strings. Finally, you’ll learn about the formatting capabilities of the modulo operator.</p>
<h2 id="using-f-strings-to-format-strings">Using F-Strings to Format Strings<a class="headerlink" href="https://realpython.com/atom.xml#using-f-strings-to-format-strings" title="Permanent link"></a></h2>
<p>Python <a href="https://dbader.org/blog/cool-new-features-in-python-3-6">3.6</a> added a string interpolation and formatting tool called <strong>formatted string literals</strong>, or <a href="https://realpython.com/python-f-strings/">f-strings</a> for short. As you’ve already learned, f-strings let you embed Python objects and expressions inside your strings. To create an f-string, you must prefix the string with an <code>f</code> or <code>F</code> and insert replacement fields in the string literal. Each replacement field must contain a variable, object, or expression:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"The number is </span><span class="si">{</span><span class="mi">42</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'The number is 42'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">10</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="s2"> plus </span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="s2"> is </span><span class="si">{</span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'5 plus 10 is 15'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the first example, you define an f-string that embeds the number <code>42</code> directly into the resulting string. In the second example, you insert two variables and an expression into the string.</p>
<p>Formatted string literals are a Python parser feature that converts f-strings into a series of string constants and expressions. These are then joined up to build the final string.</p>
<h3 id="using-the-formatting-mini-language-with-f-strings">Using the Formatting Mini-Language With F-Strings<a class="headerlink" href="https://realpython.com/atom.xml#using-the-formatting-mini-language-with-f-strings" title="Permanent link"></a></h3>
<p>When you use f-strings to create strings through interpolation, you need to use <strong>replacement fields</strong>. In f-strings, you can define a replacement field using curly brackets (<code>{}</code>) as in the examples below:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">debit</span> <span class="o">=</span> <span class="mf">300.00</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">credit</span> <span class="o">=</span> <span class="mf">450.00</span>

<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Debit: $</span><span class="si">{</span><span class="n">debit</span><span class="si">}</span><span class="s2">, Credit: $</span><span class="si">{</span><span class="n">credit</span><span class="si">}</span><span class="s2">, Balance: $</span><span class="si">{</span><span class="n">credit</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">debit</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'Debit: $300, Credit: $450.0, Balance: $150.0'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Inside the brackets, you can insert Python objects and <a href="https://realpython.com/python-operators-expressions/">expressions</a>. In this example, you’d like the resulting string to display the currency values using a proper format. However, you get a string that shows the currency values with at most one digit on its decimal part.</p>
</div><h2><a href="https://realpython.com/python-string-formatting/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-string-formatting/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-05T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Interfaces: Object-Oriented Design Principles</title>
<link>https://realpython.com/courses/interfaces-object-oriented-design-principles/</link>
<guid>https://realpython.com/courses/interfaces-object-oriented-design-principles/</guid>
<content:encoded><![CDATA[
<div> Python, Interfaces, Software engineering, ABCMeta, abstractmethod

接口在软件工程中扮演重要角色。随着应用程序的增长，更新和更改代码变得更加困难。经常会出现类似但不相关的类，这可能导致混淆。这个视频课程将教你如何使用Python接口来确定应该使用哪个类来解决当前问题。你将学会接口的工作原理，Python接口创建的注意事项，了解在Python这样的动态语言中接口的有用性，实现非正式Python接口，使用abc.ABCMeta和@abc.abstractmethod来实现正式Python接口。总结：<br /><br />接口在软件工程中扮演重要角色。随着应用程序的增长，更新和更改代码变得更加困难。经常会出现类似但不相关的类，这可能导致混淆。这个视频课程将教你如何使用Python接口来确定应该使用哪个类来解决当前问题。 <div>
<p>Interfaces play an important role in software engineering. As an application grows, updates and changes to the code base become more difficult to manage. More often than not, you wind up having classes that look very similar but are unrelated, which can lead to some confusion. In this video course, you&rsquo;ll see how you can use a <strong>Python interface</strong> to help determine what class you should use to tackle the current problem.</p>
<p><strong>In this video course, you&rsquo;ll be able to:</strong></p>
<ul>
<li><strong>Understand</strong> how interfaces work and the caveats of Python interface creation</li>
<li><strong>Comprehend</strong> how useful interfaces are in a dynamic language like Python</li>
<li><strong>Implement</strong> an informal Python interface</li>
<li><strong>Use</strong> <code>abc.ABCMeta</code> and <code>@abc.abstractmethod</code> to implement a formal Python interface</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-04T14:00:00+00:00</pubDate>
</item>
<item>
<title>String Interpolation in Python: Exploring Available Tools</title>
<link>https://realpython.com/python-string-interpolation/</link>
<guid>https://realpython.com/python-string-interpolation/</guid>
<content:encoded><![CDATA[
<div> f-strings, str.format() method, modulo operator, string interpolation, Template class
<br />
Python提供了多种工具来进行字符串插值，包括f-strings、str.format()方法、模运算符(%)以及Template类。使用f-strings可以实现即时的字符串插值，使用str.format()方法可以实现延迟的字符串插值。模运算符(%)是在Python中常用的字符串插值方式之一。在选择使用f-strings还是str.format()方法时，可以根据具体需求进行决定。另外，可以使用string.Template类创建模板进行字符串插值。这些工具可以帮助提高代码的可读性和维护性。总结: <br />
- Python中提供了多种工具来进行字符串插值，包括f-strings、str.format()方法、模运算符、string interpolation及Template类。<br />
- 使用这些工具可以帮助提高代码的可读性和维护性，选择合适的工具取决于具体需求。 <div>
<div><p><strong>String interpolation</strong> allows you to create strings by inserting objects into specific places in a target string template. Python has several tools for string interpolation, including f-strings, the <code>str.format()</code> method, and the modulo operator (<code>%</code>). Python’s <code>string</code> module also provides the <code>Template</code> class, which you can use for string interpolation.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Learn how to use <strong>f-strings</strong> for <strong>eager</strong> string interpolation</li>
<li>Perform <strong>lazy</strong> string interpolation using the <strong><code>str.format()</code></strong> method</li>
<li>Learn the basics of using the <strong>modulo operator (<code>%</code>)</strong> for string interpolation</li>
<li>Decide whether to use f-strings or the <code>str.format()</code> method for interpolation</li>
<li>Create templates for string interpolation with <strong><code>string.Template</code></strong></li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with Python <a href="https://realpython.com/python-strings/">strings</a>, which are represented by the <a href="https://realpython.com/python-data-types/#strings-and-characters"><code>str</code></a> class.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-string-interpolation-code/">Click here to download the free sample code</a> you’ll use to explore string interpolation tools in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “String Interpolation in Python: Exploring Available Tools” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-string-interpolation/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="String Interpolation in Python: Exploring Available Tools" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/String-Interpolation-in-Python_Watermarked.71ef9704414a.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-string-interpolation/"><span class="my-0 h4">String Interpolation in Python: Exploring Available Tools</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of the available tools for string interpolation in Python, as well as their strengths and weaknesses. These tools include f-strings, the .format() method, and the modulo operator.</p>
    </div>
  </div>

</div>

<h2 id="string-interpolation-in-python">String Interpolation in Python<a class="headerlink" href="https://realpython.com/atom.xml#string-interpolation-in-python" title="Permanent link"></a></h2>
<p>Sometimes, when working with strings, you’d make up strings by using multiple different string values. Initially, you could use the plus operator (<code>+</code>) to concatenate strings in Python. However, this approach results in code with many quotes and pluses:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Pythonista"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">day</span> <span class="o">=</span> <span class="s2">"Friday"</span>  <span class="c1"># Of course 😃</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s2">"! Today is "</span> <span class="o">+</span> <span class="n">day</span> <span class="o">+</span> <span class="s2">"."</span>
</span><span class="go">'Hello, Pythonista! Today is Friday.'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you build a string using some text and a couple of variables that hold string values. The many plus signs make the code hard to read and write. Python must have a better and cleaner way.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about string <strong>concatenation</strong> in Python, check out the <a href="https://realpython.com/python-string-concatenation/">Efficient String Concatenation in Python</a> tutorial.</p>
</div>
<p>The modulo operator (<code>%</code>) came to make the syntax a bit better:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, </span><span class="si">%s</span><span class="s2">! Today is </span><span class="si">%s</span><span class="s2">."</span> <span class="o">%</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
<span class="go">'Hello, Pythonista! Today is Friday.'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you use the modulo operator to insert the <code>name</code> and <code>day</code> variables into the string literals. The process of creating strings by inserting other strings into them, as you did here, is known as <a href="https://en.wikipedia.org/wiki/String_interpolation">string interpolation</a>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Formatting with the modulo operator is inspired by <a href="https://en.wikipedia.org/wiki/Printf"><code>printf()</code></a> formatting used in <a href="https://realpython.com/c-for-python-programmers/">C</a> and many other programming languages.</p>
</div>
<p>The <code>%s</code> combination of characters is known as a <strong>conversion specifier</strong>. They work as <strong>replacement fields</strong>. The <code>%</code> operator marks the start of the specifier, while the <code>s</code> letter is the <strong>conversion type</strong> and tells the operator that you want to convert the input object into a string. You’ll learn more about conversion specifiers in the section about the modulo operator.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In this tutorial, you’ll learn about two different types of string interpolation:</p>
<ol>
<li><strong>Eager</strong> interpolation</li>
<li><strong>Lazy</strong> interpolation</li>
</ol>
<p>In eager interpolation, Python inserts the values into the string at execution time in the same place where you define the string. In <a href="https://realpython.com/python-lazy-evaluation/">lazy</a> interpolation, Python delays the insertion until the string is actually needed. In this latter case, you create string templates at one point in your code and fill the template with values at another point.</p>
</div>
<p>But the story doesn’t end with the modulo operator. Later, Python introduced the <code>str.format()</code> method:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="s2">"Hello, </span><span class="si">{}</span><span class="s2">! Today is </span><span class="si">{}</span><span class="s2">."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">day</span><span class="p">)</span>
<span class="go">'Hello, Pythonista! Today is Friday.'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The method interpolates its arguments into the target string using replacement fields limited by curly brackets. Even though this method can produce hard-to-read code, it represents a significant advance over the modulo operator: <em>it supports the string formatting mini-language</em>.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> String formatting is a fundamental topic in Python, and sometimes, people think that formatting and interpolation are the same. However, they’re not. In this tutorial, you’ll only learn about interpolation. To learn about string formatting and the formatting mini-language, check out the <a href="https://realpython.com/python-format-mini-language/">Python’s Format Mini-Language for Tidy Strings</a> tutorial.</p>
</div>
<p>Python continues to evolve, and every new version brings new, exciting features. Python 3.6 introduced formatted string literals, or f-strings for short:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">! Today is </span><span class="si">{</span><span class="n">day</span><span class="si">}</span><span class="s2">."</span>
<span class="go">'Hello, Pythonista! Today is Friday.'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>F-strings offer a more readable and clean way to create strings that include other strings. To make an f-string, you must prefix it with an <code>f</code> or <code>F</code>. Again, curly brackets delimit the replacement fields.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To learn more about f-strings, check out the <a href="https://realpython.com/python-f-strings/">Python’s F-String for String Interpolation and Formatting</a> tutorial.</p>
</div>
</div><h2><a href="https://realpython.com/python-string-interpolation/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-string-interpolation/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-03T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: String Interpolation in Python: Exploring Available Tools</title>
<link>https://realpython.com/quizzes/python-string-interpolation/</link>
<guid>https://realpython.com/quizzes/python-string-interpolation/</guid>
<content:encoded><![CDATA[
<div> f-strings, .format() method, modulo operator, Python, string interpolation
总结:<br /><br />
Python的字符串插值工具有多种选择，可以使用f-strings、.format()方法或者百分号（%）操作符来插入变量到字符串中。f-strings 是Python3.6及以上版本引入的一种新方法， 可以在字符串前加上‘f’来表示，直接在大括号{}中插入变量。.format()方法可以在字符串中使用占位符{}来插入变量。百分号（%）操作符也可以用来进行字符串格式化，类似于C语言中的printf()函数。这些工具可以帮助我们在字符串中动态插入变量，使代码更简洁、易读。 <div>
<p>Test your understanding of Python&rsquo;s tools for string interpolation, including f-strings, the <code>.format()</code> method, and the modulo operator.</p>
<p>Take this quiz after reading our <a href="https://realpython.com/python-string-interpolation/">String Interpolation in Python: Exploring Available Tools</a> tutorial.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-06-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #206: Building Python Unit Tests &amp; Exploring a Data Visualization Gallery</title>
<link>https://realpython.com/podcasts/rpp/206/</link>
<guid>https://realpython.com/podcasts/rpp/206/</guid>
<content:encoded><![CDATA[
<div> unit tests, Python code, unittest framework, coverage, Christopher Trudeau

单元测试、Python代码、unittest框架、覆盖率、Christopher Trudeau

要开始为Python代码添加单元测试，通常可以使用内置的unittest框架来满足大部分或全部需求。可以通过编写测试用例来覆盖代码的不同情况和边界条件，以确保代码的正确性和性能表现。通过对代码进行透彻的测试，可以提高代码质量并减少潜在的bug。Christopher Trudeau在本周的节目中分享了一批PyCoder's Weekly文章和项目。通过阅读这些文章和了解项目，可以更好地理解如何使用unittest框架进行单元测试。 <div>
<p>How do you start adding unit tests to your Python code? Can the built-in unittest framework cover most or all of your needs? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-31T12:00:00+00:00</pubDate>
</item>
<item>
<title>What Are CRUD Operations?</title>
<link>https://realpython.com/crud-operations/</link>
<guid>https://realpython.com/crud-operations/</guid>
<content:encoded><![CDATA[
<div> CRUD, Create, Read, Update, Delete, 数据操作<br />
在软件开发中，CRUD操作是非常重要的，指的是创建（Create）、读取（Read）、更新（Update）和删除（Delete）数据的操作。这四种操作是应用程序存储、检索和管理数据的基石。创建操作用于将新条目添加到数据库，读取操作用于检索现有数据库条目，更新操作允许修改数据库中已有数据的细节，删除操作则用于从数据库中删除现有条目。理解CRUD操作可以帮助开发人员设计和操作数据模型，并提供持久性，确保数据在程序崩溃或用户断开连接时仍然安全可用。CRUD操作通常与SQL命令和HTTP方法紧密相关，对应的SQL命令包括INSERT、SELECT、UPDATE和DELETE。在编写原始SQL命令时，可以通过Python的SQLite包实现CRUD操作。 <div>
<div><p>CRUD operations are at the heart of nearly every application you interact with. As a developer, you usually want to create data, read or retrieve data, update data, and delete data. Whether you access a database or interact with a REST API, only when all four operations are present are you able to make a complete data roundtrip in your app.</p>
<p>Creating, reading, updating, and deleting are so vital in software development that these methods are widely referred to as <strong>CRUD</strong>. Understanding CRUD will give you an actionable blueprint when you build applications and help you understand how the applications you use work behind the scenes. So, what exactly does CRUD mean?</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/crud-operations-code/">Click here to download the free sample code</a> that you’ll use to learn about CRUD operations in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “What Are CRUD Operations?” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/crud-operations/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What Are CRUD Operations?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/What-Are-CRUD-Operations_Watermarked.b243ab2b79cb.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/crud-operations/"><span class="my-0 h4">What Are CRUD Operations?</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll revisit the key concepts and techniques related to CRUD operations. These operations are fundamental to any system that interacts with a database, and understanding them is crucial for effective data management.</p>
    </div>
  </div>

</div>

<h2 id="in-short-crud-stands-for-create-read-update-and-delete">In Short: CRUD Stands for Create, Read, Update, and Delete<a class="headerlink" href="https://realpython.com/atom.xml#in-short-crud-stands-for-create-read-update-and-delete" title="Permanent link"></a></h2>
<p>CRUD operations are the cornerstone of application functionality, touching every aspect of how apps store, retrieve, and manage data. Here’s a brief overview of the four CRUD operations:</p>
<ul>
<li><strong>Create</strong>: This is about adding new entries to your database. But it’s also applicable to other types of persistent storage, such as files or networked services. When you perform a create operation, you’re initiating a journey for a new piece of data within your system.</li>
<li><strong>Read</strong>: Through reading, you retrieve or view existing database entries. This operation is as basic as checking your email or reloading a website. Every piece of information you get has been received from a database, thanks to the read operation.</li>
<li><strong>Update</strong>: Updating allows you to modify the details of data already in the database. For example, when you update a profile picture or edit a chat message. Each time, there’s an update operation at work, ensuring your new data is stored in the database.</li>
<li><strong>Delete</strong>: Deleting removes existing entries from the database. Whether you’re closing an account or removing a post, delete operations ensure that unwanted or unnecessary data can be properly discarded.</li>
</ul>
<p>CRUD operations describe the steps that data takes from creation to deletion, regardless of what programming language you use. Every time you interact with an application, you’re likely engaging in one of the four CRUD operations.</p>
<h2 id="why-are-crud-operations-essential">Why Are CRUD Operations Essential?<a class="headerlink" href="https://realpython.com/atom.xml#why-are-crud-operations-essential" title="Permanent link"></a></h2>
<p>Whether you’re working on a basic task list app or a complex e-commerce platform, CRUD operations offer a universal language for designing and manipulating data models. Knowing about CRUD as a user helps you understand what’s happening behind the curtains. As a developer, understanding CRUD provides you with a structured framework for storing data in your application with <strong>persistence</strong>:</p>
<blockquote>
<p>In computer science, persistence refers to the characteristic of state of a system that outlives (persists more than) the process that created it. This is achieved in practice by storing the state as data in computer data storage. 
(<a href="https://en.wikipedia.org/wiki/Persistence_(computer_science)">Source</a>)</p>
</blockquote>
<p>So even when a program crashes or a user disconnects, the data is safe and can be retrieved later. This also means that the order of the operations is important. You can only read, update, or delete items that were previously created.</p>
<p>It’s good practice to implement each CRUD operation separately in your applications. For example, when you retrieve items, then you shouldn’t update them at the same time.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> An exception to this rule may be when you update a “last time retrieved” value after a read operation. Although the user performs a read CRUD operation to retrieve data, you may want to trigger an update operation in the back end to keep track of a user’s retrievals. This can be handy if you want to show the last visited posts to the user.</p>
</div>
<p>While CRUD describes a concept that’s independent of specific programming languages, one could argue that CRUD operations are strongly connected to SQL commands and HTTP methods.</p>
<h2 id="what-are-crud-operations-in-sql">What Are CRUD Operations in SQL?<a class="headerlink" href="https://realpython.com/atom.xml#what-are-crud-operations-in-sql" title="Permanent link"></a></h2>
<p>The idea of CRUD is strongly connected with databases. That’s why it’s no surprise that CRUD operations correspond almost one-to-one with <a href="https://en.wikipedia.org/wiki/SQL">SQL commands</a>:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>CRUD Operation</th>
<th>SQL Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>Create</td>
<td><code>INSERT</code></td>
</tr>
<tr>
<td>Read</td>
<td><code>SELECT</code></td>
</tr>
<tr>
<td>Update</td>
<td><code>UPDATE</code></td>
</tr>
<tr>
<td>Delete</td>
<td><code>DELETE</code></td>
</tr>
</tbody>
</table>
</div>
<p>When you <strong>create</strong> data, you’re using the <code>INSERT</code> command to add new records to a table. After creation, you may <strong>read</strong> data using <code>SELECT</code>. With a <code>SELECT</code> query, you’re asking the database to retrieve the specific pieces of information you need, whether it’s a single value, a set of records, or complex relationships between data points.</p>
<p>The <strong>update</strong> operation corresponds to the <code>UPDATE</code> command in SQL, which allows you to modify data. It lets you edit or change an existing item.</p>
<p>Lastly, the <strong>delete</strong> operation relates to the <code>DELETE</code> command. This is the digital equivalent of shredding a confidential document. With <code>DELETE</code>, you permanently remove an item from the database.</p>
<h3 id="writing-crud-operations-in-raw-sql">Writing CRUD Operations in Raw SQL<a class="headerlink" href="https://realpython.com/atom.xml#writing-crud-operations-in-raw-sql" title="Permanent link"></a></h3>
<p>CRUD operations describe actions. That’s why it’s a good idea to pull up your sleeves and write some code to explore how CRUD operations translate into raw SQL commands.</p>
<p>In the examples below, you’ll use Python’s built-in <a href="https://docs.python.org/3/library/sqlite3.html"><code>sqlite3</code></a> package. <strong>SQLite</strong> is a convenient <a href="https://realpython.com/python-sql-libraries/">SQL library</a> to try things out, as you’ll work with a single SQLite database file.</p>
<p>You’ll name the database <code>birds.db</code>. As the name suggests, you’ll use the database to store the names of birds you like. To keep the example small, you’ll only keep track of the bird names and give them an ID as a unique identifier. </p>
</div><h2><a href="https://realpython.com/crud-operations/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/crud-operations/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-29T14:00:00+00:00</pubDate>
</item>
<item>
<title>Efficient Iterations With Python Iterators and Iterables</title>
<link>https://realpython.com/courses/efficient-iterations-iterators-iterables/</link>
<guid>https://realpython.com/courses/efficient-iterations-iterators-iterables/</guid>
<content:encoded><![CDATA[
<div> 迭代器, 可迭代对象, Python, 生成器函数, asyncio<br />
迭代器和可迭代对象是Python编程中的核心组件。学习如何创建迭代器是Python开发者的关键。生成器函数和yield语句可用于创建生成器迭代器。不同技术可用于构建自己的可迭代对象。asyncio模块和await及async关键词可用于创建异步迭代器。总结: 学习迭代器和可迭代对象的创建和使用对Python编程至关重要。掌握生成器函数和asyncio模块可帮助提升代码效率。 <div>
<p>Python&rsquo;s <strong>iterators</strong> and <strong>iterables</strong> are two different but related tools that come in handy when you need to iterate over a data stream or container. Iterators power and control the iteration process, while iterables typically hold data that you want to iterate over one value at a time.</p>
<p>Iterators and iterables are fundamental components of Python programming, and you&rsquo;ll have to deal with them in almost all your programs. Learning how they work and how to create them is key for you as a Python developer.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Create <strong>iterators</strong> using the <strong>iterator protocol</strong> in Python</li>
<li>Understand the <strong>differences</strong> between iterators and iterables</li>
<li><strong>Work</strong> with iterators and iterables in your Python code</li>
<li>Use <strong>generator functions</strong> and the <strong><code>yield</code> statement</strong> to create <strong>generator iterators</strong></li>
<li>Build your own <strong>iterables</strong> using different techniques, such as the <strong>iterable protocol</strong></li>
<li>Use the <code>asyncio</code> module and the <code>await</code> and <code>async</code> keywords to create <strong>asynchronous iterators</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-28T14:00:00+00:00</pubDate>
</item>
<item>
<title>How to Create Pivot Tables With pandas</title>
<link>https://realpython.com/how-to-pandas-pivot-table/</link>
<guid>https://realpython.com/how-to-pandas-pivot-table/</guid>
<content:encoded><![CDATA[
<div> pandas, pivot table, 数据分析, PyArrow, 教程<br />
<br />
总结:<br />
本教程介绍了如何使用Python中的pandas库创建和分析数据透视表。使用PyArrow库更高效地处理数据类型。在数据准备阶段，需要确保数据整洁和可分析。通过示例演示了如何读取数据文件、转换日期类型，并展示了创建数据透视表的步骤。最后，要求计算每个区域不同订单类型的总销售额。 <div>
<div><p>A <strong>pivot table</strong> is a <a href="https://realpython.com/python-for-data-analysis/">data analysis</a> tool that allows you to take columns of raw data from a pandas DataFrame, summarize them, and then analyze the summary data to reveal its insights.</p>
<p><a href="https://en.wikipedia.org/wiki/Pivot_table">Pivot tables</a> allow you to perform common aggregate statistical calculations such as sums, counts, averages, and so on. Often, the information a pivot table produces reveals trends and other observations your original raw data hides.</p>
<p>Pivot tables were originally implemented in early spreadsheet packages and are still a commonly used feature of the latest ones. They can also be found in modern database applications and in programming languages. In this tutorial, you’ll learn how to implement a pivot table in Python using pandas’ <code>DataFrame.pivot_table()</code> method.</p>
<p>Before you start, you should familiarize yourself with what a <a href="https://realpython.com/pandas-dataframe/">pandas DataFrame</a> looks like and how you can create one. Knowing the difference between a <a href="https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe">DataFrame</a> and a <a href="https://pandas.pydata.org/docs/user_guide/dsintro.html#series">pandas Series</a> will also prove useful.</p>
<p>In addition, you may want to use the data analysis tool <a href="https://realpython.com/jupyter-notebook-introduction/">Jupyter Notebook</a> as you work through the examples in this tutorial. Alternatively, <a href="https://realpython.com/using-jupyterlab/">JupyterLab</a> will give you an enhanced notebook experience, but feel free to use any Python environment you wish.</p>
<p>The other thing you’ll need for this tutorial is, of course, data. You’ll use the <a href="https://www.kaggle.com/datasets/satyamanidharv/sales-data-presentation-dashboards?resource=download">Sales Data Presentation - Dashboards</a> data, which is freely available for you to use under the <a href="https://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>. The data has been made available for you in the <code>sales_data.csv</code> file that you can download by clicking the link below.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/how-to-pandas-pivot-table-code/">Click here to download the free sample code</a> you’ll use to create a pivot table with pandas.</p>
</div>
<p>This table provides an explanation of the data you’ll use throughout this tutorial:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Column Name</th>
<th>Data Type (PyArrow)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>order_number</code></td>
<td><code>int64</code></td>
<td>Order number (unique)</td>
</tr>
<tr>
<td><code>employee_id</code></td>
<td><code>int64</code></td>
<td>Employee’s identifier (unique)</td>
</tr>
<tr>
<td><code>employee_name</code></td>
<td><code>string</code></td>
<td>Employee’s full name</td>
</tr>
<tr>
<td><code>job_title</code></td>
<td><code>string</code></td>
<td>Employee’s job title</td>
</tr>
<tr>
<td><code>sales_region</code></td>
<td><code>string</code></td>
<td>Sales region employee works within</td>
</tr>
<tr>
<td><code>order_date</code></td>
<td><code>timestamp[ns]</code></td>
<td>Date order was placed</td>
</tr>
<tr>
<td><code>order_type</code></td>
<td><code>string</code></td>
<td>Type of order (Retail or Wholesale)</td>
</tr>
<tr>
<td><code>customer_type</code></td>
<td><code>string</code></td>
<td>Type of customer (Business or Individual)</td>
</tr>
<tr>
<td><code>customer_name</code></td>
<td><code>string</code></td>
<td>Customer’s full name</td>
</tr>
<tr>
<td><code>customer_state</code></td>
<td><code>string</code></td>
<td>Customer’s state of residence</td>
</tr>
<tr>
<td><code>product_category</code></td>
<td><code>string</code></td>
<td>Category of product (Bath Products, Gift Basket, Olive Oil)</td>
</tr>
<tr>
<td><code>product_number</code></td>
<td><code>string</code></td>
<td>Product identifier (unique)</td>
</tr>
<tr>
<td><code>product_name</code></td>
<td><code>string</code></td>
<td>Name of product</td>
</tr>
<tr>
<td><code>quantity</code></td>
<td><code>int64</code></td>
<td>Quantity ordered</td>
</tr>
<tr>
<td><code>unit_price</code></td>
<td><code>double</code></td>
<td>Selling price of one product</td>
</tr>
<tr>
<td><code>sale_price</code></td>
<td><code>double</code></td>
<td>Total sale price (<code>unit_price</code> × <code>quantity</code>)</td>
</tr>
</tbody>
</table>
</div>
<p>As you can see, the table stores data for a fictional set of orders. Each row contains information about a single order. You’ll become more familiar with the data as you work through the tutorial and try to solve the various challenge exercises contained within it.</p>
<p>Throughout this tutorial, you’ll use the pandas library to allow you to work with DataFrames and the newer <strong>PyArrow</strong> library. The PyArrow library provides pandas with its own optimized <a href="https://arrow.apache.org/docs/python/api/datatypes.html#data-types-and-schemas">data types</a>, which are faster and less memory-intensive than the traditional <a href="https://numpy.org/doc/stable/user/basics.types.html">NumPy types</a> pandas uses by default.</p>
<p>If you’re working at the command line, you can install both <code>pandas</code> and <code>pyarrow</code> using <code>python -m pip install pandas pyarrow</code>, perhaps within a <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> to avoid clashing with your existing environment.  If you’re working within a Jupyter Notebook, you should use <code>!python -m pip install pandas pyarrow</code>. With the libraries in place, you can then read your data into a DataFrame:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">sales_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span>
<span class="gp">... </span>    <span class="s2">"sales_data.csv"</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="s2">"order_date"</span><span class="p">],</span>
<span class="gp">... </span>    <span class="n">dayfirst</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
<span class="gp">... </span><span class="p">)</span><span class="o">.</span><span class="n">convert_dtypes</span><span class="p">(</span><span class="n">dtype_backend</span><span class="o">=</span><span class="s2">"pyarrow"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>First of all, you used <code>import pandas</code> to make the library available within your code. To construct the DataFrame and read it into the <code>sales_data</code> variable, you used pandas’ <code>read_csv()</code> function. The first parameter refers to the file being read, while <code>parse_dates</code> highlights that the <code>order_date</code> column’s data is intended to be read as the <code>datetime64[ns]</code> type. But there’s an issue that will prevent this from happening.</p>
<p>In your source file, the order dates are in <code>dd/mm/yyyy</code> format, so to tell <code>read_csv()</code> that the first part of each date represents a day, you also set the <code>dayfirst</code> parameter to <code>True</code>. This allows <code>read_csv()</code> to now read the order dates as <code>datetime64[ns]</code> types. </p>
<p>With order dates successfully read as <code>datetime64[ns]</code> types, the <code>.convert_dtypes()</code> method can then successfully convert them to a <code>timestamp[ns][pyarrow]</code> data type, and not the more general <code>string[pyarrow]</code> type it would have otherwise done. Although this may seem a bit circuitous, your efforts will allow you to analyze data by date should you need to do this.</p>
<p>If you want to take a look at the data, you can run <code>sales_data.head(2)</code>. This will let you see the first two rows of your dataframe. When using <code>.head()</code>, it’s preferable to do so in a Jupyter Notebook because all of the columns are shown. Many Python REPLs show only the first and last few columns unless you use <code>pd.set_option("display.max_columns", None)</code> before you run <code>.head()</code>.</p>
<p>If you want to verify that PyArrow types are being used, <code>sales_data.dtypes</code> will confirm it for you.  As you’ll see, each data type contains <code>[pyarrow]</code> in its name.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> If you’re experienced in data analysis, you’re no doubt aware of the need for <a href="https://en.wikipedia.org/wiki/Data_cleansing">data cleansing</a>. This is still important as you work with pivot tables, but it’s equally important to make sure your input data is also <a href="https://www.jstatsoft.org/article/view/v059i10">tidy</a>.</p>
<p><strong>Tidy data</strong> is organized as follows:</p>
<ul>
<li>Each <strong>row</strong> should contain a single record or observation.</li>
<li>Each <strong>column</strong> should contain a single observable or variable.</li>
<li>Each <strong>cell</strong> should contain an atomic value.</li>
</ul>
<p>If you tidy your data in this way, as part of your data cleansing, you’ll also be able to analyze it better. For example, rather than store address details in a single <code>address</code> field, it’s usually better to split it down into <code>house_number</code>, <code>street_name</code>, <code>city</code>, and <code>country</code> component fields. This allows you to analyze it by individual streets, cities, or countries more easily.</p>
<p>In addition, you’ll also be able to use the data from individual columns more readily in calculations. For example, if you had columns <code>room_length</code> and <code>room_width</code>, they can be multiplied together to give you room area information. If both values are stored together in a single column in a format such as <code>"10 x 5"</code>, the calculation becomes more awkward.</p>
<p>The data within the <code>sales_data.csv</code> file is already in a suitably clean and tidy format for you to use in this tutorial. However, not all raw data you acquire will be.</p>
</div>
<p>It’s now time to create your first pandas pivot table with Python. To do this, first you’ll learn the basics of using the DataFrame’s <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html#pandas-pivot-table"><code>.pivot_table()</code></a> method.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/how-to-pandas-pivot-table-code/">Click here to download the free sample code</a> you’ll use to create a pivot table with pandas.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “How to Create Pivot Tables With pandas” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/creating-pivot-tables-with-pandas/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="How to Create a Pivot Table With pandas" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Pandas-Pivot-Table-Aggregate-Data-in-Python_Watermarked.b50d3e60cb29.jpg" style="background: #b9abe6;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/creating-pivot-tables-with-pandas/"><span class="my-0 h4">How to Create Pivot Tables With pandas</span></a> 
      <p class="text-muted mb-0 small">This quiz is designed to push your knowledge of pivot tables a little bit further. You won't find all the answers by reading the tutorial, so you'll need to do some investigating on your own. By finding all the answers, you're sure to learn some other interesting things along the way.</p>
    </div>
  </div>

</div>

<h2 id="how-to-create-your-first-pivot-table-with-pandas">How to Create Your First Pivot Table With pandas<a class="headerlink" href="https://realpython.com/atom.xml#how-to-create-your-first-pivot-table-with-pandas" title="Permanent link"></a></h2>
<p>Now that your learning journey is underway, it’s time to progress toward your first learning milestone and complete the following task:</p>
<p><strong>Calculate the total sales for each type of order for each region.</strong></p>
</div><h2><a href="https://realpython.com/how-to-pandas-pivot-table/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/how-to-pandas-pivot-table/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-27T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: How to Create Pivot Tables With pandas</title>
<link>https://realpython.com/quizzes/creating-pivot-tables-with-pandas/</link>
<guid>https://realpython.com/quizzes/creating-pivot-tables-with-pandas/</guid>
<content:encoded><![CDATA[
<div> 关键词：pivot tables, quiz, Python, expand, research

Python中的pivot tables是一种强大的数据整理工具，通过本文的quiz可以测试对pivot tables的理解程度，并且可以拓展知识。在解答问题时，可能需要进行一些超越教程范围的研究。总结：Python中的pivot tables是一种数据处理工具，本文提供了一个测试你对其理解的机会，还可以进一步扩展知识。通过解决问题，可以对pivot tables的应用有更深入的了解，并提升技能水平。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/how-to-pandas-pivot-table/">how to create pivot tables with pandas</a>.</p>
<p>By working through this quiz, you&rsquo;ll review your knowledge of pivot tables and also expand beyond what you learned in the tutorial. For some of the questions, you&rsquo;ll need to do some research outside of the tutorial itself.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-24T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Python calendar Module: Create Calendars With Python</title>
<link>https://realpython.com/python-calendar-module/</link>
<guid>https://realpython.com/python-calendar-module/</guid>
<content:encoded><![CDATA[
<div> Python, calendar module, display calendars, text-based calendars, interactive quiz
总结:<br /><br />
本文介绍了如何使用Python中的calendar模块生成和定制日历，包括显示日历在终端中、创建纯文本和HTML日历、为特定区域设置格式和显示规范、使用日历相关函数和方法访问多种格式的日历数据。通过在终端中显示日历，可以使用calendar模块创建和定制日历。还介绍了如何利用交互式测试来检测对Python calendar模块的理解，并展示了如何通过Python中的calendar模块生成纯文本日历。 <div>
<div><p>The Python <code>calendar</code> module provides several ways to generate calendars for Python programs. It also includes a variety of functions for working with calendar data as strings, numbers, and datetime objects.</p>
<p>In this tutorial, you’ll learn how to use the <code>calendar</code> module to create and customize calendars with Python.</p>
<p><strong>By the end of this tutorial, you’ll be able to:</strong></p>
<ul>
<li>Display <strong>calendars in your terminal</strong> with Python</li>
<li>Create <strong>plain text and HTML calendars</strong></li>
<li><strong>Format calendars</strong> for specific locales and display conventions</li>
<li>Use <strong>calendar-related functions and methods</strong> to access lower-level calendar data in a variety of formats</li>
</ul>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-calendar-module-code/">Click here to download the free sample code</a> you’ll use to learn about creating calendars with the calendar module in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “The Python calendar Module” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-calendar-module/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="The Python calendar Module: Create Calendars With Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-calendar_Watermarked.f1a5c21b8fa3.jpg" style="background: #abe5b2;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-calendar-module/"><span class="my-0 h4">The Python calendar Module</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the calendar module in Python. It'll evaluate your proficiency in manipulating, customizing, and displaying calendars directly within your terminal. By working through this quiz, you'll revisit the fundamental functions and methods provided by the calendar module.</p>
    </div>
  </div>

</div>

<h2 id="displaying-calendars-in-your-terminal">Displaying Calendars in Your Terminal<a class="headerlink" href="https://realpython.com/atom.xml#displaying-calendars-in-your-terminal" title="Permanent link"></a></h2>
<p>Unix and <a href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a> operating systems such as macOS and Linux include a <a href="https://en.wikipedia.org/wiki/Cal_(command)"><code>cal</code> command-line utility</a> for displaying calendars in an interactive console:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>cal
<span class="go">      May 2024        </span>
<span class="go">Su Mo Tu We Th Fr Sa  </span>
<span class="go">          1  2  3  4  </span>
<span class="go"> 5  6  7  8  9 10 11  </span>
<span class="go">12 13 14 15 16 17 18  </span>
<span class="go">19 20 21 22 23 24 25  </span>
<span class="go">26 27 28 29 30 31     </span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Python provides a similar tool, which allows you to run the <a href="https://docs.python.org/3/library/calendar.html"><code>calendar</code></a> module as a command-line script. To begin exploring the Python <code>calendar</code> module, open up your <a href="https://realpython.com/terminal-commands/">terminal program</a> and enter the following command:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>calendar
<span class="go">                                  2024</span>

<span class="go">      January                   February                   March</span>
<span class="go">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span>
<span class="go"> 1  2  3  4  5  6  7                1  2  3  4                   1  2  3</span>
<span class="go"> 8  9 10 11 12 13 14       5  6  7  8  9 10 11       4  5  6  7  8  9 10</span>
<span class="go">15 16 17 18 19 20 21      12 13 14 15 16 17 18      11 12 13 14 15 16 17</span>
<span class="go">22 23 24 25 26 27 28      19 20 21 22 23 24 25      18 19 20 21 22 23 24</span>
<span class="go">29 30 31                  26 27 28 29               25 26 27 28 29 30 31</span>

<span class="go">       April                      May                       June</span>
<span class="go">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span>
<span class="go"> 1  2  3  4  5  6  7             1  2  3  4  5                      1  2</span>
<span class="go"> 8  9 10 11 12 13 14       6  7  8  9 10 11 12       3  4  5  6  7  8  9</span>
<span class="go">15 16 17 18 19 20 21      13 14 15 16 17 18 19      10 11 12 13 14 15 16</span>
<span class="go">22 23 24 25 26 27 28      20 21 22 23 24 25 26      17 18 19 20 21 22 23</span>
<span class="go">29 30                     27 28 29 30 31            24 25 26 27 28 29 30</span>

<span class="go">        July                     August                  September</span>
<span class="go">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span>
<span class="go"> 1  2  3  4  5  6  7                1  2  3  4                         1</span>
<span class="go"> 8  9 10 11 12 13 14       5  6  7  8  9 10 11       2  3  4  5  6  7  8</span>
<span class="go">15 16 17 18 19 20 21      12 13 14 15 16 17 18       9 10 11 12 13 14 15</span>
<span class="go">22 23 24 25 26 27 28      19 20 21 22 23 24 25      16 17 18 19 20 21 22</span>
<span class="go">29 30 31                  26 27 28 29 30 31         23 24 25 26 27 28 29</span>
<span class="go">                                                    30</span>

<span class="go">      October                   November                  December</span>
<span class="go">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span>
<span class="go">    1  2  3  4  5  6                   1  2  3                         1</span>
<span class="go"> 7  8  9 10 11 12 13       4  5  6  7  8  9 10       2  3  4  5  6  7  8</span>
<span class="go">14 15 16 17 18 19 20      11 12 13 14 15 16 17       9 10 11 12 13 14 15</span>
<span class="go">21 22 23 24 25 26 27      18 19 20 21 22 23 24      16 17 18 19 20 21 22</span>
<span class="go">28 29 30 31               25 26 27 28 29 30         23 24 25 26 27 28 29</span>
<span class="go">                                                    30 31</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Running <code>python -m calendar</code> with no arguments outputs a full year’s calendar for the current year. To display the full calendar for a different year, pass in the integer representation of a year as the first argument of the <code>calendar</code> command:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>calendar<span class="w"> </span><span class="m">1989</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To view a single month, pass in both a year and a month as the second parameter:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>calendar<span class="w"> </span><span class="m">2054</span><span class="w"> </span><span class="m">07</span>
<span class="go">     July 2054</span>
<span class="go">Mo Tu We Th Fr Sa Su</span>
<span class="go">       1  2  3  4  5</span>
<span class="go"> 6  7  8  9 10 11 12</span>
<span class="go">13 14 15 16 17 18 19</span>
<span class="go">20 21 22 23 24 25 26</span>
<span class="go">27 28 29 30 31</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>As you can see in these examples, the <code>calendar</code> module can display calendars for both past and future dates. According to the official documentation, the <code>calendar</code> module uses the current <a href="https://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar</a>, extended indefinitely in both directions. It also uses the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 standard</a>, which is an international standard for exchanging and communicating date and time-related data.</p>
<p>Now that you know how to display calendars in your terminal with Python, you can move on and explore other approaches to creating calendars as plain text or <a href="https://realpython.com/html-css-python/">HTML</a> markup representations.</p>
<h2 id="creating-text-based-calendars">Creating Text-Based Calendars<a class="headerlink" href="https://realpython.com/atom.xml#creating-text-based-calendars" title="Permanent link"></a></h2>
<p>To generate plain text calendars, the <code>calendar</code> module provides <a href="https://docs.python.org/3/library/calendar.html#calendar.TextCalendar"><code>calendar.TextCalendar</code></a> with methods to format and print monthly and yearly calendars.</p>
<p><a href="https://docs.python.org/3/library/calendar.html#calendar.TextCalendar.formatyear"><code>TextCalendar.formatyear()</code></a> accepts a single parameter for the year, like the <code>calendar</code> command-line script. Try it out in your <a href="https://realpython.com/python-repl/">Python REPL</a> by executing the following code:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">calendar</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">text_calendar</span> <span class="o">=</span> <span class="n">calendar</span><span class="o">.</span><span class="n">TextCalendar</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">text_calendar</span><span class="o">.</span><span class="n">formatyear</span><span class="p">(</span><span class="mi">2024</span><span class="p">)</span>
<span class="go">'                                  2024\n\n      January    (...)'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-calendar-module/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-calendar-module/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-22T14:00:00+00:00</pubDate>
</item>
<item>
<title>Building a Python GUI Application With Tkinter</title>
<link>https://realpython.com/courses/building-gui-application-tkinter/</link>
<guid>https://realpython.com/courses/building-gui-application-tkinter/</guid>
<content:encoded><![CDATA[
<div> Tkinter, GUI framework, Python, cross-platform, modern interface
<br />
Tkinter是Python的内置GUI框架，跨平台性强，使用原生操作系统元素渲染视觉元素，使应用程序看起来与运行平台相符。虽然Tkinter被认为是Python GUI框架的事实标准，但也受到过时外观的批评。不过，Tkinter轻量且相对易于使用，适合快速构建功能性、跨平台的GUI应用程序。本视频课程将教授如何用Tkinter创建Hello, World应用程序，使用按钮、文本框等小部件，通过几何管理器控制应用程序布局，以及将按钮点击与Python函数关联实现交互。 
<br />
总结: 
1. Tkinter是Python内置的跨平台GUI框架，适合快速构建功能性应用。
2. Tkinter使用原生操作系统元素，使应用程序看起来与平台相符。
3. 尽管Tkinter外观过时，但轻量且易于使用。
4. 本视频课程将教授如何创建简单的Tkinter应用程序。
5. 课程内容包括小部件操作、布局控制以及交互功能的实现。 <div>
<p>Python has a lot of <a href="http://wiki.python.org/moin/GuiProgramming">GUI frameworks</a>, but <a href="https://wiki.python.org/moin/TkInter">Tkinter</a> is the only framework that&rsquo;s built into the Python standard library. Tkinter has several strengths. It&rsquo;s <strong>cross-platform</strong>, so the same code works on Windows, macOS, and Linux. Visual elements are rendered using native operating system elements, so applications built with Tkinter look like they belong on the platform where they&rsquo;re run.</p>
<p>Although Tkinter is considered the de facto Python GUI framework, it&rsquo;s not without criticism. One notable criticism is that GUIs built with Tkinter look outdated. If you want a shiny, modern interface, then Tkinter may not be what you&rsquo;re looking for.</p>
<p>However, Tkinter is lightweight and relatively painless to use compared to other frameworks. This makes it a compelling choice for building GUI applications in Python, especially for applications where a modern sheen is unnecessary, and the top priority is to quickly build something that&rsquo;s functional and cross-platform.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Get started with Tkinter with a <strong>Hello, World</strong> application</li>
<li>Work with <strong>widgets</strong>, such as buttons and text boxes</li>
<li>Control your application layout with <strong>geometry managers</strong></li>
<li>Make your applications <strong>interactive</strong> by associating button clicks with Python functions</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-21T14:00:00+00:00</pubDate>
</item>
<item>
<title>Basic Data Types in Python: A Quick Exploration</title>
<link>https://realpython.com/python-data-types/</link>
<guid>https://realpython.com/python-data-types/</guid>
<content:encoded><![CDATA[
<div> int float complex str bytes bool<br />
整数、浮点数、复数、字符串、字节和布尔值是Python中的基本数据类型。整数是没有小数位的整数，可以是正数或负数。浮点数包含小数部分，而复数由实部和虚部组成。字符串用于表示文本数据，字节和字节数组用于存储字节数据。布尔值表示真或假的逻辑值。在Python中，这些基本数据类型可以直接使用，可以通过不同方式创建不同类型的字面量。整数没有长度限制，只受系统内存限制。在Python中，这些数据类型提供了基本的方法来创建、使用和处理这些数据，包括整数数据类型。整数字面量在代码中直接表示整数值。要生成负整数，需在数字前加上负号。真正长的整数需要转换为字符串处理。总结:整数、浮点数、复数、字符串、字节和布尔值是Python中的基本数据类型，可以直接使用，有不同的创建方式，并有基本的操作和处理方法。 <div>
<div><p>Python has several basic data types that are built into the language. With these types, you can represent numeric values, text and binary data, and Boolean values in your code. So, these data types are the basic building blocks of most Python programs and projects.</p>
<p><strong>In this tutorial, you’ll learn about:</strong></p>
<ul>
<li><strong>Numeric</strong> types, such as <strong><code>int</code></strong>, <strong><code>float</code></strong>, and <strong><code>complex</code></strong></li>
<li>The <strong><code>str</code></strong> data type, which represents <strong>textual</strong> data</li>
<li>The <strong><code>bytes</code></strong> and <strong><code>bytearray</code></strong> data types for storing <strong>bytes</strong></li>
<li><strong>Boolean</strong> values with the <strong><code>bool</code></strong> data type</li>
</ul>
<p>In this tutorial, you’ll learn only the basics of each data type. To learn more about a specific data type, you’ll find useful resources in the corresponding section.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-data-types-update-code/">Click here to download the free sample code</a> that you’ll use to learn about basic data types in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Basic Data Types in Python: A Quick Exploration” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-data-types/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Basic Data Types in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Basic-Data-Types-in-Python_Watermarked.e3dd34457952.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-data-types/"><span class="my-0 h4">Basic Data Types in Python: A Quick Exploration</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of the basic data types that are built into Python, like numbers, strings, and Booleans.</p>
    </div>
  </div>

</div>

<h2 id="pythons-basic-data-types">Python’s Basic Data Types<a class="headerlink" href="https://realpython.com/atom.xml#pythons-basic-data-types" title="Permanent link"></a></h2>
<p>Python has several <strong>built-in data types</strong> that you can use out of the box because they’re built into the language. From all the built-in types available, you’ll find that a few of them represent <em>basic</em> objects, such as numbers, strings and characters, bytes, and Boolean values.</p>
<p>Note that the term <strong>basic</strong> refers to objects that can represent data you typically find in real life, such as numbers and text. It doesn’t include composite data types, such as <a href="https://realpython.com/python-list/">lists</a>, <a href="https://realpython.com/python-tuple/">tuples</a>, <a href="https://realpython.com/python-dicts/">dictionaries</a>, and others.</p>
<p>In Python, the built-in data types that you can consider basic are the following:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Class</th>
<th>Basic Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://realpython.com/atom.xml#integer-numbers"><code>int</code></a></td>
<td>Integer numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#floating-point-numbers"><code>float</code></a></td>
<td>Floating-point numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#complex-numbers"><code>complex</code></a></td>
<td>Complex numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#strings-and-characters"><code>str</code></a></td>
<td>Strings and characters</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#bytes-and-bytearrays"><code>bytes</code>, <code>bytearray</code></a></td>
<td>Bytes</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#booleans"><code>bool</code></a></td>
<td>Boolean values</td>
</tr>
</tbody>
</table>
</div>
<p>In the following sections, you’ll learn the basics of how to create, use, and work with all of these built-in data types in Python.</p>
<h2 id="integer-numbers">Integer Numbers<a class="headerlink" href="https://realpython.com/atom.xml#integer-numbers" title="Permanent link"></a></h2>
<p><strong>Integer numbers</strong> are whole numbers with no decimal places. They can be positive or negative numbers. For example, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>-1</code>, <code>-2</code>, and <code>-3</code> are all integers. Usually, you’ll use positive integer numbers to count things.</p>
<p>In Python, the integer data type is represented by the <a href="https://docs.python.org/3/library/functions.html#int"><code>int</code></a> class:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">&lt;class 'int'&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the following sections, you’ll learn the basics of how to create and work with integer numbers in Python.</p>
<h3 id="integer-literals">Integer Literals<a class="headerlink" href="https://realpython.com/atom.xml#integer-literals" title="Permanent link"></a></h3>
<p>When you need to use integer numbers in your code, you’ll often use integer <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals">literals</a> directly. Literals are constant values of built-in types spelled out literally, such as integers. Python provides a few different ways to create integer literals. The most common way is to use base-ten literals that look the same as integers look in math:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">42</span>
<span class="go">42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="o">-</span><span class="mi">84</span>
<span class="go">-84</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">0</span>
<span class="go">0</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, you have three integer numbers: a positive one, a negative one, and zero. Note that to create negative integers, you need to prepend the minus sign (<code>-</code>) to the number.</p>
<p>Python has no limit to how long an integer value can be. The only constraint is the amount of memory your system has. Beyond that, an integer can be as long as you need:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">123123123123123123123123123123123123123123123123</span> <span class="o">+</span> <span class="mi">1</span>
<span class="go">123123123123123123123123123123123123123123123124</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>For a really, really long integer, you <a href="https://realpython.com/python-news-september-2022/#python-introduced-a-breaking-change-to-fix-a-vulnerability">can get a <code>ValueError</code></a> when converting it to a string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">123</span> <span class="o">**</span> <span class="mi">10000</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">ValueError</span>: <span class="n">Exceeds the limit (4300 digits) for integer string conversion;</span>
<span class="x">            use sys.set_int_max_str_digits() to increase the limit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-data-types/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-data-types/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-20T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #205: Considering Accessibility &amp; Assistive Tech as a Python Developer</title>
<link>https://realpython.com/podcasts/rpp/205/</link>
<guid>https://realpython.com/podcasts/rpp/205/</guid>
<content:encoded><![CDATA[
<div> Python, visually impaired, blind developer, web accessibility, assistive technology
Python语言在视觉障碍或盲人开发者学习过程中的体验，以及如何提高Python网络应用程序的可访问性和了解当前的指南。本周节目中，Real Python社区成员Audrey van Breederode讨论了她的编程之旅，网络可访问性和辅助技术。<br /><br />总结: Python语言对于视觉障碍或盲人开发者来说有独特的学习体验，了解并优化Python网络应用程序的可访问性是重要的。Audrey van Breederode分享了自己的编程之旅，并探讨了辅助技术在这个过程中的作用。 <div>
<p>What's it like to learn Python as a visually impaired or blind developer? How can you improve the accessibility of your Python web applications and learn current guidelines? This week on the show, Real Python community member Audrey van Breederode discusses her programming journey, web accessibility, and assistive technology.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python's Built-in Exceptions: A Walkthrough With Examples</title>
<link>https://realpython.com/python-built-in-exceptions/</link>
<guid>https://realpython.com/python-built-in-exceptions/</guid>
<content:encoded><![CDATA[
<div> Errors, Exceptions, Python, Built-in, Handle<br />
错误和异常在Python中很重要，错误是使代码不正常工作甚至崩溃的具体条件，可以通过更新或修改代码、安装新版本的依赖项、检查代码逻辑等方式来修复错误。例子中展示了如何修复语法错误。异常是中断程序执行的事件，应该使用适当的异常处理机制来处理异常，Python使用类来表示异常和错误，异常类可以提供关于异常情况和程序执行过程中发现的错误的信息。SyntaxError类表示错误，但实际上实现为Python异常。要防止程序在异常发生后崩溃，必须使用适当的异常处理机制。 <div>
<div><p>Python has a complete set of <strong>built-in exceptions</strong> that provide a quick and efficient way to handle errors and exceptional situations that may happen in your code. Knowing the most commonly used built-in exceptions is key for you as a Python developer. This knowledge will help you debug code because each exception has a specific meaning that can shed light on your debugging process.</p>
<p>You’ll also be able to handle and raise most of the built-in exceptions in your Python code, which is a great way to deal with errors and exceptional situations without having to create your own custom exceptions.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Learn what <strong>errors</strong> and <strong>exceptions</strong> are in Python</li>
<li>Understand how Python organizes the <strong>built-in exceptions</strong> in a <strong>class hierarchy</strong></li>
<li>Explore the most <strong>commonly used</strong> built-in exceptions</li>
<li>Learn how to <strong>handle</strong> and <strong>raise</strong> built-in exceptions in your code</li>
</ul>
<p>To smoothly walk through this tutorial, you should be familiar with some core concepts in Python. These concepts include Python <a href="https://realpython.com/python-classes/">classes</a>, class <a href="https://realpython.com/python-classes/#class-hierarchies">hierarchies</a>, <a href="https://realpython.com/python-exceptions/">exceptions</a>, <a href="https://realpython.com/python-exceptions/#handling-exceptions-with-the-try-and-except-block"><code>try</code> … <code>except</code></a> blocks, and the <a href="https://realpython.com/python-raise-exception/"><code>raise</code></a> statement.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-built-in-exceptions-code/">Click here to download the free sample code</a> that you’ll use to learn about Python’s built-in exceptions.</p>
</div>
<h2 id="errors-and-exceptions-in-python">Errors and Exceptions in Python<a class="headerlink" href="https://realpython.com/atom.xml#errors-and-exceptions-in-python" title="Permanent link"></a></h2>
<p><strong>Errors</strong> and <strong>exceptions</strong> are important concepts in programming, and you’ll probably spend a considerable amount of time dealing with them in your programming career. <strong>Errors</strong> are concrete conditions, such as <strong>syntax</strong> and <strong>logical</strong> errors, that make your code work incorrectly or even crash.</p>
<p>Often, you can fix errors by updating or modifying the code, installing a new version of a dependency, checking the code’s logic, and so on.</p>
<p>For example, say you need to make sure that a given <a href="https://realpython.com/python-strings/">string</a> has a certain number of characters. In this case, you can use the built-in <a href="https://realpython.com/len-python-function/"><code>len()</code></a> function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">"Pythonista"</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10</span>
  File <span class="nb">"&lt;input&gt;"</span>, line <span class="m">1</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">SyntaxError</span>: <span class="n">cannot assign to function call here.</span>
<span class="x">    Maybe you meant '==' instead of '='?</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you use the wrong <a href="https://realpython.com/python-operators-expressions/">operator</a>. Instead of using the equality <a href="https://realpython.com/python-operators-expressions/#comparison-operators-and-expressions-in-python">comparison operator</a>, you use the <a href="https://realpython.com/python-assignment-operator/">assignment operator</a>. This code raises a <a href="https://realpython.com/invalid-syntax-python/"><code>SyntaxError</code></a>, which represents a syntax error as its name describes.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In the above code, you’ll note how nicely the error message suggests a possible solution for correcting the code. Starting in version <a href="https://realpython.com/python310-new-features/">3.10</a>, the Python core developers have put a lot of effort into improving the <a href="https://realpython.com/python310-new-features/#better-error-messages">error messages</a> to make them more friendly and useful for debugging.</p>
</div>
<p>To fix the error, you need to localize the affected code and correct the syntax. This action will remove the error:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">"Pythonista"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span>
<span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Now the code works correctly, and the <code>SyntaxError</code> is gone. So, your code won’t break, and your program will continue its normal execution.</p>
<p>There’s something to learn from the above example. You can fix errors, but you can’t <em>handle</em> them. In other words, if you have a syntax error like the one in the example, then you won’t be able to handle that error and make the code run. You need to correct the syntax.</p>
<p>On the other hand, <strong>exceptions</strong> are events that interrupt the execution of a program. As their name suggests, exceptions occur in <em>exceptional</em> situations that should or shouldn’t happen. So, to prevent your program from crashing after an exception, you must handle the exception with the appropriate exception-handling mechanism.</p>
<p>To better understand exceptions, say that you have a Python expression like <code>a + b</code>. This expression will work if <code>a</code> and <code>b</code> are both strings or <a href="https://realpython.com/python-numbers/">numbers</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="go">7</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, the code works correctly because <code>a</code> and <code>b</code> are both numbers. However, the expression raises an exception if <code>a</code> and <code>b</code> are of types that can’t be added together:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">"4"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;input&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="w">    </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="w">    </span><span class="pm">~~^~~</span>
<span class="gr">TypeError</span>: <span class="n">can only concatenate str (not "int") to str</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Because <code>a</code> is a string and <code>b</code> is a number, your code fails with a <code>TypeError</code> exception. Since there is no way to add text and numbers, your code has faced an exceptional situation.</p>
<p>Python uses classes to represent exceptions and errors. These classes are generically known as <strong>exceptions</strong>, regardless of what a concrete class represents, an exception or an error. Exception classes give us information about an <em>exceptional situation</em> and also <em>errors</em> detected during the program’s execution.</p>
<p>The first example in this section shows a syntax error in action. The <code>SyntaxError</code> class represents an error but it’s implemented as a Python exception. This could be confusing, but Python uses exception classes for both errors and exceptions.</p>
</div><h2><a href="https://realpython.com/python-built-in-exceptions/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-built-in-exceptions/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>How to Get the Most Out of PyCon US</title>
<link>https://realpython.com/pycon-guide/</link>
<guid>https://realpython.com/pycon-guide/</guid>
<content:encoded><![CDATA[
<div> PyCon US, Python language, tutorials, conference, sprints
<br />
PyCon US 是围绕Python语言的最重要的会议之一，分为教程、会议和冲刺三个阶段。在会议之前，你应该提前计划并准备好，浏览议程表，下载PyCon应用，提前一天办理入住手续并参加开幕酒会。会议期间，参加自己感兴趣的讲座，也不要错过冲刺活动。会议结束后，可以回顾自己学到的东西并做好总结。参加PyCon，不仅可以学到技术知识，还可以与其他Python爱好者交流经验，一定会有一个愉快的体验。
<br /><br />总结: PyCon US是围绕Python语言的重要会议，分为教程、会议和冲刺三个阶段。提前计划和准备，参加自己感兴趣的讲座，不要错过冲刺活动。愉快学习交流经验。 <div>
<div><p>Congratulations! You’re going to PyCon US!</p>
<p>Whether this is your first time or not, going to a conference full of people who love the same thing as you is always a fun experience. There’s so much more to PyCon than just a bunch of people talking about the Python language, and that can be intimidating for first-time attendees. This guide will help you navigate all there is to see and do at PyCon.</p>
<p><a href="https://us.pycon.org/2024/">PyCon US</a> is the biggest conference centered around the Python language. Originally launched in 2003, this conference has grown exponentially and has even spawned several other <a href="https://www.python.org/community/workshops/">PyCons and workshops around the world</a>.</p>
<p>Everyone who attends PyCon will have a different experience, and that’s what makes the conference truly unique. This guide is meant to help you, but you don’t need to follow it strictly.</p>
<p><strong>By the end of this article, you’ll know:</strong></p>
<ul>
<li>How PyCon consists of <strong>tutorials</strong>, <strong>conference</strong>, and <strong>sprints</strong></li>
<li>What to do <strong>before</strong> you go</li>
<li>What to do <strong>during</strong> PyCon</li>
<li>What to do <strong>after</strong> the event</li>
<li>How to have a <strong>great</strong> PyCon</li>
</ul>
<p>This guide will have links that are specific to PyCon 2024, but it should be useful for future PyCons as well.</p>
<div class="alert alert-warning">
<p><strong>Free Download:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-tricks-sample-pdf/">Get a sample chapter from Python Tricks: The Book</a> that shows you Python’s best practices with simple examples you can apply instantly to write more beautiful + Pythonic code.</p>
</div>
<h2 id="what-pycon-involves">What PyCon Involves<a class="headerlink" href="https://realpython.com/atom.xml#what-pycon-involves" title="Permanent link"></a></h2>
<p>Before considering how to get the most out of PyCon, it’s important to first understand what PyCon involves.</p>
<p>PyCon is broken up into three stages:</p>
<ol>
<li>
<p><strong>Tutorials:</strong> PyCon starts with two days of three-hour workshops, during which you get to learn in depth with instructors. These are great to go to since the class sizes are small, and you can ask questions of the instructors. You should consider going to at least one of these if you can, but they do have an additional cost of $150 per tutorial.</p>
</li>
<li>
<p><strong>Conference:</strong> Next, PyCon offers three days of talks. Each presentation lasts for thirty to forty-five minutes, and there are about five talks going on at a time, including a Spanish language charlas track. But that’s not all: there are also open spaces, sponsors, posters, lightning talks, dinners, and so much more.</p>
</li>
<li>
<p><strong>Sprints:</strong> During this stage, you can take what you’ve learned and apply it! This is a four-day exercise where people group up to work on various open-source projects related to Python. If you’ve got the time, going to one or more sprint days is a great way to practice what you’ve learned, become associated with an open-source project, and network with other smart and talented people. Learn more about sprints in this <a href="https://pycon.blogspot.com/2016/03/why-not-join-sprints-this-year-at-pycon.html">blog post</a> from an earlier year.</p>
</li>
</ol>
<p>Since most PyCon attendees go to the conference part, that’ll be the focus of this article. However, don’t let that deter you from attending the tutorials or sprints if you can!</p>
<p>You may even learn more technical skills by attending the tutorials rather than listening to the talks. The sprints are great for networking and applying the skills that you’ve already got, as well as learning new ones from the people you’ll be working with.</p>
<h2 id="what-to-do-before-you-go">What to Do Before You Go<a class="headerlink" href="https://realpython.com/atom.xml#what-to-do-before-you-go" title="Permanent link"></a></h2>
<p>In general, the more prepared you are for something, the better your experience will be. The same applies to PyCon.</p>
<p>It’s really helpful to plan and prepare ahead of time, which you’re already doing just by reading this article!</p>
<p>Look through the <a href="https://us.pycon.org/2024/schedule/talks/">talk schedule</a> and see which talks sound most interesting to you. This doesn’t mean you need to plan out all of the talks that you’re going to see, in every slot possible. But it helps to get an idea of which topics are going to be presented so that you can decide what you’re most interested in.</p>
<p>Getting the <a href="https://us.pycon.org/2024/attend/onsite/">PyCon US mobile app</a> will help you plan your schedule. This app lets you view the schedule for the talks and add reminders for the ones that you want to attend. If you’re having a hard time picking which talks to go to, you can come prepared with a question or problem that you need to solve. Doing this can help you focus on the topics that are important to you.</p>
<p>If you can, come a day early to check in and attend the opening reception. The line to check in on the first day is always long, so you’ll save time if you check in the day before. There’s also an opening reception that evening, so you can meet other attendees and speakers, as well as get a chance to check out the various sponsors and their booths.</p>
<p>If you’re brand-new to PyCon, the <a href="https://us.pycon.org/2024/events/newcomer-orientation/">Newcomer Orientation</a> can help you get caught up on what the conference involves and how you can participate.</p>
</div><h2><a href="https://realpython.com/pycon-guide/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/pycon-guide/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What Are CRUD Operations?</title>
<link>https://realpython.com/quizzes/crud-operations/</link>
<guid>https://realpython.com/quizzes/crud-operations/</guid>
<content:encoded><![CDATA[
<div> 关键词：CRUD operations, Python, concepts, techniques, quiz

总结：<br /><br />本文主要讨论了与CRUD操作相关的关键概念和技巧，通过这个测试，读者可以检验对这些内容的理解。在Python中，CRUD操作是非常常见且重要的，通过掌握相关技巧，可以更加高效地处理数据。在这个测试中，读者可以通过回顾关键概念和技巧来加深对CRUD操作的理解，希望读者能够通过这个测试提升自己的Python技能。CRUD操作包括创建(Create)、读取(Retrieve)、更新(Update)和删除(Delete)四个基本操作，是进行数据处理时必不可少的操作方式。通过不断练习和掌握相关技巧，读者可以在Python编程中更加游刃有余地进行CRUD操作。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/crud-operations/">CRUD Operations</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the key concepts and techniques related to CRUD operations. Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>HTML and CSS Foundations for Python Developers</title>
<link>https://realpython.com/courses/html-css-foundations/</link>
<guid>https://realpython.com/courses/html-css-foundations/</guid>
<content:encoded><![CDATA[
<div> HTML, CSS, Python, web development, websites

HTML和CSS是构建网站所必备的技能，Python程序员想要搭建网站必须掌握这两者。学习HTML和CSS可以让你更好地理解Django和Flask等Python web框架。即使你刚入门Python，掌握HTML和CSS也可以帮助你创建小型网站给朋友留下深刻印象。这个视频课程将教你如何构建基本的HTML文件、查看和检查HTML在浏览器中的显示、插入图片和页面链接、使用CSS样式网站、以可访问性为前提格式化HTML，并利用Python编写和解析HTML代码。<br /><br />总结: HTML和CSS是构建网站的基础，学习它们有助于理解Python web框架，通过本视频课程学习如何构建HTML文件、样式网站、并利用Python处理HTML代码。 <div>
<p>When you want to build websites as a Python programmer, there&rsquo;s no way around HTML and CSS.
Almost every website on the Internet is built with <strong>HTML markup</strong> to structure the page.
To make a website look nice, you can style HTML with <strong>CSS</strong>.</p>
<p>If you&rsquo;re interested in web development with Python, then knowing HTML and CSS will help you understand web frameworks like <strong>Django</strong> and <strong>Flask</strong> better.
But even if you&rsquo;re just getting started with Python, HTML and CSS can enable you to create small websites to impress your friends.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Structure a basic <strong>HTML</strong> file</li>
<li>View and inspect HTML in your <strong>browser</strong></li>
<li>Insert <strong>images</strong> and page <strong>links</strong></li>
<li>Style a website with <strong>CSS</strong></li>
<li>Format HTML with <strong>accessibility</strong> in mind</li>
<li>Use Python to <strong>write and parse</strong> HTML code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-14T14:00:00+00:00</pubDate>
</item>
<item>
<title>What Is the __pycache__ Folder in Python?</title>
<link>https://realpython.com/python-pycache/</link>
<guid>https://realpython.com/python-pycache/</guid>
<content:encoded><![CDATA[
<div> 缓存 文件夹  编译 字节码 导入 快速<br />
__pycache__ 文件夹是Python用来存储导入的模块的编译字节码的地方，以实现快速导入，从而加快脚本的启动时间。Python编译高级源代码为字节码，这使得解释器可以跳过重复步骤，节省时间。当你导入相同的模块多次时，Python会使用缓存的字节码和内存缓存机制，以减少导入模块的开销。通过测量从缓存加载模块与即时编译模块的导入时间差异，可以看到缓存的效果。总体来说，__pycache__文件夹的存在使得Python的模块导入更加高效。<br /><br />总结: <div>
<div><p>When you develop a self-contained Python script, you might not notice anything unusual about your directory structure. However, as soon as your project becomes more complex, you’ll often decide to extract parts of the functionality into additional <a href="https://realpython.com/python-modules-packages/">modules or packages</a>. That’s when you may start to see a <code>__pycache__</code> folder appearing out of nowhere next to your source files in seemingly random places:</p>
<div class="highlight"><pre><span></span><code>project/
│
├── mathematics/
│   │
<span class="hll">│   ├── __pycache__/
</span>│   │
│   ├── arithmetic/
│   │   ├── __init__.py
│   │   ├── add.py
│   │   └── sub.py
│   │
│   ├── geometry/
│   │   │
<span class="hll">│   │   ├── __pycache__/
</span>│   │   │
│   │   ├── __init__.py
│   │   └── shapes.py
│   │
│   └── __init__.py
│
└── calculator.py
</code></pre></div>
<p>Notice that the <code>__pycache__</code> folder can be present at different levels in your project’s directory tree when you have multiple subpackages nested in one another. At the same time, other packages or folders with your Python source files may not contain this mysterious cache directory.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To maintain a cleaner workspace, many <a href="https://realpython.com/python-ides-code-editors-guide/">Python IDEs and code editors</a> are configured out-of-the-box to hide the <code>__pycache__</code> folders from you, even if those folders exist on your file system.</p>
</div>
<p>You may encounter a similar situation after you clone a remote <a href="https://realpython.com/python-git-github-intro/">Git repository</a> with a Python project and run the underlying code. <strong>So, what causes the <code>__pycache__</code> folder to appear, and for what purpose?</strong></p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-pycache-code/">Click here to download the free sample code</a> that shows you how to work with the <strong>pycache</strong> folder in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “What Is the __pycache__ Folder in Python?” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-pycache/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What Is the __pycache__ Folder in Python?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/What-is-__pycache___Watermarked.0e2367687d70.jpg" style="background: #aae4b1;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-pycache/"><span class="my-0 h4">What Is the __pycache__ Folder in Python?</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll have the opportunity to test your knowledge of the __pycache__ folder, including when, where, and why Python creates these folders.</p>
    </div>
  </div>

</div>

<h2 id="in-short-it-makes-importing-python-modules-faster">In Short: It Makes Importing Python Modules Faster<a class="headerlink" href="https://realpython.com/atom.xml#in-short-it-makes-importing-python-modules-faster" title="Permanent link"></a></h2>
<p>Even though Python is an <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreted programming language</a>, its interpreter doesn’t operate directly on your Python code, which would be very slow. Instead, when you <a href="https://realpython.com/run-python-scripts/">run a Python script</a> or <a href="https://realpython.com/python-import/">import</a> a Python module, the interpreter compiles your high-level Python source code into <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a>, which is an intermediate binary representation of the code.</p>
<p>This bytecode enables the interpreter to skip recurring steps, such as <a href="https://realpython.com/cpython-source-code-guide/#lexing-and-parsing">lexing and parsing</a> the code into an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> and validating its correctness every time you run the same program. As long as the underlying source code hasn’t changed, Python can reuse the <a href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate representation</a>, which is immediately ready for execution. This saves time, speeding up your script’s startup time.</p>
<p>Remember that while loading the compiled bytecode from <code>__pycache__</code> makes Python modules import faster, it doesn’t affect their execution speed!</p>
<div class="card mb-3" id="collapse_cardd97415">
<div class="card-header border-0">
<p class="m-0">
    <button class="btn w-100"><span class="float-left">Bytecode vs Machine Code</span><span class="float-right text-muted">Show/Hide</span></button>
  </p>
</div>
<div class="collapse js-collapsible-section" id="collapsed97415">
<div class="card-body">
<p>Why bother with bytecode at all instead of compiling the code straight to the low-level <a href="https://en.wikipedia.org/wiki/Machine_code">machine code</a>? While machine code is what executes on the hardware, providing the ultimate performance, it’s not as <em>portable</em> or quick to produce as bytecode.</p>
<p>Machine code is a set of binary instructions understood by your specific CPU architecture, wrapped in a container format like <a href="https://en.wikipedia.org/wiki/.exe">EXE</a>, <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>, or <a href="https://en.wikipedia.org/wiki/Mach-O">Mach-O</a>, depending on the operating system. In contrast, bytecode provides a platform-independent abstraction layer and is typically quicker to compile.</p>
</div>
</div>
</div>
<p>Python uses local <code>__pycache__</code> folders to store the compiled bytecode of <strong>imported modules</strong> in your project. On subsequent runs, the interpreter will try to load precompiled versions of modules from these folders, provided they’re up-to-date with the corresponding source files. Note that this <a href="https://realpython.com/lru-cache-python/">caching</a> mechanism only gets triggered for modules you <em>import</em> in your code rather than executing as scripts in the terminal.</p>
<p>In addition to this <strong>on-disk bytecode caching</strong>, Python keeps an <strong>in-memory cache of modules</strong>, which you can access through the <a href="https://docs.python.org/3/library/sys.html#sys.modules"><code>sys.modules</code></a> dictionary. It ensures that when you import the same module multiple times from different places within your program, Python will use the already imported module without needing to reload or recompile it. Both mechanisms work together to reduce the overhead of importing Python modules.</p>
<p>Next, you’re going to find out exactly how much faster Python loads the cached bytecode as opposed to compiling the source code on the fly when you import a module.</p>
<h2 id="how-much-faster-is-loading-modules-from-cache">How Much Faster Is Loading Modules From Cache?<a class="headerlink" href="https://realpython.com/atom.xml#how-much-faster-is-loading-modules-from-cache" title="Permanent link"></a></h2>
<p>The caching happens behind the scenes and usually goes unnoticed since Python is quite rapid at compiling the bytecode. Besides, unless you often run short-lived Python scripts, the compilation step remains insignificant when compared to the total execution time. That said, without caching, the overhead associated with bytecode compilation could add up if you had lots of modules and imported them many times over.</p>
<p>To measure the difference in <strong>import time</strong> between a cached and uncached module, you can pass the <a href="https://realpython.com/python37-new-features/#developer-tricks"><code>-X importtime</code></a> option to the <code>python</code> command or set the equivalent <a href="https://docs.python.org/3.7/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME"><code>PYTHONPROFILEIMPORTTIME</code></a> environment variable. When this option is enabled, Python will display a table summarizing how long it took to import each module, including the cumulative time in case a module depends on other modules.</p>
<p>Suppose you had a <code>calculator.py</code> script that imports and calls a utility <a href="https://realpython.com/defining-your-own-python-function/">function</a> from a local <code>arithmetic.py</code> module:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">calculator.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">from</span> <span class="nn">arithmetic</span> <span class="kn">import</span> <span class="n">add</span>

<span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The imported module defines a single function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">arithmetic.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>As you can see, the main script delegates the addition of two numbers, three and four, to the <code>add()</code> function imported from the <code>arithmetic</code> module.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Even though you use the <code>from ... import</code> syntax, which only brings the specified symbol into your current <a href="https://realpython.com/python-namespaces-scope/">namespace</a>, Python reads and compiles the entire module anyway. Moreover, <a href="https://www.flake8rules.com/rules/F401.html">unused imports</a> would also trigger the compilation.</p>
</div>
<p>The first time you run your script, Python compiles and saves the bytecode of the module you imported into a local <code>__pycache__</code> folder. If such a folder doesn’t already exist, then Python automatically creates one before moving on. Now, when you execute your script again, Python should find and load the cached bytecode as long as you didn’t alter the associated source code.</p>
</div><h2><a href="https://realpython.com/python-pycache/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-pycache/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-13T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #204: Querying OpenStreetMaps via API &amp; Lazy Evaluation in Python</title>
<link>https://realpython.com/podcasts/rpp/204/</link>
<guid>https://realpython.com/podcasts/rpp/204/</guid>
<content:encoded><![CDATA[
<div> APIs, Python, OpenStreetMap, Practicing, Christopher Trudeau
总结:<br />
本文介绍了如何使用Python与APIs进行交互，主要是通过OpenStreetMap的数据来探索地球。Christopher Trudeau分享了本周的PyCoder's Weekly文章和项目，让读者有机会增加与APIs在Python中的实践经验。通过阅读本文，读者可以学习如何利用APIs和Python来获取数据并进行地理信息的探索。Christopher Trudeau的项目和文章也为读者提供了更多学习和实践的机会。 <div>
<p>Would you like to get more practice working with APIs in Python? How about exploring the globe using the data from OpenStreetMap? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-10T12:00:00+00:00</pubDate>
</item>
<item>
<title>PyTorch vs TensorFlow for Your Python Deep Learning Project</title>
<link>https://realpython.com/pytorch-vs-tensorflow/</link>
<guid>https://realpython.com/pytorch-vs-tensorflow/</guid>
<content:encoded><![CDATA[
<div> PyTorch TensorFlow Python deep learning <br />
PyTorch和TensorFlow是两个流行的Python深度学习库，它们在数据的图形数值计算方面相似，但有一些区别。TensorFlow是由Google开发的，拥有庞大的用户群体和生产级别的特点。TensorFlow 2.0引入了即时执行，使得代码更易编写和执行。相比之下，PyTorch更灵活且易于调试，操作更直观。选择合适的库取决于项目需求，TensorFlow适合用于生产环境和大规模部署，而PyTorch适合对模型进行实验和迭代。总体而言，两者都有其优势和适用范围，根据具体情况进行选择即可。 <br /><br />总结: <br />PyTorch和TensorFlow是两个流行的Python深度学习库，TensorFlow适合生产环境和大规模部署，PyTorch更适合实验和迭代。 <div>
<div><p>PyTorch vs TensorFlow: What’s the difference? Both are open-source Python libraries that use graphs to perform numerical computations on data in deep learning applications. Both are used extensively in academic research and commercial code. Both are extended by a variety of APIs, cloud computing platforms, and model repositories.</p>
<p>If they’re so similar, then how do you decide which one is best for your project?</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What the differences are between <strong>PyTorch</strong> and <strong>TensorFlow</strong></li>
<li>What <strong>tools</strong> and <strong>resources</strong> are available for each</li>
<li>How to choose the <strong>best option</strong> for your specific use case</li>
</ul>
<p>You’ll start by taking a close look at both platforms, beginning with the slightly older TensorFlow. Then, you’ll explore PyTorch and some considerations to help you determine which choice is best for your project. Let’s get started!</p>
<div class="alert alert-warning">
<p><strong>Get Your Decision Guide:</strong> <a class="alert-link" href="https://realpython.com/bonus/pytorch-vs-tensorflow-update-pdf/">Click here to download the free decision guide</a> that will help you choose between PyTorch and TensorFlow for your Python deep learning project.</p>
</div>
<h2 id="what-is-tensorflow">What Is TensorFlow?<a class="headerlink" href="https://realpython.com/atom.xml#what-is-tensorflow" title="Permanent link"></a></h2>
<p>TensorFlow was developed by Google and released as open-source in 2015. It grew out of Google’s homegrown machine learning software, which was refactored and optimized for use in production.</p>
<p>The name “TensorFlow” describes how you organize and perform operations on data. The basic data structure for both TensorFlow and PyTorch is a <a href="https://en.wikipedia.org/wiki/Tensor">tensor</a>. When you use TensorFlow, you perform operations on the data in these tensors by building a <a href="https://www.quora.com/What-are-the-differences-between-Data-flow-model-and-State-machine-model">stateful dataflow graph</a>, kind of like a flowchart that remembers past events.</p>
<h3 id="who-uses-tensorflow">Who Uses TensorFlow?<a class="headerlink" href="https://realpython.com/atom.xml#who-uses-tensorflow" title="Permanent link"></a></h3>
<p>TensorFlow has a reputation for being a production-grade deep learning library. It has a large and active user base and a proliferation of official and third-party tools and platforms for training, deploying, and serving models.</p>
<p>After PyTorch was released in 2016, TensorFlow declined in popularity. But in late 2019, Google released <a href="https://blog.tensorflow.org/2019/09/tensorflow-20-is-now-available.html">TensorFlow 2.0</a>—a major update that simplified the library and made it more user-friendly, leading to renewed interest among the machine learning community. </p>
<h3 id="code-style-and-function">Code Style and Function<a class="headerlink" href="https://realpython.com/atom.xml#code-style-and-function" title="Permanent link"></a></h3>
<p>In TensorFlow 2.0, you can use <a href="https://www.tensorflow.org/guide/eager">eager execution</a>, which is how Python normally works. Eager execution evaluates operations immediately, so you can write your code using Python control flow rather than graph control flow. To see this in action, you’ll take a look at how you would multiply two tensors using both Tensorflow 1.0 and 2.0.</p>
<p>To start, here’s an example of how to multiply tensors using TensorFlow 2.0. With eager execution, all you need is <code>tf.math.multiply()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">1.</span><span class="p">],</span> <span class="p">[</span><span class="mf">3.</span><span class="p">],</span> <span class="p">[</span><span class="mf">5.</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>
<span class="go">&lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=</span>
<span class="go">array([[ 2.,  4.,  6.],</span>
<span class="go">       [ 6., 12., 18.],</span>
<span class="go">       [10., 20., 30.]], dtype=float32)&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code, you declare your tensors using Python’s list notation, and <a href="https://www.tensorflow.org/api_docs/python/tf/math/multiply"><code>tf.math.multiply()</code></a> executes the <strong>element-wise multiplication</strong> immediately when you call it.</p>
<p>Before TensorFlow 2.0, you had to manually stitch together an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> by making <code>tf.*</code> API calls. You then had to pass a set of output tensors and input tensors to a <code>session.run()</code> call and manually compile the model. </p>
<p>A <code>Session</code> object is a <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session">class for running TensorFlow operations</a>. It contains the environment in which <code>Tensor</code> objects are evaluated and <code>Operation</code> objects are executed, and it can own resources like <code>tf.Variable</code> objects. The most common way to use a <code>Session</code> is as a <a href="https://realpython.com/python-with-statement/">context manager</a>.</p>
<p>To see how a <code>Session</code> is used in this way, here’s an example of how you multiply two tensors using the old TensorFlow 1.0 method:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">disable_eager_execution</span><span class="p">()</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"x"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"y"</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">multiply</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">m</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
<span class="gp">... </span>        <span class="n">multiply</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">[[</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">]],</span> <span class="n">y</span><span class="p">:</span> <span class="p">[[</span><span class="mf">1.</span><span class="p">],</span> <span class="p">[</span><span class="mf">3.</span><span class="p">],</span> <span class="p">[</span><span class="mf">5.</span><span class="p">]]}</span>
<span class="gp">... </span>    <span class="p">)</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="go">[[ 2.  4.  6.]</span>
<span class="go"> [ 6. 12. 18.]</span>
<span class="go"> [10. 20. 30.]]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This code uses TensorFlow 2.x’s <code>tf.compat</code> API to access TensorFlow 1.x methods and disable eager execution. </p>
<p>You first declare the input tensors <code>x</code> and <code>y</code> using <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/placeholder"><code>tf.compat.v1.placeholder</code></a> tensor objects. Then you define the operation to perform on them. Note that nothing has been calculated at this point.</p>
<p>Next, using the <code>tf.Session</code> object as a context manager, you create a container to encapsulate the runtime environment and do the multiplication by feeding real values into the placeholders with a <code>feed_dict</code>. Finally, still inside the session, you <a href="https://realpython.com/python-print/"><code>print()</code></a> the result.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Keep in mind that because TensorFlow 1.0 has been deprecated, it probably isn’t the best option for your future projects, and you should stick with using TensorFlow 2.0.</p>
</div>
</div><h2><a href="https://realpython.com/pytorch-vs-tensorflow/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/pytorch-vs-tensorflow/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>Flattening a List of Lists in Python</title>
<link>https://realpython.com/courses/flatten-list-of-lists/</link>
<guid>https://realpython.com/courses/flatten-list-of-lists/</guid>
<content:encoded><![CDATA[
<div> 列表、嵌套、扁平化、Python、数据处理<br />
本视频课程将教你如何在Python中将嵌套列表扁平化成一维列表。扁平化列表是指将多维列表（如矩阵）转换为一维列表的操作。在处理数据时，这是一种常见的操作。通过学习本课程，你可以掌握如何将嵌套列表中的数据转换为一维列表，从而更高效地处理数据。总结: 本视频课程教授如何在Python中对嵌套列表进行扁平化操作，将多维列表转换为一维列表，提高数据处理效率。 <div>
<p>Sometimes, when you&rsquo;re working with data, you may have the data as a list of nested lists. A common operation is to <strong>flatten</strong> this data into a one-dimensional list in Python. Flattening a list involves converting a multidimensional list, such as a matrix, into a one-dimensional list.</p>
<p>In this video course, you&rsquo;ll learn how to do that in Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-07T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News: What's New From April 2024</title>
<link>https://realpython.com/python-news-april-2024/</link>
<guid>https://realpython.com/python-news-april-2024/</guid>
<content:encoded><![CDATA[
<div> Python, release, features, improvements, PyCon US 2024
总结：<br /><br />Python的核心开发团队在2024年4月发布了3.13.0a6和3.12.3版本。3.13.0a6带来了多项新特性、改进和优化，是最后一个alpha版发布，不应用于生产环境。3.12.3版本有300多个提交用于安全改进和bug修复。PyCon US 2024正在征集志愿者。Python 3.13带来了默认行为、性能改进基础、垃圾回收器优化、内存使用减少等新特性。标准库有新的模块和计划移除许多废弃模块和类。详细变更列表可在文档中查看。下一个Python 3.13预发布版本将于5月7日发布。 <div>
<div><p>In April 2024, Python’s core development team released versions <strong>3.13.0a6</strong> and <strong>3.12.3</strong> of the language! The former received several exciting features, improvements, and optimizations, while the latter got more than 300 commits for security improvements and bug fixes.</p>
<p>The 3.13.0a6 release is the last alpha release. In the first half of May, the code will be frozen and won’t accept new features. Note that 3.13.0a6 is a <a href="https://realpython.com/python-pre-release/">pre-release</a>, so you shouldn’t use it for production environments. However, it provides a great way to try out some new and exciting language features.</p>
<p>There is also great news about PyCon US 2024, which opened its call for volunteers.</p>
<p>Let’s dive into the most exciting <strong>Python news</strong> from April 2024!</p>
<h2 id="python-3130-alpha-6-and-3123-arrive">Python 3.13.0 Alpha 6 and 3.12.3 Arrive<a class="headerlink" href="https://realpython.com/atom.xml#python-3130-alpha-6-and-3123-arrive" title="Permanent link"></a></h2>
<p>This April, Python <a href="https://blog.python.org/2024/04/python-3123-and-3130a6-released.html">released</a> its sixth <strong>alpha preview release</strong>, 3.13.0a6. This version is the last alpha release, as Python 3.13 will enter the <strong>beta phase</strong> on May 7. Once in beta, it won’t accept any new features. </p>
<p>Python 3.13 brings the following new features:</p>
<ul>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#improved-error-messages">Colorized exception tracebacks</a> are now the default behavior in the interactive interpreter or <a href="https://realpython.com/python-repl/">REPL</a>.</li>
<li>An <a href="https://docs.python.org/dev/whatsnew/3.13.html#experimental-jit-compiler">experimental JIT compiler</a> that provides the groundwork for significant performance improvements.</li>
<li>The garbage collector is now <a href="https://docs.python.org/dev/whatsnew/3.13.html#incremental-garbage-collection">incremental</a>, which should make the garbage collection process more efficient.</li>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#other-language-changes">Stripped indentation in docstrings</a> reduces memory usage and the size of <code>.pyc</code> files.</li>
</ul>
<p>Meanwhile, the standard library comes with these new features:</p>
<ul>
<li>The <a href="https://docs.python.org/dev/library/dbm.html"><code>dbm</code></a> module has a new <a href="https://docs.python.org/dev/whatsnew/3.13.html#id1"><code>dbm.sqlite3</code></a> backend for creating new files.</li>
<li><a href="https://peps.python.org/pep-0594/">PEP 594</a> scheduled removals of many deprecated modules: <code>aifc</code>, <code>audioop</code>, <code>chunk</code>, <code>cgi</code>, <code>cgitb</code>, <code>crypt</code>, <code>imghdr</code>, <code>mailcap</code>, <code>msilib</code>, <code>nis</code>, <code>nntplib</code>, <code>ossaudiodev</code>, <code>pipes</code>, <code>sndhdr</code>, <code>spwd</code>, <code>sunau</code>, <code>telnetlib</code>, <code>uu</code>, <code>xdrlib</code>, <code>lib2to3</code>.</li>
<li>Many deprecated classes, functions, and methods (dead batteries) were <a href="https://docs.python.org/dev/whatsnew/3.13.html#removed">removed</a>.</li>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#deprecated">New deprecations</a> appeared, and many of them were scheduled for removal in Python 3.15 or 3.16.</li>
</ul>
<p>For a detailed list of changes, additions, and removals, you can check out the <a href="https://docs.python.org/3.12/whatsnew/changelog.html#python-3-13-0-alpha-6">Changelog</a> document. The next pre-release of Python 3.13 will be 3.13.0b1, which is currently scheduled for May 7.</p>
</div><h2><a href="https://realpython.com/python-news-april-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-april-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-06T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #203: Embarking on a Relaxed and Friendly Python Coding Journey</title>
<link>https://realpython.com/podcasts/rpp/203/</link>
<guid>https://realpython.com/podcasts/rpp/203/</guid>
<content:encoded><![CDATA[
<div> Python、coding、book、author、projects
<br />
作者Stephen Gruppetta的新书"The Python Coding Book"着重介绍了Python编程技巧，帮助读者提高Python编程水平。在学习Python过程中，很多人会感到压力，但建议通过编写小程序或项目来继续编码之旅。本书为读者提供了实用的Python编程技巧和指导，有助于他们更有效地学习和应用Python语言。总之，本书为想要提升Python编程技能的人提供了宝贵的学习资源和指导。总结： <div>
<p>Do you get stressed while trying to learn Python? Do you prefer to build small programs or projects as you continue your coding journey? This week on the show, Real Python author Stephen Gruppetta is here to talk about his new book, "The Python Coding Book."</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: The Python calendar Module</title>
<link>https://realpython.com/quizzes/python-calendar-module/</link>
<guid>https://realpython.com/quizzes/python-calendar-module/</guid>
<content:encoded><![CDATA[
<div> calendar module, functions, methods, quiz, Python <br />
<br />
总结: calendar模块是Python中用来处理日历的模块，提供了许多方法和函数可以帮助我们处理日期和时间。通过这篇文章，我们学习了如何使用calendar模块，并通过一个测验来检验理解。测验中涉及了calendar模块的基本功能和方法，帮助我们加深对其的理解。通过这篇文章，我们复习了calendar模块的重要功能，并且可以更加熟练地使用它。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-calendar-module/">creating calendars in Python</a> using the <code>calendar</code> module.</p>
<p>By working through this quiz, you&rsquo;ll revisit the fundamental functions and methods provided by the <code>calendar</code> module.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Sequences: A Comprehensive Guide</title>
<link>https://realpython.com/python-sequences/</link>
<guid>https://realpython.com/python-sequences/</guid>
<content:encoded><![CDATA[
<div> Python, sequence, characteristics, operations, methods

Python中的序列是一种数据结构，包含按顺序排列的项目，可以通过整数索引访问每个项目。序列具有长度，可以使用len()函数查找其元素数量。序列的元素可以根据其在序列中的位置使用整数索引访问。大多数序列具有特殊方法.__iter__()、.__len__()和.__getitem__()。这些方法为序列提供了迭代、长度和访问元素的功能。映射不是序列，因为映射不能通过整数索引访问元素。序列支持切片操作，可以通过索引范围获取子序列。总结: Python序列是包含按顺序排列的项目的数据结构，可以通过整数索引访问每个项目，具有特殊方法提供迭代、长度和访问元素功能，支持切片操作。 <div>
<div><p>A phrase you’ll often hear is that everything in Python is an object, and every object has a type. This points to the importance of data types in Python. However, often what an object can do is more important than what it is. So, it’s useful to discuss <em>categories</em> of data types and one of the main categories is Python’s <strong>sequence</strong>.</p>
<p><strong>In this tutorial, you’ll learn about:</strong></p>
<ul>
<li>Basic <strong>characteristics of a sequence</strong></li>
<li><strong>Operations</strong> that are <strong>common to most sequences</strong></li>
<li><strong>Special methods</strong> associated with sequences</li>
<li>Abstract base classes <strong><code>Sequence</code> and <code>MutableSequence</code></strong></li>
<li><strong>User-defined mutable and immutable sequences</strong> and how to create them</li>
</ul>
<p>This tutorial assumes that you’re familiar with <a href="https://realpython.com/python-data-types/">Python’s built-in data types</a> and with the <a href="https://realpython.com/python3-object-oriented-programming/">basics of object-oriented programming</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-sequences-code/">Click here to download the free sample code</a> that you’ll use to learn about Python sequences in this comprehensive guide.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Sequences: A Comprehensive Guide” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-sequences/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Sequences: A Comprehensive Guide" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-Sequences_Watermarked.988c75bb60be.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-sequences/"><span class="my-0 h4">Python Sequences: A Comprehensive Guide</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of sequences in Python. You'll revisit the basic characteristics of a sequence, operations common to most sequences, special methods associated with sequences, and how to create user-defined mutable and immutable sequences.</p>
    </div>
  </div>

</div>

<h2 id="building-blocks-of-python-sequences">Building Blocks of Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#building-blocks-of-python-sequences" title="Permanent link"></a></h2>
<p>It’s likely you used a Python sequence the last time you wrote Python code, even if you don’t know it. The term <em>sequence</em> doesn’t refer to a specific data type but to a category of data types that share common characteristics.</p>
<h3 id="characteristics-of-python-sequences">Characteristics of Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#characteristics-of-python-sequences" title="Permanent link"></a></h3>
<p>A <a href="https://docs.python.org/3/glossary.html#term-sequence">sequence</a> is a data structure that contains items arranged in order, and you can access each item using an integer index that represents its position in the sequence. You can always find the length of a sequence. Here are some examples of sequences from Python’s basic built-in data types:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># List</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"USA"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">,</span> <span class="s2">"UK"</span><span class="p">,</span> <span class="s2">"Norway"</span><span class="p">,</span> <span class="s2">"Malta"</span><span class="p">,</span> <span class="s2">"India"</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">USA</span>
<span class="go">Canada</span>
<span class="go">UK</span>
<span class="go">Norway</span>
<span class="go">Malta</span>
<span class="go">India</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'USA'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Tuple</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span> <span class="o">=</span> <span class="s2">"USA"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">,</span> <span class="s2">"UK"</span><span class="p">,</span> <span class="s2">"Norway"</span><span class="p">,</span> <span class="s2">"Malta"</span><span class="p">,</span> <span class="s2">"India"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">USA</span>
<span class="go">Canada</span>
<span class="go">UK</span>
<span class="go">Norway</span>
<span class="go">Malta</span>
<span class="go">India</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'USA'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Strings</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country</span> <span class="o">=</span> <span class="s2">"India"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">country</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">I</span>
<span class="go">n</span>
<span class="go">d</span>
<span class="go">i</span>
<span class="go">a</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="go">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'I'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Lists, tuples, and strings are among Python’s most basic data types. Even though they’re different types with distinct characteristics, they have some common traits. You can summarize the characteristics that define a Python sequence as follows:</p>
<ul>
<li>A sequence is an <a href="https://realpython.com/python-iterators-iterables/">iterable</a>, which means you can iterate through it.</li>
<li>A sequence has a length, which means you can pass it to <a href="https://realpython.com/len-python-function/"><code>len()</code></a> to get its number of elements.</li>
<li>An element of a sequence can be accessed based on its position in the sequence using an integer index. You can use the square bracket notation to index a sequence.</li>
</ul>
<p>There are other built-in data types in Python that also have all of these characteristics. One of these is the <a href="https://realpython.com/python-range/"><code>range</code> object</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">&lt;class 'range'&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">6</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="go">10</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">5</span>
<span class="go">6</span>
<span class="go">7</span>
<span class="go">8</span>
<span class="go">9</span>
<span class="go">10</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You can iterate through a <code>range</code> object, which makes it iterable. You can also find its length using <code>len()</code> and fetch items through indexing. Therefore, a <code>range</code> object is also a sequence.</p>
<p>You can also verify that <a href="https://realpython.com/python-mutable-vs-immutable-types/"><code>bytes</code> and <code>bytearray</code> objects</a>, two of Python’s built-in data structures, are also sequences. Both are sequences of integers. A <code>bytes</code> sequence is immutable, while a <code>bytearray</code> is mutable.</p>
<h3 id="special-methods-associated-with-python-sequences">Special Methods Associated With Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#special-methods-associated-with-python-sequences" title="Permanent link"></a></h3>
<p>In Python, the key characteristics of a data type are determined using <a href="https://realpython.com/python-magic-methods/">special methods</a>, which are defined in the class definitions. The special methods associated with the properties of sequences are the following:</p>
<ul>
<li><strong><code>.__iter__()</code></strong>: This special method makes an object iterable using Python’s preferred iteration protocol. However, it’s possible for a class without an <code>.__iter__()</code> special method to create iterable objects if the class has a <code>.__getitem__()</code> special method that supports iteration. Most sequences have an <code>.__iter__()</code> special method, but it’s possible to have a sequence without this method.</li>
<li><strong><code>.__len__()</code></strong>: This special method defines the length of an object, which is normally the number of elements contained within it. The <code>len()</code> built-in function calls an object’s <code>.__len__()</code> special method. Every sequence has this special method.</li>
<li><strong><code>.__getitem__()</code></strong>: This special method enables you to access an item from a sequence. The square brackets notation can be used to fetch an item. The expression <code>countries[0]</code> is equivalent to <code>countries.__getitem__(0)</code>. For sequences, <code>.__getitem__()</code> should accept integer arguments starting from zero. Every sequence has this special method. This method can also ensure an object is iterable if the <code>.__iter__()</code> special method is missing.</li>
</ul>
<p>Therefore, all sequences have a <code>.__len__()</code> and a <code>.__getitem__()</code> special method and most also have <code>.__iter__()</code>.</p>
<p>However, it’s not sufficient for an object to have these special methods to be a sequence. For example, many mappings also have these three methods but mappings aren’t sequences.</p>
<p>A dictionary is an example of a mapping. You can find the length of a dictionary and iterate through its keys using a <code>for</code> loop or other iteration techniques. You can also fetch an item from a dictionary using the square brackets notation.</p>
<p>This characteristic is defined by <code>.__getitem__()</code>. However, <code>.__getitem__()</code> needs arguments that are dictionary keys and returns their matching values. You can’t index a dictionary using integers that refer to an item’s position in the dictionary. Therefore, dictionaries are not sequences.</p>
<h2 id="slicing-in-python-sequences">Slicing in Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#slicing-in-python-sequences" title="Permanent link"></a></h2>
</div><h2><a href="https://realpython.com/python-sequences/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-sequences/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>Working With Global Variables in Python Functions</title>
<link>https://realpython.com/courses/global-variables-in-python-functions/</link>
<guid>https://realpython.com/courses/global-variables-in-python-functions/</guid>
<content:encoded><![CDATA[
<div> global variables, Python, functions, access, modify
<br />
在Python中理解全局变量及其工作原理，直接在函数内部访问全局变量，使用global关键字在函数内部修改和创建全局变量，使用globals()函数在函数内部访问、创建和修改全局变量，探讨避免在Python代码中使用全局变量的策略。
<br /><br />
总结: 在Python中，全局变量可以在整个程序中进行数据共享，但在函数内部使用全局变量时需要注意对其值进行访问和修改的区分。本课程将帮助您深入了解全局变量在Python中的工作原理，并提供了多种方法来访问、创建和修改全局变量，同时探讨了避免在Python代码中过度使用全局变量的策略。 <div>
<p>A <strong>global variable</strong> is a variable that you can use from any part of a program, including within <strong>functions</strong>. Using global variables inside your Python functions can be tricky. You&rsquo;ll need to differentiate between accessing and changing the values of the target global variable if you want your code to work correctly.</p>
<p>Global variables can play a fundamental role in many software projects because they enable data sharing across an entire program. However, you should use them judiciously to avoid issues.</p>
<p><strong>In this video course, you&rsquo;ll:</strong></p>
<ul>
<li>Understand <strong>global variables</strong> and how they work in Python</li>
<li><strong>Access</strong> global variables within your Python functions directly</li>
<li><strong>Modify</strong> and <strong>create</strong> global variables within functions using the <strong><code>global</code> keyword</strong></li>
<li><strong>Access</strong>, <strong>create</strong>, and <strong>modify</strong> global variables within your functions with the <strong><code>globals()</code> function</strong></li>
<li>Explore strategies to <strong>avoid using global variables</strong> in Python code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python's unittest: Writing Unit Tests for Your Code</title>
<link>https://realpython.com/python-unittest/</link>
<guid>https://realpython.com/python-unittest/</guid>
<content:encoded><![CDATA[
<div> unittest, TestCase class, assert methods, fixtures, TestSuite class

unittest是Python自带的测试框架，提供了TestCase类、assert方法、fixtures和TestSuite类等功能。TestCase类用于编写单元测试，通过编写以test开头的方法来测试代码的各种输入和结果。assert方法用于断言测试结果是否符合预期。fixtures用于处理测试前后的环境设置和清理。TestSuite类用于组织测试用例。通过这些功能，可以编写一致的单元测试，确保代码质量和健壮性。unittest可从命令行执行测试，并支持发现和运行测试套件。 <div>
<div><p>The Python <a href="https://docs.python.org/3/library/index.html">standard library</a> ships with a testing framework named <strong><code>unittest</code></strong>, which you can use to write automated tests for your code. The <code>unittest</code> package has an object-oriented approach where test cases derive from a base class, which has several useful methods.</p>
<p>The framework supports many features that will help you write consistent unit tests for your code. These features include test cases, fixtures, test suites, and test discovery capabilities.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Write <code>unittest</code> tests with the <strong><code>TestCase</code></strong> class</li>
<li>Explore the <strong>assert</strong> methods that <code>TestCase</code> provides</li>
<li>Use <code>unittest</code> from the <strong>command line</strong></li>
<li>Group test cases using the <strong><code>TestSuite</code></strong> class</li>
<li>Create <strong>fixtures</strong> to handle <strong>setup</strong> and <strong>teardown</strong> logic</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with some important Python concepts, such as <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>, <a href="https://realpython.com/inheritance-composition-python/">inheritance</a>, and <a href="https://realpython.com/python-assert-statement/">assertions</a>. Having a good understanding of code <a href="https://realpython.com/python-testing/">testing</a> is a plus.</p>
<div class="alert alert-warning">
<p><strong>Free Bonus:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-unittest-code/">Click here to download the free sample code</a> that shows you how to use Python’s unittest to write tests for your code.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python's unittest: Writing Unit Tests for Your Code” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-unittest/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python's unittest: Writing Unit Tests for Your Code" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-unittest_Watermarked.f6549bba7422.jpg" style="background: #aadfe5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-unittest/"><span class="my-0 h4">Python's unittest: Writing Unit Tests for Your Code</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python testing with the unittest framework from the standard library. With this knowledge, you'll be able to create basic tests, execute them, and find bugs before your users do.</p>
    </div>
  </div>

</div>

<h2 id="testing-your-python-code">Testing Your Python Code<a class="headerlink" href="https://realpython.com/atom.xml#testing-your-python-code" title="Permanent link"></a></h2>
<p><strong>Code testing</strong> or <a href="https://en.wikipedia.org/wiki/Software_testing">software testing</a> is a fundamental part of a modern software development cycle. Through code testing, you can verify that a given software project works as expected and fulfills its requirements. Testing enforces code quality and robustness.</p>
<p>You’ll do code testing during the development stage of an application or project. You’ll write tests that isolate sections of your code and verify its correctness. A well-written battery or suite of tests can also serve as documentation for the project at hand.</p>
<p>You’ll find several different concepts and techniques around testing. Most of them surpass the scope of this tutorial. However, <a href="https://en.wikipedia.org/wiki/Unit_testing">unit test</a> is an important and relevant concept. A unit test is a test that operates on an individual unit of software. A unit test aims to validate that the tested unit works as designed.</p>
<p>A <strong>unit</strong> is often a small part of a program that takes a few inputs and produces an output. <a href="https://realpython.com/defining-your-own-python-function/">Functions</a>, <a href="https://realpython.com/python-classes/#providing-behavior-with-methods">methods</a>, and other <a href="https://realpython.com/python-callable-instances/">callables</a> are good examples of units that you’d need to test.</p>
<p>In Python, there are several tools to help you write, organize, run, and automate your unit test. In the Python <a href="https://docs.python.org/3/library/index.html">standard library</a>, you’ll find two of these tools:</p>
<ol>
<li><code>doctest</code></li>
<li><code>unittest</code></li>
</ol>
<p>Python’s <code>doctest</code> module is a lightweight <a href="https://en.wikipedia.org/wiki/Test_automation#Framework_approach_in_automation">testing framework</a> that provides quick and straightforward <a href="https://en.wikipedia.org/wiki/Test_automation">test automation</a>. It can read the test cases from your project’s documentation and your code’s docstrings. This framework is shipped with the Python interpreter as part of the batteries-included philosophy.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into <code>doctest</code>, check out the <a href="https://realpython.com/python-doctest/">Python’s doctest: Document and Test Your Code at Once</a> tutorial.</p>
</div>
<p>The <code>unittest</code> <a href="https://realpython.com/python-modules-packages/#python-packages">package</a> is also a testing framework. However, it provides a more complete solution than <code>doctest</code>. In the following sections, you’ll learn and work with <a href="https://docs.python.org/3/library/unittest.html#module-unittest"><code>unittest</code></a> to create suitable unit tests for your Python code.</p>
<h2 id="getting-to-know-pythons-unittest">Getting to Know Python’s <code>unittest</code><a class="headerlink" href="https://realpython.com/atom.xml#getting-to-know-pythons-unittest" title="Permanent link"></a></h2>
<p>The <code>unittest</code> package provides a unit test framework inspired by <a href="https://en.wikipedia.org/wiki/JUnit">JUnit</a>, which is a unit test framework for the <a href="https://realpython.com/java-vs-python/">Java</a> language. The <code>unittest</code> framework is directly available in the standard library, so you don’t have to install anything to use this tool.</p>
<p>The framework uses an <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented</a> approach and supports some essential concepts that facilitate test creation, organization, preparation, and automation:</p>
<ul>
<li><strong>Test case</strong>: An individual unit of testing. It examines the output for a given input set.</li>
<li><strong>Test suite</strong>: A collection of test cases, test suites, or both. They’re grouped and executed as a whole.</li>
<li><strong>Test fixture</strong>: A group of actions required to set up an environment for testing. It also includes the teardown processes after the tests run.</li>
<li><strong>Test runner</strong>: A component that handles the execution of tests and communicates the results to the user.</li>
</ul>
<p>In the following sections, you’ll dive into using the <code>unittest</code> package to create test cases, suites of tests, fixtures, and, of course, run your tests.</p>
<h2 id="organizing-your-tests-with-the-testcase-class">Organizing Your Tests With the <code>TestCase</code> Class<a class="headerlink" href="https://realpython.com/atom.xml#organizing-your-tests-with-the-testcase-class" title="Permanent link"></a></h2>
<p>The <code>unittest</code> package defines the <code>TestCase</code> class, which is primarily designed for writing unit tests. To start writing your test cases, you just need to import the class and subclass it. Then, you’ll add methods whose names should begin with <code>test</code>. These methods will test a given unit of code using different inputs and check for the expected results.</p>
<p>Here’s a quick test case that tests the built-in <a href="https://realpython.com/python-absolute-value/"><code>abs()</code></a> function:</p>
</div><h2><a href="https://realpython.com/python-unittest/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-unittest/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-29T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #202: Pydantic Data Validation &amp; Python Web Security Practices</title>
<link>https://realpython.com/podcasts/rpp/202/</link>
<guid>https://realpython.com/podcasts/rpp/202/</guid>
<content:encoded><![CDATA[
<div> 验证, 验证, 数据, 安全, 开发者
总结:<br /><br />本文讨论了如何验证和验证Python网络应用程序中的数据。 作为开发者，应考虑使用工具和安全最佳实践来确保数据的准确性和安全性。 对数据进行验证和验证是确保应用程序安全和有效运行的关键步骤。 您可以使用各种工具和技术来验证用户输入并防止恶意数据输入。 开发者应当密切注意数据的来源，并实施适当的验证和验证规则以确保数据的完整性和安全性。 <div>
<p>How do you verify and validate the data coming into your Python web application? What tools and security best practices should you consider as a developer? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What Is the __pycache__ Folder in Python?</title>
<link>https://realpython.com/quizzes/python-pycache/</link>
<guid>https://realpython.com/quizzes/python-pycache/</guid>
<content:encoded><![CDATA[
<div> 关键词：Python项目，模块，包，__pycache__文件夹，维护

Python项目中随着代码的增长，通常会将代码组织成模块和包，以便更容易地进行维护和重用。在这个过程中，你会发现__pycache__文件夹突然出现在你的原始文件旁边，在各个位置上出现，有些让人感到意外。这个文件夹是Python的编译缓存文件夹，用于存储编译后的字节码，以提高程序的性能。虽然有时会让人感到突然，但它帮助加速Python程序的运行，并且不需要手动干预管理。要留意__pycache__文件夹的存在，以免误删或造成其他问题。整体来说，__pycache__文件夹在Python项目中起到一定的辅助作用，可以提高代码的执行效率。<br /><br />总结:Python项目中的模块和包的组织可以提高代码维护和重用。__pycache__文件夹存储编译后的字节码，加快程序运行速度。注意__pycache__文件夹的存在，以避免问题。 <div>
<p>As your Python project grows, you typically organize your code in modules and packages for easier maintenance and reusability. When you do that, you&rsquo;ll likely notice the sudden emergence of a <code>__pycache__</code> folder alongside your original files, popping up in various locations unexpectedly.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>What's Lazy Evaluation in Python?</title>
<link>https://realpython.com/python-lazy-evaluation/</link>
<guid>https://realpython.com/python-lazy-evaluation/</guid>
<content:encoded><![CDATA[
<div> lazy evaluation, expressions, eager evaluation, Python, examples

lazy evaluation是Python中的一种表达式处理方式，它延迟计算表达式的值直到真正需要这个值的时候。相反的是eager evaluation，即立即计算表达式的值。在Python中，一些表达式会立即计算，如使用加法运算符或调用标准函数；而另一些表达式会延迟计算，如使用range()函数生成的迭代器。延迟计算可以提高程序性能，减少内存占用，允许创建无限数据结构，并避免生成未使用的值。然而，延迟计算也会延迟错误的处理，使得调试变得更加困难。Python中的lazy evaluation提供了灵活性和效率的平衡。<br /><br />总结:lazy evaluation是Python中的一种表达式处理方式，可以延迟计算表达式的值，并提高程序性能。它可以通过range()函数等方式实现，允许创建无限数据结构，但可能会使调试更困难。 <div>
<div><p>Being lazy is not always a bad thing. Every line of code you write has at least one expression that Python needs to evaluate. Python lazy evaluation is when Python takes the lazy option and delays working out the value returned by an expression until that value is needed.</p>
<p>An <strong>expression</strong> in Python is a unit of code that evaluates to a value. Examples of expressions include object names, function calls, expressions with arithmetic operators, literals that create built-in object types such as lists, and more. However, not all statements are expressions. For example, <code>if</code> statements and <code>for</code> loop statements don’t return a value.</p>
<p>Python needs to evaluate every expression it encounters to use its value. In this tutorial, you’ll learn about the different ways Python evaluates these expressions. You’ll understand why some expressions are evaluated immediately, while others are evaluated later in the program’s execution. So, <strong>what’s lazy evaluation in Python?</strong></p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-lazy-evaluation-code/">Click here to download the free sample code</a> that shows you how to use lazy evaluation in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “What's Lazy Evaluation in Python?” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-lazy-evaluation/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What's Lazy Evaluation in Python?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Eager-vs-Lazy-Evaluation-in-Python-Pros-and-Cons_Watermarked.15b852ab57a6.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-lazy-evaluation/"><span class="my-0 h4">What's Lazy Evaluation in Python?</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the differences between lazy and eager evaluation in Python. By working through this quiz, you'll revisit how Python optimizes memory use and computational overhead by deciding when to compute values.</p>
    </div>
  </div>

</div>

<h2 id="in-short-python-lazy-evaluation-generates-objects-only-when-needed">In Short: Python Lazy Evaluation Generates Objects Only When Needed<a class="headerlink" href="https://realpython.com/atom.xml#in-short-python-lazy-evaluation-generates-objects-only-when-needed" title="Permanent link"></a></h2>
<p>An expression evaluates to a value. However, you can separate the type of evaluation of expressions into two types:</p>
<ol>
<li>Eager evaluation</li>
<li>Lazy evaluation</li>
</ol>
<p><strong>Eager evaluation</strong> refers to those cases when Python evaluates an expression as soon as it encounters it. Here are some examples of expressions that are evaluated eagerly:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="gp">&gt;&gt;&gt; </span><span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span>
<span class="linenos"> 2</span><span class="go">15</span>
<span class="linenos"> 3</span>
<span class="linenos"> 4</span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">random</span>
<span class="linenos"> 5</span><span class="gp">&gt;&gt;&gt; </span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="linenos"> 6</span><span class="go">4</span>
<span class="linenos"> 7</span>
<span class="linenos"> 8</span><span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="linenos"> 9</span><span class="go">[2, 4, 6, 8, 10]</span>
<span class="linenos">10</span><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="linenos">11</span><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
<span class="linenos">12</span><span class="go">[2, 4, 6, 8, 10]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Interactive environments, such as the <a href="https://realpython.com/python-repl/">standard Python REPL</a> used in this example, display the value of an expression when the line only contains the expression. This code section shows a few examples of statements and expressions:</p>
<ul>
<li><strong>Lines 1 and 2</strong>: The first example includes the addition operator <code>+</code>, which Python evaluates as soon as it encounters it. The REPL shows the value <code>15</code>.</li>
<li><strong>Lines 4 to 6</strong>: The second example includes two lines:<ul>
<li>The <strong>import statement</strong> includes the keyword <code>import</code> followed by the name of a module. The module name <code>random</code> is evaluated eagerly. </li>
<li>The <strong>function call <code>random.randint()</code></strong> is evaluated eagerly, and its value is returned immediately. All standard functions are evaluated eagerly. You’ll learn about generator functions later, which behave differently.</li>
</ul>
</li>
<li><strong>Lines 8 to 12</strong>: The final example has three lines of code:<ul>
<li>The <strong>literal to create a list</strong> is an expression that’s evaluated eagerly. This expression contains several integer literals, which are themselves expressions evaluated immediately.</li>
<li>The <strong>assignment statement</strong> assigns the object created by the list literal to the name <code>numbers</code>. This statement is not an expression and doesn’t return a value. However, it includes the list literal on the right-hand side, which is an expression that’s evaluated eagerly.</li>
<li>The final line contains <strong>the name <code>numbers</code>,</strong> which is eagerly evaluated to return the list object.</li>
</ul>
</li>
</ul>
<p>The list you create in the final example is created in full when you define it. Python needs to allocate memory for the list and all its elements. This memory won’t be freed as long as this list exists in your program. The memory allocation in this example is small and won’t impact the program. However, larger objects require more memory, which can cause performance issues.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Lazy_evaluation">Lazy evaluation</a></strong> refers to cases when Python doesn’t work out the values of an expression immediately. Instead, the values are returned at the point when they’re required in the program. Lazy evaluation can also be referred to as <em>call-by-need</em>.</p>
<p>This delay of when the program evaluates an expression delays the use of resources to create the value, which can improve the performance of a program by spreading the time-consuming process across a longer time period. It also prevents values that will not be used in the program from being generated. This can occur when the program terminates or moves to another part of its execution before all the generated values are used. </p>
<p>When large datasets are created using lazily-evaluated expressions, the program doesn’t need to use memory to store the data structure’s contents. The values are only generated when they’re needed.</p>
<p>An example of lazy evaluation occurs within the <code>for</code> loop when you iterate using <code>range()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1_000_001</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"This is iteration </span><span class="si">{</span><span class="n">index</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <a href="https://realpython.com/python-range/">built-in <code>range()</code></a> is the constructor for Python’s <code>range</code> object. The <code>range</code> object does not store all of the one million integers it represents. Instead, the <code>for</code> loop creates a <code>range_iterator</code> from the <code>range</code> object, which generates the next number in the sequence when it’s needed. Therefore, the program never needs to have all the values stored in memory at the same time.</p>
<p>Lazy evaluation also allows you to create infinite data structures, such as a live stream of audio or video data that continuously updates with new information, since the program doesn’t need to store all the values in memory at the same time. Infinite data structures are not possible with eager evaluation since they can’t be stored in memory.</p>
<p>There are disadvantages to deferred evaluation. Any errors raised by an expression are also deferred to a later point in the program. This delay can make debugging harder.</p>
<p>The lazy evaluation of the integers represented by <code>range()</code> in a <code>for</code> loop is one example of lazy evaluation. You’ll learn about more examples in the following section of this tutorial.</p>
<h2 id="what-are-examples-of-lazy-evaluation-in-python">What Are Examples of Lazy Evaluation in Python?<a class="headerlink" href="https://realpython.com/atom.xml#what-are-examples-of-lazy-evaluation-in-python" title="Permanent link"></a></h2>
<p>In the previous section, you learned about using <code>range()</code> in a <code>for</code> loop, which leads to lazy evaluation of the integers represented by the <code>range</code> object. There are other expressions in Python that lead to lazy evaluation. In this section, you’ll explore the main ones.</p>
<h3 id="other-built-in-data-types">Other Built-In Data Types<a class="headerlink" href="https://realpython.com/atom.xml#other-built-in-data-types" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/python-lazy-evaluation/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-lazy-evaluation/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Basics Exercises: Scopes</title>
<link>https://realpython.com/courses/python-basics-exercises-scopes/</link>
<guid>https://realpython.com/courses/python-basics-exercises-scopes/</guid>
<content:encoded><![CDATA[
<div> objects global LEGB return scope  
Python基础练习视频课程介绍如何理解Python中函数和循环的范围问题。通过识别对象范围、使用global关键字、探索LEGB规则以及在函数中使用返回语句，帮助学习者加深对范围概念的理解。范围是编程中比较困难理解的概念之一，本视频课程将提供更多练习机会。此视频课程是Python Basics系列的一部分，在学习前建议先查看相关系列。最后强调在整个课程中都会使用Python。.<br /><br />总结: 本视频课程讲解了如何理解Python函数和循环中的范围问题，包括识别对象范围、使用global关键字、探索LEGB规则以及函数中使用返回语句等内容。通过本课程的学习可以加深对范围概念的理解。 <div>
<p>On your Python journey, you&rsquo;ve worked with <a href="https://realpython.com/courses/python-basics-functions-loops/">functions and loops</a>. To fully understand functions and loops in Python, you need to be familiar with the issue of scope.</p>
<p><strong>In this Python Basics Exercises video course, you&rsquo;ll practice:</strong></p>
<ul>
<li>Identifying the <strong>scope</strong> of objects</li>
<li>Working with the <code>global</code> keyword</li>
<li>Exploring the <strong>LEGB rule</strong> for scope resolution</li>
<li>Using the <code>return</code> statement in a function</li>
</ul>
<p>Scope can be one of the more difficult programming concepts to understand, so in this video course, you&rsquo;ll get additional practice working with it.</p>
<p>This video course is part of the Python Basics series, which accompanies <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>. You can also check out the other <a href="https://realpython.com/learning-paths/python-basics/">Python Basics courses</a>. </p>
<p>Note that you&rsquo;ll be using <a href="https://realpython.com/python-idle/">IDLE</a> to <a href="https://realpython.com/interacting-with-python/">interact with Python</a> throughout this course. If you&rsquo;re just getting started, then you might want to check out <a href="https://realpython.com/courses/setting-up-python/">Python Basics: Setting Up Python</a> before diving into this course.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Sequences: A Comprehensive Guide</title>
<link>https://realpython.com/quizzes/python-sequences/</link>
<guid>https://realpython.com/quizzes/python-sequences/</guid>
<content:encoded><![CDATA[
<div> 关键词: sequence, operations, methods, mutable, immutable
总结:<br /><br />这篇文章主要讨论了序列的基本特征、大多数序列共有的操作、与序列相关的特殊方法，以及如何创建用户定义的可变和不可变序列。通过这个测验，你将测试对序列的理解。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-sequences/">Python sequences</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the basic characteristics of a sequence, operations common to most sequences, special methods associated with sequences, and how to create user-defined mutable and immutable sequences.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-23T12:00:00+00:00</pubDate>
</item>
<item>
<title>Write Unit Tests for Your Python Code With ChatGPT</title>
<link>https://realpython.com/chatgpt-unit-tests-python/</link>
<guid>https://realpython.com/chatgpt-unit-tests-python/</guid>
<content:encoded><![CDATA[
<div> ChatGPT, Unit Tests, Python, Testing, Efficiency<br />
<br />
提到在Python项目中编写良好的测试代码是很重要的，但写单元测试很难且耗时，因此开发者可能不喜欢写。本教程介绍了如何使用大型语言模型（LLMs）和ChatGPT来快速为Python代码创建完整的测试套件。使用ChatGPT可以高效生成基于规范或代码片段的单元测试，提高效率。同时，ChatGPT也能帮助改善测试覆盖率、减少错误、促进学习和培训开发人员。文章通过引导使用doctest、unittest和pytest等工具来展示如何使用ChatGPT编写Python代码的测试。总结: <div>
<div><p>Having a good battery of tests for your code may be a requirement for many Python projects. In practice, writing <strong>unit tests</strong> is hard and can take a lot of time and effort. Therefore, some developers don’t like to write them. However, with <strong>large language models</strong> (LLMs) and tools like <strong>ChatGPT</strong>, you can quickly create robust and complete sets of tests for your Python code.</p>
<p>In Python, you can use multiple different tools for writing tests. The most commonly used tools include <code>doctest</code>, <code>unittest</code>, and <code>pytest</code>. ChatGPT can be of great help in writing tests with any of these tools.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Prompt ChatGPT to create tests using <strong><code>doctest</code></strong></li>
<li>Use ChatGPT to write <strong><code>unittest</code></strong> tests, fixtures, and suites</li>
<li>Craft ChatGPT prompts to write <strong><code>pytest</code></strong> tests and fixtures</li>
<li>Use <strong>alternative prompts</strong> for cases where the code isn’t available</li>
</ul>
<p>To get the most out of this tutorial, you should <a href="https://realpython.com/chatgpt-coding-mentor-python/#set-up-your-chatgpt-coding-mentor">set up a ChatGPT account</a> and know the basics of interacting with this tool using <a href="https://realpython.com/practical-prompt-engineering/">prompt engineering</a>. You should also know the basics of how to <a href="https://realpython.com/python-testing/">test code</a> in Python.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/chatgpt-unit-tests-python/">Click here to download the free sample code</a> you’ll use to write unit tests for your Python code using ChatGPT.</p>
</div>
<h2 id="benefits-of-using-chatgpt-for-testing-python-code">Benefits of Using ChatGPT for Testing Python Code<a class="headerlink" href="https://realpython.com/atom.xml#benefits-of-using-chatgpt-for-testing-python-code" title="Permanent link"></a></h2>
<p>Having good and up-to-date <a href="https://realpython.com/python-testing/#unit-tests-vs-integration-tests">unit tests</a> for your code is a must for any Python project. Poorly tested code or code without tests may end up being unreliable and weak. With automated tests, you can ensure and show that your code works correctly in different scenarios. So, having tests is important from the technical and commercial point of view.</p>
<p>Writing good tests is hard and can take a lot of time. That’s why some developers don’t like to write them at all. Using <a href="https://en.wikipedia.org/wiki/Large_language_model">large language models (LLM)</a> like <a href="https://realpython.com/chatgpt-coding-mentor-python/">ChatGPT</a> can be a viable alternative for providing your projects and code with proper tests.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You can use ChatGPT and other LLMs in many useful ways in the context of Python development. Check out the following resources for other use cases and useful insights:</p>
<ul>
<li><a href="https://realpython.com/chatgpt-coding-mentor-python/">ChatGPT: Your Personal Python Coding Mentor</a></li>
<li><a href="https://realpython.com/podcasts/rpp/174/">Episode 174: Considering ChatGPT’s Technical Review of a Programming Book</a></li>
<li><a href="https://realpython.com/document-python-code-with-chatgpt/">Document Your Python Code and Projects With ChatGPT</a></li>
<li><a href="https://realpython.com/practical-prompt-engineering/">Prompt Engineering: A Practical Example</a></li>
<li><a href="https://realpython.com/build-llm-rag-chatbot-with-langchain/">Build an LLM RAG Chatbot With LangChain</a></li>
</ul>
</div>
<p>Some of the benefits of using ChatGPT to write tests for your Python code include the following:</p>
<ul>
<li><strong>Efficiency and speed</strong>: It can generate unit tests based on specifications or code snippets. This possibility significantly reduces the time that you need to spend writing tests. So you can focus on writing application logic.</li>
<li><strong>Coverage improvement</strong>: It can suggest tests for edge cases or scenarios that developers might not immediately consider. This way, you can improve your code’s test <a href="https://coverage.readthedocs.io/">coverage</a>.</li>
<li><strong>Error reduction</strong>: It can reduce human error in writing repetitive or boilerplate test code.</li>
<li><strong>Learning and onboarding</strong>: It can serve as an educational tool for developers who are new to testing frameworks or unfamiliar with best practices in unit testing. The generated tests can help developers learn about testing patterns, <a href="https://realpython.com/python-assert-statement/">assertions</a>, and ways to effectively write tests.</li>
</ul>
<p>With ChatGPT, you can generate unit tests for your Python code in almost no time. However, you must note that even though the generated tests can look good, you should still review and possibly refine the generated tests.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> For this tutorial, you’ll use a free ChatGPT account that’s powered by the GPT-3.5 LLM. You can use this model for free with the default <a href="https://chat.openai.com/auth/login">web interface</a> by OpenAI. If you use a paid account with GPT-4, then your results might be more accurate and faster.</p>
<p>Additionally, you’ll use an individual chat thread for each major section in the tutorial. So you’ll use different threads for the <code>doctest</code>, <code>unittest</code>, and <code>pytest</code> sections.</p>
<p>Using a single chat thread to run all the examples in this tutorial may cause the chat to generate significantly different responses because of the past context, which includes previous prompts and responses.</p>
</div>
<p>In the following sections, you’ll learn the basics of using ChatGPT as an assistant for creating coherent unit tests for your Python projects using different test frameworks and libraries.</p>
<h2 id="writing-doctest-tests-with-chatgpt">Writing <code>doctest</code> Tests With ChatGPT<a class="headerlink" href="https://realpython.com/atom.xml#writing-doctest-tests-with-chatgpt" title="Permanent link"></a></h2>
<p>Python’s <a href="https://docs.python.org/3/library/doctest.html#module-doctest"><code>doctest</code></a> module provides a lightweight <strong>testing framework</strong> that you can use for <a href="https://en.wikipedia.org/wiki/Test_automation">test automation</a>. It can read the test cases from your project’s documentation and your code’s docstrings. This framework comes with the Python interpreter, so you’ll have it at your disposal with any Python installation, which is great.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into how to use the <code>doctest</code> module for testing your code, check out <a href="https://realpython.com/python-doctest/">Python’s <code>doctest</code>: Document and Test Your Code at Once</a>.</p>
</div>
<p>With <code>doctest</code>, you can write code that provides examples of how your code works, simulating <a href="https://realpython.com/python-repl/">REPL</a> sessions. These examples work as documentation and also as test cases or unit tests. Each <code>doctest</code> test needs a statement or expression and an expected result.</p>
<p>You can use ChatGPT to help you out with writing <code>doctest</code> tests. First, you need some code to test. The following function tries to tackle the <a href="https://en.wikipedia.org/wiki/Fizz_buzz#Programming">FizzBuzz</a> challenge, where you return <code>"fizz"</code> for numbers divisible by three, <code>"buzz"</code> for those divisible by five, and <code>"fizz buzz"</code> for those divisible by both three and five.</p>
<p>Go ahead and create a <code>fizzbuzz.py</code> file and add the following code to it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">fizzbuzz.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This function works okay for numbers divisible by <code>3</code> or <code>5</code>. However, there is a slight issue with numbers that are divisible by both. Even though you know this, go ahead and start a new chat thread. Then, prompt ChatGPT to write <code>doctest</code> test for the function:</p>
<blockquote>
<p><strong>You:</strong> Write <code>doctest</code> tests for the following function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p><strong>ChatGPT:</strong></p>
<p>Certainly! The function you’ve provided implements a basic FizzBuzz algorithm but with a slight logical error. The check for divisibility by <code>15</code> should come before checks for <code>3</code> and <code>5</code>, as every number divisible by <code>15</code> is also divisible by both <code>3</code> and <code>5</code>, but your current order will never reach the <code>"fizz buzz"</code> case. Here’s a corrected version of your function with the logical order fixed, followed by <code>doctest</code> tests for it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""</span>
<span class="sd">    Returns 'fizz' if number is divisible by 3,</span>
<span class="sd">    'buzz' if number is divisible by 5,</span>
<span class="sd">    'fizz buzz' if number is divisible by 15,</span>
<span class="sd">    and the number itself otherwise.</span>

<span class="sd">    &gt;&gt;&gt; fizzbuzz(3)</span>
<span class="sd">    'fizz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(5)</span>
<span class="sd">    'buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(15)</span>
<span class="sd">    'fizz buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(4)</span>
<span class="sd">    4</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(30)</span>
<span class="sd">    'fizz buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(9)</span>
<span class="sd">    'fizz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(10)</span>
<span class="sd">    'buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(2)</span>
<span class="sd">    2</span>
<span class="sd">    """</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To use these <code>doctest</code> tests, you’ll need to include them in the docstring of your function as shown above. Then, you can run the tests with the <code>doctest</code> module by adding the following to your script:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">doctest</span>
    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This code will automatically run the tests defined in the docstrings when you execute the Python file. Remember, the corrected order of conditions in the function ensures that numbers divisible by both <code>3</code> and <code>5</code> return <code>"fizz buzz"</code>, which is crucial for the FizzBuzz logic.</p>
</blockquote>
<p>Wow! That great! The chat not only wrote the <code>doctest</code> tests for you. It also fixed the issue, explained important concepts around <code>doctest</code>, and provided instructions on how to run the tests. Note that the tests cover both regular and edge cases, which is pretty convenient.</p>
</div><h2><a href="https://realpython.com/chatgpt-unit-tests-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/chatgpt-unit-tests-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-22T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #201: Decoupling Systems to Get Closer to the Data</title>
<link>https://realpython.com/podcasts/rpp/201/</link>
<guid>https://realpython.com/podcasts/rpp/201/</guid>
<content:encoded><![CDATA[
<div> decoupled data processing system, benefits, reusable queries, backend data platforms, Ibis<br />
<br />
Ibis是一个Python dataframe库，可以帮助用户构建可移植的查询，适用于各种后端数据平台。使用decoupled data processing system可以实现数据处理的解耦，提高灵活性和可维护性。通过编写可重用的查询，用户可以轻松地在不同的后端数据平台上执行相同的操作，简化了开发过程，并提高了代码的可移植性和重用性。总之，借助Ibis这样的工具，用户可以更高效地处理数据，并在不同平台之间实现数据查询和处理的可移植性。 <br /><br />总结: <div>
<p>What are the benefits of using a decoupled data processing system? How do you write reusable queries for a variety of backend data platforms? This week on the show, Phillip Cloud, the lead maintainer of Ibis, will discuss this portable Python dataframe library.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python's unittest: Writing Unit Tests for Your Code</title>
<link>https://realpython.com/quizzes/python-unittest/</link>
<guid>https://realpython.com/quizzes/python-unittest/</guid>
<content:encoded><![CDATA[
<div> unittest framework, Python, testing, code, quiz
<br />
Python的测试是一个庞大的主题，可能会有很多复杂性，但并不需要很困难。你可以通过几个简单的步骤为应用程序创建简单的测试，然后逐步完善它们。这篇文章主要测试你对Python的unittest框架测试理解的程度。祝你好运！
<br /><br />总结: Python的测试可以通过unittest框架进行，可以简单地从几个简单步骤开始撰写测试代码，逐步完善。测试并不需要复杂化，只需掌握基本概念即可。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of testing your Python code with the <a href="https://realpython.com/python-unittest/">unittest framework</a>.</p>
<p>Testing in Python is a huge topic and can come with a lot of complexity, but it doesn&rsquo;t need to be hard. You can create simple tests for your application in a few easy steps and then build on them from there.</p>
<p>With this quiz, you can check your understanding of testing with Python&rsquo;s <code>unittest</code> framework. Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>How to Format Floats Within F-Strings in Python</title>
<link>https://realpython.com/how-to-python-f-string-format-float/</link>
<guid>https://realpython.com/how-to-python-f-string-format-float/</guid>
<content:encoded><![CDATA[
<div> f-string, float, format specifier, rounding, significant figures<br />
<br />
要点1: f-string是Python中用于格式化字符串的一种方式，可以在字符串中嵌入变量、表达式等动态内容。<br />
要点2: 使用格式化说明符可以控制浮点数的显示方式，例如控制小数位数。<br />
要点3: 通过在替换字段中添加格式化说明符来实现浮点数的格式化，例如使用`.2f`可以将浮点数保留两位小数。<br />
要点4: 格式化说明符还可以用于控制显著数字的显示方式，使用`g`来显示特定位数的显著数字。<br />
要点5: 在使用f-string时要注意安全问题，避免受到SQL注入等攻击，以及了解Python版本对f-string的支持程度。<br />
<br />
总结: f-string是一种方便的字符串格式化方式，在Python中可用格式化说明符对浮点数进行控制，包括小数位数和显著数字的显示。然而，在使用时需要注意安全性问题和Python版本的兼容性。 <div>
<div><p>You’ll often need to format and round a Python <a href="https://docs.python.org/3/library/functions.html#float"><code>float</code></a> to display the results of your calculations neatly within strings. In earlier versions of Python, this was a messy thing to do because you needed to round your numbers <em>first</em> and then use either string concatenation or the <a href="https://realpython.com/python-string-formatting/#1-old-style-string-formatting-operator">old string formatting</a> technique to do this for you. </p>
<p>Since Python 3.6, the <a href="https://peps.python.org/pep-0498/">literal string interpolation</a>, more commonly known as a <strong>formatted string literal</strong> or <strong><a href="https://realpython.com/python-f-strings/">f-string</a></strong>, allows you to customize the content of your strings in a more readable way.</p>
<p>An f-string is a literal string prefixed with a lowercase or uppercase letter <code>f</code> and contains zero or more <strong>replacement fields</strong> enclosed within a pair of curly braces <code>{...}</code>. Each field contains an <strong>expression</strong> that produces a value. You can calculate the field’s content, but you can also use function calls or even variables.</p>
<p>While most strings have a constant value, f-strings are evaluated at runtime. This makes it possible for you to pass different data into the replacement fields of the same f-string and produce different output. This extensibility of f-strings makes them a great way to embed dynamic content neatly inside strings. However, even though f-strings have largely replaced the earlier methods, they do have their short-comings.</p>
<p>For example, one of the most common attacks performed on a <a href="https://en.wikipedia.org/wiki/Relational_database">relational database</a> is a <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection</a> attack. Often, users provide parameters to SQL queries, and if the query is formed within an f-string, it may be possible to damage a database by passing in rogue commands. F-strings can also be used in a <a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">denial-of-service</a> attack by attacking <a href="https://realpython.com/python-logging/">Python’s logging module</a> code.</p>
<p>In older versions of Python, f-strings had a number of <a href="https://realpython.com/python312-f-strings/#f-strings-had-some-limitations-before-python-312">other limitations</a> that were only fixed with <a href="https://realpython.com/python312-f-strings/">Python version 3.12</a>. This version is used throughout this tutorial.</p>
<p>Take a look at the example below. It shows you how to embed the result of a calculation within an f-string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"One third, expressed as a float is: </span><span class="si">{</span><span class="mi">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'One third, expressed as a float is: 0.3333333333333333'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Without any explicit rounding, once an expression has produced its value it’ll be inserted into the string using a default number of decimal places. Here, the result is shown to sixteen decimal places, which, in most cases, is more precision than you’ll ever need. So you’ll likely want to round your final answer to a more practical number of digits.</p>
<p>In this tutorial, you’ll learn how to use a Python f-string to format floats to meet your requirements.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/how-to-python-f-string-format-float-code/">Click here to download the free sample code and exercise solutions </a>you’ll use for learning how to format floats within f-strings in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Format Floats Within F-Strings” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/format-floats-within-f-strings/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="How to Format Floats Within F-Strings in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/How-to-Display-a-Fixed-Amount-of-Digits-in-a-String_Watermarked.9c8579fa6ac2.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/format-floats-within-f-strings/"><span class="my-0 h4">Format Floats Within F-Strings</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of how to format floats within f-strings in Python. This knowledge will let you control the precision and appearance of floating-point numbers when you incorporate them into formatted strings.</p>
    </div>
  </div>

</div>

<h2 id="how-to-format-and-round-a-float-within-a-python-f-string">How to Format and Round a Float Within a Python F-String<a class="headerlink" href="https://realpython.com/atom.xml#how-to-format-and-round-a-float-within-a-python-f-string" title="Permanent link"></a></h2>
<p>To format a <code>float</code> for neat display within a Python f-string, you can use a <strong>format specifier</strong>. In its most basic form, this allows you to define the <strong>precision</strong>, or number of decimal places, the <code>float</code> will be displayed with.</p>
<p>The code below displays the same calculation as before, only it’s displayed more neatly:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"One third, rounded to two decimal places is: </span><span class="si">{</span><span class="mi">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'One third, rounded to two decimal places is: 0.33'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To use Python’s format specifiers in a replacement field, you separate them from the expression with a colon (<code>:</code>). As you can see, your <code>float</code> has been <a href="https://realpython.com/python-rounding/">rounded</a> to two decimal places. You achieved this by adding the format specifier <code>.2f</code> into the replacement field. The <code>2</code> is the precision, while the lowercase <code>f</code> is an example of a <strong>presentation type</strong>. You’ll see more of these later.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> When you use a format specifier, you don’t actually change the underlying number. You only improve its display.</p>
</div>
<p>Python’s f-strings also have their own <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">mini-language</a> that allows you to format your output in a variety of different ways. Although this tutorial will focus on rounding, this is certainly not the only thing you can use them for. As you’ll see later, their mini-language is also used in other string formatting techniques.</p>
<p>In addition to displaying the result of calculations, the precision part of a format specifier can also be applied directly to variables and the return values of function calls:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">total_price</span><span class="p">(</span><span class="n">cost</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">cost</span> <span class="o">*</span> <span class="mf">1.2</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">cost_price</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tax</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"£</span><span class="si">{</span><span class="mi">1000</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2"> + £</span><span class="si">{</span><span class="n">cost_price</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">tax</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2"> = £</span><span class="si">{</span><span class="n">total_price</span><span class="p">(</span><span class="n">cost_price</span><span class="p">)</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2">"</span>
</span><span class="go">'£1,000.00 + £200.00 = £1,200.00'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This time, you’ve used multiple replacement fields in the same string. The first one formats a literal number, the second formats the result of a calculation, while the third formats the return value from a function call. Also, by inserting a comma (<code>,</code>) before the decimal point (<code>.</code>) in the format specifier, you add a thousands separator to your final output.</p>
<p>In everyday use, you display numbers with a fixed amount of decimals, but when performing scientific or engineering calculations, you may prefer to format them using <a href="https://en.wikipedia.org/wiki/Significant_figures">significant figures</a>. Your results are then assumed to be accurate to the number of significant figures you display them with.</p>
<p>If you want to round numbers to significant figures, you use the lowercase letter <code>g</code> in the format specifier. You can also use an uppercase <code>G</code>, but this automatically switches the format to scientific notation for large numbers.</p>
<p>Suppose you have a circle with a radius of 10.203 meters. To work out the area, you could use this code:</p>
</div><h2><a href="https://realpython.com/how-to-python-f-string-format-float/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/how-to-python-f-string-format-float/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using raise for Effective Exceptions</title>
<link>https://realpython.com/courses/using-raise-for-effective-exceptions/</link>
<guid>https://realpython.com/courses/using-raise-for-effective-exceptions/</guid>
<content:encoded><![CDATA[
<div> raise statement, exceptions, handle errors, robust programs, best practices
<br />
提到Python中的raise语句，教会如何处理异常情况，提高程序的健壮性和代码质量。课程将教授如何使用raise语句来引发异常，在何时选择引发异常，在Python中引发异常的常见用例，以及在Python代码中引发异常时应用最佳实践。<br /><br />总结: 学会使用raise语句引发异常，有效处理错误和异常情况，开发更加健壮的程序，遵循引发异常的最佳实践。 <div>
<p>In your Python journey, you&rsquo;ll come across situations where you need to signal that something is going wrong in your code. For example, maybe a file doesn&rsquo;t exist, a network or database connection fails, or your code gets invalid input. A common approach to tackle these issues is to <strong>raise an exception</strong>, notifying the user that an error has occurred. That&rsquo;s what Python&rsquo;s <code>raise</code> statement is for.</p>
<p>Learning about the <code>raise</code> statement allows you to effectively handle errors and exceptional situations in your code. This way, you&rsquo;ll develop more robust programs and higher-quality code.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Raise exceptions in Python using the <strong><code>raise</code></strong> statement</li>
<li>Decide <strong>which exceptions</strong> to raise and <strong>when</strong> to raise them in your code</li>
<li>Explore common <strong>use cases</strong> for raising exceptions in Python</li>
<li>Apply <strong>best practices</strong> for raising exceptions in your Python code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>Build a Blog Using Django, GraphQL, and Vue</title>
<link>https://realpython.com/python-django-blog/</link>
<guid>https://realpython.com/python-django-blog/</guid>
<content:encoded><![CDATA[
<div> Django, GraphQL, Vue, blog, CRUD <br />
<br />
要点1: 本教程将教你如何使用Django、GraphQL和Vue构建博客应用的后端和前端。<br />
要点2: 你将学习如何将Django模型转换为GraphQL API，并在浏览器中使用Vue消费该API。<br />
要点3: 项目概述包括创建一个包含作者、文章和标签的简单博客应用。<br />
要点4: 在构建博客的后端时，你将使用Django和GraphQL，之后用Vue展示数据。<br />
要点5: 教程建议先了解Web应用概念，了解Django、Vue和JSON的基础知识。 <br /><br />总结: 本教程将教你如何使用Django、GraphQL和Vue构建博客应用的后端和前端。你将学习如何将Django模型转换为GraphQL API，并在浏览器中使用Vue消费该API。项目概述包括创建一个包含作者、文章和标签的简单博客应用。在构建博客的后端时，你将使用Django和GraphQL，之后用Vue展示数据。教程建议先了解Web应用概念，了解Django、Vue和JSON的基础知识。 <div>
<div><p>Are you a regular Django user? Do you find yourself wanting to decouple your back end and front end? Do you want to handle data persistence in the API while you display the data in a single-page app (SPA) in the browser using a JavaScript framework like React or Vue? </p>
<p>If you answered yes to any of these questions, then you’re in luck. This tutorial will take you through the process of building a Django blog back end and a <a href="https://vuejs.org/">Vue</a> front end, using <a href="https://graphql.org/">GraphQL</a> to communicate between them.</p>
<p><a href="https://realpython.com/intermediate-python-project-ideas/">Projects</a> are an effective way to learn and solidify concepts. This tutorial is structured as a step-by-step project so you can learn in a hands-on way and take breaks as needed.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Translate your <strong>Django models</strong> into a <strong>GraphQL API</strong></li>
<li>Run the <strong>Django server</strong> and a <strong>Vue application</strong> on your computer at the same time</li>
<li>Administer your blog posts in the <strong>Django admin</strong></li>
<li>Consume a GraphQL API in Vue to <strong>show data in the browser</strong></li>
</ul>
<p>You can download all the source code you’ll use to build your Django blog application by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/django-vue-graphql/">Click here to download the free sample code</a> that you’ll use to build a blog using Django, GraphQL, and Vue.</p>
</div>
<h2 id="demo-a-django-blog-admin-a-graphql-api-and-a-vue-front-end">Demo: A Django Blog Admin, a GraphQL API, and a Vue Front End<a class="headerlink" href="https://realpython.com/atom.xml#demo-a-django-blog-admin-a-graphql-api-and-a-vue-front-end" title="Permanent link"></a></h2>
<p><a href="https://realpython.com/build-a-blog-from-scratch-django/">Blog applications</a> are a common starter project because they involve create, read, update, and delete (CRUD) operations. In this project, you’ll use the Django admin to do the heavy CRUD lifting and you’ll focus on providing a GraphQL API for your blog data.</p>
<p>You’ll use <a href="https://vuejs.org/">Vue.js 3</a> and its <a href="https://vuejs.org/glossary/#composition-api">composition API</a> for the front end of your blog. Vue lets you create dynamic interfaces pretty smoothly, thanks to its reactive data binding and easy-to-manage components. Plus, since you’re dealing with data from a GraphQL API, you can leverage the Vue Apollo plugin.</p>
<p>Here’s a demonstration of the completed project in action:</p>
<figure>
  <div class="embed-responsive embed-responsive-16by9 rounded mb-3 border">
    
  </div>

</figure>

<p>Next, you’ll make sure you have all the necessary background information and tools before you dive in and build your blog application.</p>
<h2 id="project-overview">Project Overview<a class="headerlink" href="https://realpython.com/atom.xml#project-overview" title="Permanent link"></a></h2>
<p>For this project, you’ll create a small blogging application with some rudimentary features:</p>
<ul>
<li><strong>Authors</strong> can write many posts.</li>
<li><strong>Posts</strong> can have many tags and can be either published or unpublished.</li>
</ul>
<p>You’ll build the back end of this blog in Django, complete with an admin for adding new blog content. Then you’ll expose the content data as a GraphQL API and use Vue to display that data in the browser.</p>
<p>You’ll accomplish this in several high-level steps. At the end of each step, you’ll find a link to the source code for that stage of the project.</p>
<p>If you’re curious about how the source code for each step looks, then you can click the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/django-vue-graphql/">Click here to download the free sample code</a> that you’ll use to build a blog using Django, GraphQL, and Vue.</p>
</div>
<h2 id="prerequisites">Prerequisites<a class="headerlink" href="https://realpython.com/atom.xml#prerequisites" title="Permanent link"></a></h2>
<p>You’ll be best equipped for this tutorial if you already have a solid foundation in some web application concepts. You should understand how <a href="https://realpython.com/python-requests/">HTTP requests and responses</a> and APIs work. You can check out <a href="https://realpython.com/python-api/">Python &amp; APIs: A Winning Combo for Reading Public Data</a> to understand the details of using GraphQL APIs vs REST APIs.</p>
<p>Because you’ll use Django to build the back end for your blog, you’ll want to be familiar with <a href="https://realpython.com/django-setup/">starting a Django project</a> and <a href="https://realpython.com/customize-django-admin-python/">customizing the Django admin</a>. If you haven’t used Django much before, you might also want to try building another Django-only project first. For a good introduction, check out <a href="https://realpython.com/get-started-with-django-1/">Get Started with Django Part 1: Build a Portfolio App</a>.</p>
<p>And because you’ll be using Vue on the front end, some experience with <a href="https://realpython.com/python-vs-javascript/">JavaScript</a> will also help. If you’ve only used a JavaScript framework like <a href="https://jquery.com/">jQuery</a> in the past, the <a href="https://vuejs.org/guide/introduction.html">Vue introduction</a> is a good foundation.</p>
<p>Familiarity with JSON is also important because GraphQL queries are JSON-like and return data in JSON format. You can read about <a href="https://realpython.com/python-json/">Working with JSON Data in Python</a> for an introduction.</p>
</div><h2><a href="https://realpython.com/python-django-blog/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-django-blog/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Write Pythonic and Clean Code With namedtuple</title>
<link>https://realpython.com/quizzes/python-namedtuple/</link>
<guid>https://realpython.com/quizzes/python-namedtuple/</guid>
<content:encoded><![CDATA[
<div> namedtuple, features, Pythonic code, data structure, quiz
总结:<br /><br />这篇文章主要介绍了namedtuple的创建、特性、使用以及与其他数据结构的比较，通过完成测试来加深对namedtuple的理解。namedtuple是一种方便创建小型不可变数据对象的工具，具有类似于元组的访问方式和命名字段的优点。可以通过namedtuple实例编写Pythonic代码，提高代码的可读性和易用性，尤其适合于简单的数据结构。在选择数据结构时，需要根据需求和代码风格来决定是否使用namedtuple。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-namedtuple/">Python&rsquo;s <code>namedtuple()</code></a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to create <code>namedtuple</code> classes, identify and take advantage of the cool features of <code>namedtuple</code>, use <code>namedtuple</code> instances to write Pythonic code, and decide when to use a <code>namedtuple</code> over a similar data structure.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #200: Avoiding Error Culture and Getting Help Inside Python</title>
<link>https://realpython.com/podcasts/rpp/200/</link>
<guid>https://realpython.com/podcasts/rpp/200/</guid>
<content:encoded><![CDATA[
<p>What is error culture, and how do you avoid it within your organization? How do you navigate alert and notification fatigue? Hey, it's episode #200! Real Python's editor-in-chief, Dan Bader, joins us this week to celebrate. Christopher Trudeau also returns to bring another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What's Lazy Evaluation in Python?</title>
<link>https://realpython.com/quizzes/python-lazy-evaluation/</link>
<guid>https://realpython.com/quizzes/python-lazy-evaluation/</guid>
<content:encoded><![CDATA[
<p>Lazy evaluation is a programming concept where the evaluation of an expression is deferred until its value is actually needed. This can lead to performance enhancements by avoiding unnecessary calculations, and it can also allow for the creation of potentially infinite data structures. As you embark on this quiz, you&rsquo;ll test your knowledge of lazy evaluation in Python and learn how to apply this concept to write cleaner and more efficient code.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Format Floats Within F-Strings</title>
<link>https://realpython.com/quizzes/format-floats-within-f-strings/</link>
<guid>https://realpython.com/quizzes/format-floats-within-f-strings/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/how-to-python-f-string-format-float/">How to Format Floats Within F-Strings in Python</a>.</p>
<p>You&rsquo;ll often need to format and round a Python <code>float</code> to display the results of your calculations neatly within strings. While there are several ways to format numbers in Python, formatted string literals or <a href="https://realpython.com/python-f-strings/">f-strings</a> are usually the most frequent choice in modern Python programs. Knowing how to use f-strings effectively can make your code more readable and concise.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Pydantic: Simplifying Data Validation in Python</title>
<link>https://realpython.com/python-pydantic/</link>
<guid>https://realpython.com/python-pydantic/</guid>
<content:encoded><![CDATA[
<div><p>Pydantic is a powerful data validation and settings management library for Python, engineered to enhance the robustness and reliability of your codebase. From basic tasks, such as checking whether a variable is an integer, to more complex tasks, like ensuring highly-nested dictionary keys and values have the correct data types, Pydantic can handle just about any data validation scenario with minimal boilerplate code.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Work with <strong>data schemas</strong> with Pydantic’s <code>BaseModel</code></li>
<li>Write <strong>custom validators</strong> for complex use cases</li>
<li><strong>Validate function arguments</strong> with Pydantic’s <code>@validate_call</code></li>
<li>Manage settings and <strong>configure applications</strong> with <code>pydantic-settings</code></li>
</ul>
<p>Throughout this tutorial, you’ll get hands-on examples of Pydantic’s functionalities, and by the end you’ll have a solid foundation for your own validation use cases. Before starting this tutorial, you’ll benefit from having an intermediate understanding of Python and <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>. </p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/pydantic-simplifying-data-validation-in-python/">Click here to download the free sample code</a> that you’ll use to help you learn how Pydantic can help you simplify data validation in Python.</p>
</div>
<h2 id="pythons-pydantic-library">Python’s Pydantic Library<a class="headerlink" href="https://realpython.com/atom.xml#pythons-pydantic-library" title="Permanent link"></a></h2>
<p>One of Python’s main attractions is that it’s a dynamically typed language. Dynamic typing means that variable types are determined at runtime, unlike statically typed languages where they are explicitly declared at compile time. While dynamic typing is great for rapid development and ease of use, you often need more robust type checking and data validation for real-world applications. This is where Python’s Pydantic library has you covered.</p>
<p>Pydantic has quickly gained popularity, and it’s now the most widely used data validation library for Python. In this first section, you’ll get an overview of Pydantic and a preview of the library’s powerful features. You’ll also learn how to install Pydantic along with the additional dependencies you’ll need for this tutorial.</p>
<h3 id="getting-familiar-with-pydantic">Getting Familiar With Pydantic<a class="headerlink" href="https://realpython.com/atom.xml#getting-familiar-with-pydantic" title="Permanent link"></a></h3>
<p>Pydantic is a powerful Python library that leverages <a href="https://realpython.com/python-type-checking/">type hints</a> to help you easily validate and serialize your data schemas. This makes your code more robust, readable, concise, and easier to debug. Pydantic also integrates well with many popular static typing tools and IDEs, which allows you to catch schema issues before running your code.</p>
<p>Some of Pydantic’s distinguishing features include:</p>
<ul>
<li>
<p><strong>Customization</strong>: There’s almost no limit to the kinds of data you can validate with Pydantic. From primitive Python types to highly nested data structures, Pydantic lets you validate and serialize nearly any Python object.</p>
</li>
<li>
<p><strong>Flexibility</strong>: Pydantic gives you control over how strict or lax you want to be when validating your data. In some cases, you might want to coerce incoming data to the correct type. For example, you could accept data that’s intended to be a float but is received as an integer. In other cases, you might want to strictly enforce the data types you’re receiving. Pydantic enables you to do either. </p>
</li>
<li>
<p><strong>Serialization</strong>: You can serialize and deserialize Pydantic objects as <a href="https://realpython.com/python-dicts/">dictionaries</a> and <a href="https://realpython.com/python-json/">JSON</a> strings. This means that you can seamlessly convert your Pydantic objects to and from JSON. This capability has led to self-documenting APIs and integration with just about any tool that supports JSON schemas.</p>
</li>
<li>
<p><strong>Performance</strong>: Thanks to its core validation logic written in <a href="https://www.rust-lang.org/">Rust</a>, Pydantic is exceptionally fast. This performance advantage gives you swift and reliable data processing, especially in high-throughput applications such as REST APIs that need to scale to a large number of requests.</p>
</li>
<li>
<p><strong>Ecosystem and Industry Adoption</strong>: Pydantic is a dependency of <a href="https://docs.pydantic.dev/2.0/why/#ecosystem">many popular Python libraries</a> such as <a href="https://realpython.com/fastapi-python-web-apis/">FastAPI</a>, <a href="https://realpython.com/build-llm-rag-chatbot-with-langchain/">LangChain</a>, and <a href="https://realpython.com/polars-python/">Polars</a>. It’s also used by most of the <a href="https://docs.pydantic.dev/2.0/why/#using-pydantic">largest tech companies</a> and throughout many other industries. This is a testament to Pydantic’s community support, reliability, and resilience.</p>
</li>
</ul>
<p>These are a few key features that make Pydantic an attractive data validation library, and you’ll get to see these in action throughout this tutorial. Up next, you’ll get an overview of how to install Pydantic along with its various dependencies.</p>
<h3 id="installing-pydantic">Installing Pydantic<a class="headerlink" href="https://realpython.com/atom.xml#installing-pydantic" title="Permanent link"></a></h3>
<p>Pydantic is available on <a href="https://pypi.org/">PyPI</a>, and you can install it with <a href="https://realpython.com/what-is-pip/">pip</a>. Open a terminal or command prompt, create a new virtual environment, and then run the following command to install Pydantic:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pydantic
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This command will install the latest version of Pydantic from PyPI onto your machine. To verify that the installation was successful, start a <a href="https://realpython.com/python-repl/">Python REPL</a> and import Pydantic:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pydantic</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>If the import runs without error, then you’ve successfully installed Pydantic, and you now have the core of Pydantic installed on your system.</p>
<h3 id="adding-optional-dependencies">Adding Optional Dependencies<a class="headerlink" href="https://realpython.com/atom.xml#adding-optional-dependencies" title="Permanent link"></a></h3>
<p>You can install optional dependencies with Pydantic as well. For example, you’ll be working with email validation in this tutorial, and you can include these dependencies in your install:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span><span class="s2">"pydantic[email]"</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Pydantic has a separate package for <a href="https://docs.pydantic.dev/latest/concepts/pydantic_settings/">settings management</a>, which you’ll also cover in this tutorial. To install this, run the following command:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pydantic-settings
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>With that, you’ve installed all the dependencies you’ll need for this tutorial, and you’re ready to start exploring Pydantic. You’ll start by covering models—Pydantic’s primary way of defining data schemas.</p>
</div><h2><a href="https://realpython.com/python-pydantic/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-pydantic/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-10T14:00:00+00:00</pubDate>
</item>
<item>
<title>Generating QR Codes With Python</title>
<link>https://realpython.com/courses/generating-qr-codes/</link>
<guid>https://realpython.com/courses/generating-qr-codes/</guid>
<content:encoded><![CDATA[
<p>From restaurant e-menus to airline boarding passes, <strong>QR codes</strong> have numerous applications that impact your day-to-day life and enrich the user&rsquo;s experience. Wouldn&rsquo;t it be great to make them look good, too? With the help of this video course, you&rsquo;ll learn how to use Python to generate beautiful QR codes for your personal use case. </p>
<p>In its most basic format, a QR code contains black squares and dots on a white background, with information that any smartphone or device with a dedicated QR scanner can decode. Unlike a traditional bar code, which holds information horizontally, a QR code holds the data in two dimensions, and it can hold over a hundred times more information.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li><strong>Generate</strong> a basic black-and-white QR code</li>
<li>Change the <strong>size</strong> and <strong>margins</strong> of the QR code</li>
<li>Create <strong>colorful</strong> QR codes</li>
<li><strong>Rotate</strong> the QR code</li>
<li>Replace the static background with an <strong>animated GIF</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-09T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News: What's New From March 2024</title>
<link>https://realpython.com/python-news-march-2024/</link>
<guid>https://realpython.com/python-news-march-2024/</guid>
<content:encoded><![CDATA[
<div><p>While many people went hunting for <a href="https://realpython.com/courses/finding-python-easter-eggs/">Easter eggs</a>, the Python community stayed active through March 2024. The free-threaded Python project reached a new milestone, and you can now experiment with disabling the GIL in your interpreter.</p>
<p>The Python Software Foundation does a great job supporting the language with limited resources. They’ve now announced a new position that will support users of PyPI. NumPy is an old workhorse in the data science space. The library is getting a big facelift, and the first release candidate of NumPy 2 is now available.</p>
<p>Dive in to learn more about last month’s most important Python news. </p>
<h2 id="free-threaded-python-reaches-an-important-milestone">Free-Threaded Python Reaches an Important Milestone<a class="headerlink" href="https://realpython.com/atom.xml#free-threaded-python-reaches-an-important-milestone" title="Permanent link"></a></h2>
<p>Python’s <a href="https://realpython.com/python-gil/">global interpreter lock</a> (GIL) has been part of the CPython implementation since the early days. The lock simplifies a lot of the code under the hood of the language, but also causes some issues with <a href="https://realpython.com/python-parallel-processing/">parallel processing</a>.</p>
<p>Over the years, there have been <a href="https://realpython.com/python-parallel-processing/#the-gil-ensures-thread-safety-of-the-python-internals">many attempts</a> to remove the GIL. However, until <a href="https://peps.python.org/pep-0703/">PEP 703</a> was <a href="https://realpython.com/python-news-october-2023/#pep-703-accepted-one-step-closer-to-python-without-the-gil">accepted by the steering council last year</a>, none had been successful.</p>
<p>The PEP describes how the GIL can be removed based on experimental work done by <a href="https://github.com/colesbury">Sam Gross</a>. It suggests that what’s now called <strong>free-threaded Python</strong> is activated through a build option. In time, this free-threaded Python is expected to become the default version of CPython, but for now, it’s only meant for testing and experiments.</p>
<p>When free-threaded Python is ready for bigger audiences, the GIL will still be enabled by default. You can then set an environment variable or add a command-line option to try out free-threaded Python:</p>
</div><h2><a href="https://realpython.com/python-news-march-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-march-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #199: Leveraging Documents and Data to Create a Custom LLM Chatbot</title>
<link>https://realpython.com/podcasts/rpp/199/</link>
<guid>https://realpython.com/podcasts/rpp/199/</guid>
<content:encoded><![CDATA[
<p>How do you customize a LLM chatbot to address a collection of documents and data? What tools and techniques can you use to build embeddings into a vector database? This week on the show, Calvin Hendryx-Parker is back to discuss developing an AI-powered, Large Language Model-driven chat interface.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Build Command-Line Interfaces With Python's argparse</title>
<link>https://realpython.com/quizzes/command-line-interfaces-python-argparse/</link>
<guid>https://realpython.com/quizzes/command-line-interfaces-python-argparse/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/command-line-interfaces-python-argparse/">Creating Command-line Interfaces in Python with argparse</a>.</p>
<p>Command-line apps may not be common in the general user&rsquo;s space, but they&rsquo;re present in development, data science, systems administration, and many other operations. Every command-line app needs a user-friendly <a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line interface (CLI)</a> so that you can interact with the app itself. In Python, you can create full-featured CLIs with the <code>argparse</code> module from the standard library.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Deep Learning: PyTorch vs Tensorflow</title>
<link>https://realpython.com/courses/deep-learning-pytorch-tensorflow/</link>
<guid>https://realpython.com/courses/deep-learning-pytorch-tensorflow/</guid>
<content:encoded><![CDATA[
<p>PyTorch vs TensorFlow: What&rsquo;s the difference? Both are open source Python libraries that use graphs to perform numerical computation on data. Both are used extensively in academic research and commercial code. Both are extended by a variety of APIs, cloud computing platforms, and model repositories.</p>
<p>If they&rsquo;re so similar, then which one is best for your project?</p>
<p><strong>In this video course, you&rsquo;ll learn:</strong></p>
<ul>
<li>What the differences are between <strong>PyTorch</strong> and <strong>TensorFlow</strong></li>
<li>What <strong>tools</strong> and <strong>resources</strong> are available for each</li>
<li>How to choose the <strong>best option</strong> for your specific use case</li>
</ul>
<p>You&rsquo;ll start by taking a close look at both platforms, beginning with the slightly older TensorFlow, before exploring some considerations that can help you determine which choice is best for your project. Let&rsquo;s get started!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-02T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #198: Build a Video Game With Python Turtle &amp; Visualize Data in Seaborn</title>
<link>https://realpython.com/podcasts/rpp/198/</link>
<guid>https://realpython.com/podcasts/rpp/198/</guid>
<content:encoded><![CDATA[
<p>Can you build a Space Invaders clone using Python's built-in turtle module? What advantages does the Seaborn data visualization library provide compared to Matplotlib? Christopher Trudeau is back on the show this week, along with special guest Real Python core team member Bartosz Zaczyński. We're sharing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-29T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: A Practical Introduction to Web Scraping in Python</title>
<link>https://realpython.com/quizzes/python-web-scraping-practical-introduction/</link>
<guid>https://realpython.com/quizzes/python-web-scraping-practical-introduction/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-web-scraping-practical-introduction/">Web Scraping in Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to parse website data using string methods and regular expressions, how to parse website data using an HTML parser, and how to interact with forms and other website components.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-27T12:00:00+00:00</pubDate>
</item>
<item>
<title>Finding Python Easter Eggs</title>
<link>https://realpython.com/courses/finding-python-easter-eggs/</link>
<guid>https://realpython.com/courses/finding-python-easter-eggs/</guid>
<content:encoded><![CDATA[
<p>In this <strong>Code Conversation</strong>, you&rsquo;ll follow a chat between Philipp and Bartosz as they go on an Easter egg hunt. Along the way, you&rsquo;ll:</p>
<ul>
<li>Learn about Easter egg hunt traditions</li>
<li>Uncover the first Easter egg in software</li>
<li>Explore Easter eggs in Python</li>
</ul>
<p>There won&rsquo;t be many code examples in this Code Conversation, so you can lean back and join Philipp and Bartosz on their Easter egg hunt.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-26T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Get Started With Django: Build a Portfolio App</title>
<link>https://realpython.com/quizzes/get-started-with-django/</link>
<guid>https://realpython.com/quizzes/get-started-with-django/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/learning-paths/django-web-development/">Django</a>. By working through this quiz, you&rsquo;ll revisit the steps you need to <a href="https://realpython.com/get-started-with-django-1/">get started with Django</a>.</p>
<p>You&rsquo;ll touch on topics that will help you create a fully functioning web application and revisit some of the most important features of Django.</p>
<p>You&rsquo;ll also investigate the architecture of a Django site, remember how to set up a new Django project with multiple apps, build models and views, and create and connect Django templates.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #197: Using Python in Bioinformatics and the Laboratory</title>
<link>https://realpython.com/podcasts/rpp/197/</link>
<guid>https://realpython.com/podcasts/rpp/197/</guid>
<content:encoded><![CDATA[
<p>How is Python being used to automate processes in the laboratory? How can it speed up scientific work with DNA sequencing? This week on the show, Chemical Engineering PhD Student Parsa Ghadermazi is here to discuss Python in bioinformatics.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-22T12:00:00+00:00</pubDate>
</item>
<item>
<title>SQLite and SQLAlchemy in Python: Move Your Data Beyond Flat Files</title>
<link>https://realpython.com/courses/sqlite-sqlalchemy-python-beyond-flat-files/</link>
<guid>https://realpython.com/courses/sqlite-sqlalchemy-python-beyond-flat-files/</guid>
<content:encoded><![CDATA[
<p>All programs process data in one form or another, and many need to be able to save and retrieve that data from one invocation to the next. Python, <a href="https://www.sqlite.org/index.html">SQLite</a>, and <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> give your programs database functionality, allowing you to store data in a single file without the need for a database server.</p>
<p>You can achieve similar results using <a href="https://en.wikipedia.org/wiki/Flat-file_database">flat files</a> in any number of formats, including CSV, JSON, XML, and even custom formats. Flat files are often human-readable text files&mdash;though they can also be binary data&mdash;with a structure that can be parsed by a computer program. You&rsquo;ll explore using SQL databases and flat files for data storage and manipulation and learn how to decide which approach is right for your program.</p>
<p><strong>In this video course, you&rsquo;ll learn how to use:</strong></p>
<ul>
<li><strong>Flat files</strong> for data storage</li>
<li><strong>SQL</strong> to improve access to persistent data</li>
<li><strong>SQLite</strong> for data storage</li>
<li><strong>SQLAlchemy</strong> to work with data as Python objects</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-19T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #196: Exploring Duck Typing in Python &amp; Dynamics of Monkey Patching</title>
<link>https://realpython.com/podcasts/rpp/196/</link>
<guid>https://realpython.com/podcasts/rpp/196/</guid>
<content:encoded><![CDATA[
<p>What are the advantages of determining the type of an object by how it behaves? What coding circumstances are not a good fit for duck typing? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Basics Exercises: Dictionaries</title>
<link>https://realpython.com/courses/basics-exercises-dictionaries/</link>
<guid>https://realpython.com/courses/basics-exercises-dictionaries/</guid>
<content:encoded><![CDATA[
<p>In plain English, a dictionary is a book containing the definitions of words. Each entry in a dictionary has two parts: the word being defined, and its definition.</p>
<p><strong>Python dictionaries</strong>, like lists and tuples, store a collection of objects. However, instead of storing objects in a sequence, dictionaries hold
information in pairs of data called <strong>key-value pairs</strong>. That is, each object in a dictionary has two parts: a <strong>key</strong> and a <strong>value</strong>. Each key is assigned a single value, which defines the relationship between the two sets.</p>
<p><strong>In this video course, you&rsquo;ll practice:</strong></p>
<ul>
<li>What a dictionary <strong>is</strong> and how it&rsquo;s <strong>structured</strong></li>
<li>How dictionaries <strong>differ</strong> from other data structures</li>
<li>How to <strong>define</strong> and <strong>use</strong> dictionaries in your own code</li>
</ul>
<p>This video course is part of the Python Basics series, which accompanies <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>. You can also check out the other <a href="https://realpython.com/learning-paths/python-basics/">Python Basics courses</a>. </p>
<p>Note that you&rsquo;ll be using <a href="https://realpython.com/python-idle/">IDLE</a> to <a href="https://realpython.com/interacting-with-python/">interact with Python</a> throughout this course.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-12T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #195: Building a Healthy Developer Mindset While Learning Python</title>
<link>https://realpython.com/podcasts/rpp/195/</link>
<guid>https://realpython.com/podcasts/rpp/195/</guid>
<content:encoded><![CDATA[
<p>How do you get yourself unstuck when facing a programming problem? How do you develop a positive developer mindset while learning Python? This week on the show, Bob Belderbos from Pybites is here to talk about learning Python and building healthy developer habits.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-08T12:00:00+00:00</pubDate>
</item>
<item>
<title>Creating Asynchronous Tasks With Celery and Django</title>
<link>https://realpython.com/courses/asynchronous-tasks-celery-django/</link>
<guid>https://realpython.com/courses/asynchronous-tasks-celery-django/</guid>
<content:encoded><![CDATA[
<p>You&rsquo;ve built a shiny <strong>Django</strong> app and want to release it to the public, but you&rsquo;re worried about time-intensive tasks that are part of your app&rsquo;s workflow. You don&rsquo;t want your users to have a negative experience navigating your app. You can integrate <strong>Celery</strong> to help with that.</p>
<p>Celery is a <strong>distributed task queue</strong> for UNIX systems. It allows you to offload work from your Python app. Once you integrate Celery into your app, you can send time-intensive tasks to Celery&rsquo;s task queue. That way, your web app can continue to respond quickly to users while Celery completes expensive operations asynchronously in the background.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Recognize <strong>effective use cases</strong> for Celery</li>
<li>Differentiate between <strong>Celery beat</strong> and <strong>Celery workers</strong></li>
<li><strong>Integrate Celery and Redis</strong> in a Django project</li>
<li>Set up <strong>asynchronous tasks</strong> that run independently of your Django app</li>
<li>Refactor Django code to <strong>run a task with Celery</strong> instead</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-05T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #194: Automate Tasks With Python &amp; Building a Small Search Engine</title>
<link>https://realpython.com/podcasts/rpp/194/</link>
<guid>https://realpython.com/podcasts/rpp/194/</guid>
<content:encoded><![CDATA[
<p>What are the typical computer tasks you do manually every week? Could you automate those tasks with a Python script? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-01T12:00:00+00:00</pubDate>
</item>
</channel>
</rss>