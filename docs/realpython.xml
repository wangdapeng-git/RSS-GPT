<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Real Python</title>
<link>https://realpython.com/</link>


<item>
<title>Basic Data Types in Python: A Quick Exploration</title>
<link>https://realpython.com/python-data-types/</link>
<guid>https://realpython.com/python-data-types/</guid>
<content:encoded><![CDATA[
<div> int float complex str bytes bool<br />
整数、浮点数、复数、字符串、字节和布尔值是Python中的基本数据类型。整数是没有小数位的整数，可以是正数或负数。浮点数包含小数部分，而复数由实部和虚部组成。字符串用于表示文本数据，字节和字节数组用于存储字节数据。布尔值表示真或假的逻辑值。在Python中，这些基本数据类型可以直接使用，可以通过不同方式创建不同类型的字面量。整数没有长度限制，只受系统内存限制。在Python中，这些数据类型提供了基本的方法来创建、使用和处理这些数据，包括整数数据类型。整数字面量在代码中直接表示整数值。要生成负整数，需在数字前加上负号。真正长的整数需要转换为字符串处理。总结:整数、浮点数、复数、字符串、字节和布尔值是Python中的基本数据类型，可以直接使用，有不同的创建方式，并有基本的操作和处理方法。 <div>
<div><p>Python has several basic data types that are built into the language. With these types, you can represent numeric values, text and binary data, and Boolean values in your code. So, these data types are the basic building blocks of most Python programs and projects.</p>
<p><strong>In this tutorial, you’ll learn about:</strong></p>
<ul>
<li><strong>Numeric</strong> types, such as <strong><code>int</code></strong>, <strong><code>float</code></strong>, and <strong><code>complex</code></strong></li>
<li>The <strong><code>str</code></strong> data type, which represents <strong>textual</strong> data</li>
<li>The <strong><code>bytes</code></strong> and <strong><code>bytearray</code></strong> data types for storing <strong>bytes</strong></li>
<li><strong>Boolean</strong> values with the <strong><code>bool</code></strong> data type</li>
</ul>
<p>In this tutorial, you’ll learn only the basics of each data type. To learn more about a specific data type, you’ll find useful resources in the corresponding section.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-data-types-update-code/">Click here to download the free sample code</a> that you’ll use to learn about basic data types in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Basic Data Types in Python: A Quick Exploration” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-data-types/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Basic Data Types in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Basic-Data-Types-in-Python_Watermarked.e3dd34457952.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-data-types/"><span class="my-0 h4">Basic Data Types in Python: A Quick Exploration</span></a> 
      <p class="text-muted mb-0 small">Take this quiz to test your understanding of the basic data types that are built into Python, like numbers, strings, and Booleans.</p>
    </div>
  </div>

</div>

<h2 id="pythons-basic-data-types">Python’s Basic Data Types<a class="headerlink" href="https://realpython.com/atom.xml#pythons-basic-data-types" title="Permanent link"></a></h2>
<p>Python has several <strong>built-in data types</strong> that you can use out of the box because they’re built into the language. From all the built-in types available, you’ll find that a few of them represent <em>basic</em> objects, such as numbers, strings and characters, bytes, and Boolean values.</p>
<p>Note that the term <strong>basic</strong> refers to objects that can represent data you typically find in real life, such as numbers and text. It doesn’t include composite data types, such as <a href="https://realpython.com/python-list/">lists</a>, <a href="https://realpython.com/python-tuple/">tuples</a>, <a href="https://realpython.com/python-dicts/">dictionaries</a>, and others.</p>
<p>In Python, the built-in data types that you can consider basic are the following:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Class</th>
<th>Basic Type</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://realpython.com/atom.xml#integer-numbers"><code>int</code></a></td>
<td>Integer numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#floating-point-numbers"><code>float</code></a></td>
<td>Floating-point numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#complex-numbers"><code>complex</code></a></td>
<td>Complex numbers</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#strings-and-characters"><code>str</code></a></td>
<td>Strings and characters</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#bytes-and-bytearrays"><code>bytes</code>, <code>bytearray</code></a></td>
<td>Bytes</td>
</tr>
<tr>
<td><a href="https://realpython.com/atom.xml#booleans"><code>bool</code></a></td>
<td>Boolean values</td>
</tr>
</tbody>
</table>
</div>
<p>In the following sections, you’ll learn the basics of how to create, use, and work with all of these built-in data types in Python.</p>
<h2 id="integer-numbers">Integer Numbers<a class="headerlink" href="https://realpython.com/atom.xml#integer-numbers" title="Permanent link"></a></h2>
<p><strong>Integer numbers</strong> are whole numbers with no decimal places. They can be positive or negative numbers. For example, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>-1</code>, <code>-2</code>, and <code>-3</code> are all integers. Usually, you’ll use positive integer numbers to count things.</p>
<p>In Python, the integer data type is represented by the <a href="https://docs.python.org/3/library/functions.html#int"><code>int</code></a> class:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">&lt;class 'int'&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In the following sections, you’ll learn the basics of how to create and work with integer numbers in Python.</p>
<h3 id="integer-literals">Integer Literals<a class="headerlink" href="https://realpython.com/atom.xml#integer-literals" title="Permanent link"></a></h3>
<p>When you need to use integer numbers in your code, you’ll often use integer <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals">literals</a> directly. Literals are constant values of built-in types spelled out literally, such as integers. Python provides a few different ways to create integer literals. The most common way is to use base-ten literals that look the same as integers look in math:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">42</span>
<span class="go">42</span>

<span class="gp">&gt;&gt;&gt; </span><span class="o">-</span><span class="mi">84</span>
<span class="go">-84</span>

<span class="gp">&gt;&gt;&gt; </span><span class="mi">0</span>
<span class="go">0</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Here, you have three integer numbers: a positive one, a negative one, and zero. Note that to create negative integers, you need to prepend the minus sign (<code>-</code>) to the number.</p>
<p>Python has no limit to how long an integer value can be. The only constraint is the amount of memory your system has. Beyond that, an integer can be as long as you need:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">123123123123123123123123123123123123123123123123</span> <span class="o">+</span> <span class="mi">1</span>
<span class="go">123123123123123123123123123123123123123123123124</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>For a really, really long integer, you <a href="https://realpython.com/python-news-september-2022/#python-introduced-a-breaking-change-to-fix-a-vulnerability">can get a <code>ValueError</code></a> when converting it to a string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="mi">123</span> <span class="o">**</span> <span class="mi">10000</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">ValueError</span>: <span class="n">Exceeds the limit (4300 digits) for integer string conversion;</span>
<span class="x">            use sys.set_int_max_str_digits() to increase the limit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
</div><h2><a href="https://realpython.com/python-data-types/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-data-types/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-20T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #205: Considering Accessibility &amp; Assistive Tech as a Python Developer</title>
<link>https://realpython.com/podcasts/rpp/205/</link>
<guid>https://realpython.com/podcasts/rpp/205/</guid>
<content:encoded><![CDATA[
<div> Python, visually impaired, blind developer, web accessibility, assistive technology
Python语言在视觉障碍或盲人开发者学习过程中的体验，以及如何提高Python网络应用程序的可访问性和了解当前的指南。本周节目中，Real Python社区成员Audrey van Breederode讨论了她的编程之旅，网络可访问性和辅助技术。<br /><br />总结: Python语言对于视觉障碍或盲人开发者来说有独特的学习体验，了解并优化Python网络应用程序的可访问性是重要的。Audrey van Breederode分享了自己的编程之旅，并探讨了辅助技术在这个过程中的作用。 <div>
<p>What's it like to learn Python as a visually impaired or blind developer? How can you improve the accessibility of your Python web applications and learn current guidelines? This week on the show, Real Python community member Audrey van Breederode discusses her programming journey, web accessibility, and assistive technology.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-17T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python's Built-in Exceptions: A Walkthrough With Examples</title>
<link>https://realpython.com/python-built-in-exceptions/</link>
<guid>https://realpython.com/python-built-in-exceptions/</guid>
<content:encoded><![CDATA[
<div> Errors, Exceptions, Python, Built-in, Handle<br />
错误和异常在Python中很重要，错误是使代码不正常工作甚至崩溃的具体条件，可以通过更新或修改代码、安装新版本的依赖项、检查代码逻辑等方式来修复错误。例子中展示了如何修复语法错误。异常是中断程序执行的事件，应该使用适当的异常处理机制来处理异常，Python使用类来表示异常和错误，异常类可以提供关于异常情况和程序执行过程中发现的错误的信息。SyntaxError类表示错误，但实际上实现为Python异常。要防止程序在异常发生后崩溃，必须使用适当的异常处理机制。 <div>
<div><p>Python has a complete set of <strong>built-in exceptions</strong> that provide a quick and efficient way to handle errors and exceptional situations that may happen in your code. Knowing the most commonly used built-in exceptions is key for you as a Python developer. This knowledge will help you debug code because each exception has a specific meaning that can shed light on your debugging process.</p>
<p>You’ll also be able to handle and raise most of the built-in exceptions in your Python code, which is a great way to deal with errors and exceptional situations without having to create your own custom exceptions.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Learn what <strong>errors</strong> and <strong>exceptions</strong> are in Python</li>
<li>Understand how Python organizes the <strong>built-in exceptions</strong> in a <strong>class hierarchy</strong></li>
<li>Explore the most <strong>commonly used</strong> built-in exceptions</li>
<li>Learn how to <strong>handle</strong> and <strong>raise</strong> built-in exceptions in your code</li>
</ul>
<p>To smoothly walk through this tutorial, you should be familiar with some core concepts in Python. These concepts include Python <a href="https://realpython.com/python-classes/">classes</a>, class <a href="https://realpython.com/python-classes/#class-hierarchies">hierarchies</a>, <a href="https://realpython.com/python-exceptions/">exceptions</a>, <a href="https://realpython.com/python-exceptions/#handling-exceptions-with-the-try-and-except-block"><code>try</code> … <code>except</code></a> blocks, and the <a href="https://realpython.com/python-raise-exception/"><code>raise</code></a> statement.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-built-in-exceptions-code/">Click here to download the free sample code</a> that you’ll use to learn about Python’s built-in exceptions.</p>
</div>
<h2 id="errors-and-exceptions-in-python">Errors and Exceptions in Python<a class="headerlink" href="https://realpython.com/atom.xml#errors-and-exceptions-in-python" title="Permanent link"></a></h2>
<p><strong>Errors</strong> and <strong>exceptions</strong> are important concepts in programming, and you’ll probably spend a considerable amount of time dealing with them in your programming career. <strong>Errors</strong> are concrete conditions, such as <strong>syntax</strong> and <strong>logical</strong> errors, that make your code work incorrectly or even crash.</p>
<p>Often, you can fix errors by updating or modifying the code, installing a new version of a dependency, checking the code’s logic, and so on.</p>
<p>For example, say you need to make sure that a given <a href="https://realpython.com/python-strings/">string</a> has a certain number of characters. In this case, you can use the built-in <a href="https://realpython.com/len-python-function/"><code>len()</code></a> function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">"Pythonista"</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10</span>
  File <span class="nb">"&lt;input&gt;"</span>, line <span class="m">1</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">SyntaxError</span>: <span class="n">cannot assign to function call here.</span>
<span class="x">    Maybe you meant '==' instead of '='?</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, you use the wrong <a href="https://realpython.com/python-operators-expressions/">operator</a>. Instead of using the equality <a href="https://realpython.com/python-operators-expressions/#comparison-operators-and-expressions-in-python">comparison operator</a>, you use the <a href="https://realpython.com/python-assignment-operator/">assignment operator</a>. This code raises a <a href="https://realpython.com/invalid-syntax-python/"><code>SyntaxError</code></a>, which represents a syntax error as its name describes.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> In the above code, you’ll note how nicely the error message suggests a possible solution for correcting the code. Starting in version <a href="https://realpython.com/python310-new-features/">3.10</a>, the Python core developers have put a lot of effort into improving the <a href="https://realpython.com/python310-new-features/#better-error-messages">error messages</a> to make them more friendly and useful for debugging.</p>
</div>
<p>To fix the error, you need to localize the affected code and correct the syntax. This action will remove the error:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="s2">"Pythonista"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span>
<span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Now the code works correctly, and the <code>SyntaxError</code> is gone. So, your code won’t break, and your program will continue its normal execution.</p>
<p>There’s something to learn from the above example. You can fix errors, but you can’t <em>handle</em> them. In other words, if you have a syntax error like the one in the example, then you won’t be able to handle that error and make the code run. You need to correct the syntax.</p>
<p>On the other hand, <strong>exceptions</strong> are events that interrupt the execution of a program. As their name suggests, exceptions occur in <em>exceptional</em> situations that should or shouldn’t happen. So, to prevent your program from crashing after an exception, you must handle the exception with the appropriate exception-handling mechanism.</p>
<p>To better understand exceptions, say that you have a Python expression like <code>a + b</code>. This expression will work if <code>a</code> and <code>b</code> are both strings or <a href="https://realpython.com/python-numbers/">numbers</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="go">7</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this example, the code works correctly because <code>a</code> and <code>b</code> are both numbers. However, the expression raises an exception if <code>a</code> and <code>b</code> are of types that can’t be added together:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="s2">"4"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;input&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="w">    </span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="w">    </span><span class="pm">~~^~~</span>
<span class="gr">TypeError</span>: <span class="n">can only concatenate str (not "int") to str</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Because <code>a</code> is a string and <code>b</code> is a number, your code fails with a <code>TypeError</code> exception. Since there is no way to add text and numbers, your code has faced an exceptional situation.</p>
<p>Python uses classes to represent exceptions and errors. These classes are generically known as <strong>exceptions</strong>, regardless of what a concrete class represents, an exception or an error. Exception classes give us information about an <em>exceptional situation</em> and also <em>errors</em> detected during the program’s execution.</p>
<p>The first example in this section shows a syntax error in action. The <code>SyntaxError</code> class represents an error but it’s implemented as a Python exception. This could be confusing, but Python uses exception classes for both errors and exceptions.</p>
</div><h2><a href="https://realpython.com/python-built-in-exceptions/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-built-in-exceptions/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>How to Get the Most Out of PyCon US</title>
<link>https://realpython.com/pycon-guide/</link>
<guid>https://realpython.com/pycon-guide/</guid>
<content:encoded><![CDATA[
<div> PyCon US, Python language, tutorials, conference, sprints
<br />
PyCon US 是围绕Python语言的最重要的会议之一，分为教程、会议和冲刺三个阶段。在会议之前，你应该提前计划并准备好，浏览议程表，下载PyCon应用，提前一天办理入住手续并参加开幕酒会。会议期间，参加自己感兴趣的讲座，也不要错过冲刺活动。会议结束后，可以回顾自己学到的东西并做好总结。参加PyCon，不仅可以学到技术知识，还可以与其他Python爱好者交流经验，一定会有一个愉快的体验。
<br /><br />总结: PyCon US是围绕Python语言的重要会议，分为教程、会议和冲刺三个阶段。提前计划和准备，参加自己感兴趣的讲座，不要错过冲刺活动。愉快学习交流经验。 <div>
<div><p>Congratulations! You’re going to PyCon US!</p>
<p>Whether this is your first time or not, going to a conference full of people who love the same thing as you is always a fun experience. There’s so much more to PyCon than just a bunch of people talking about the Python language, and that can be intimidating for first-time attendees. This guide will help you navigate all there is to see and do at PyCon.</p>
<p><a href="https://us.pycon.org/2024/">PyCon US</a> is the biggest conference centered around the Python language. Originally launched in 2003, this conference has grown exponentially and has even spawned several other <a href="https://www.python.org/community/workshops/">PyCons and workshops around the world</a>.</p>
<p>Everyone who attends PyCon will have a different experience, and that’s what makes the conference truly unique. This guide is meant to help you, but you don’t need to follow it strictly.</p>
<p><strong>By the end of this article, you’ll know:</strong></p>
<ul>
<li>How PyCon consists of <strong>tutorials</strong>, <strong>conference</strong>, and <strong>sprints</strong></li>
<li>What to do <strong>before</strong> you go</li>
<li>What to do <strong>during</strong> PyCon</li>
<li>What to do <strong>after</strong> the event</li>
<li>How to have a <strong>great</strong> PyCon</li>
</ul>
<p>This guide will have links that are specific to PyCon 2024, but it should be useful for future PyCons as well.</p>
<div class="alert alert-warning">
<p><strong>Free Download:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-tricks-sample-pdf/">Get a sample chapter from Python Tricks: The Book</a> that shows you Python’s best practices with simple examples you can apply instantly to write more beautiful + Pythonic code.</p>
</div>
<h2 id="what-pycon-involves">What PyCon Involves<a class="headerlink" href="https://realpython.com/atom.xml#what-pycon-involves" title="Permanent link"></a></h2>
<p>Before considering how to get the most out of PyCon, it’s important to first understand what PyCon involves.</p>
<p>PyCon is broken up into three stages:</p>
<ol>
<li>
<p><strong>Tutorials:</strong> PyCon starts with two days of three-hour workshops, during which you get to learn in depth with instructors. These are great to go to since the class sizes are small, and you can ask questions of the instructors. You should consider going to at least one of these if you can, but they do have an additional cost of $150 per tutorial.</p>
</li>
<li>
<p><strong>Conference:</strong> Next, PyCon offers three days of talks. Each presentation lasts for thirty to forty-five minutes, and there are about five talks going on at a time, including a Spanish language charlas track. But that’s not all: there are also open spaces, sponsors, posters, lightning talks, dinners, and so much more.</p>
</li>
<li>
<p><strong>Sprints:</strong> During this stage, you can take what you’ve learned and apply it! This is a four-day exercise where people group up to work on various open-source projects related to Python. If you’ve got the time, going to one or more sprint days is a great way to practice what you’ve learned, become associated with an open-source project, and network with other smart and talented people. Learn more about sprints in this <a href="https://pycon.blogspot.com/2016/03/why-not-join-sprints-this-year-at-pycon.html">blog post</a> from an earlier year.</p>
</li>
</ol>
<p>Since most PyCon attendees go to the conference part, that’ll be the focus of this article. However, don’t let that deter you from attending the tutorials or sprints if you can!</p>
<p>You may even learn more technical skills by attending the tutorials rather than listening to the talks. The sprints are great for networking and applying the skills that you’ve already got, as well as learning new ones from the people you’ll be working with.</p>
<h2 id="what-to-do-before-you-go">What to Do Before You Go<a class="headerlink" href="https://realpython.com/atom.xml#what-to-do-before-you-go" title="Permanent link"></a></h2>
<p>In general, the more prepared you are for something, the better your experience will be. The same applies to PyCon.</p>
<p>It’s really helpful to plan and prepare ahead of time, which you’re already doing just by reading this article!</p>
<p>Look through the <a href="https://us.pycon.org/2024/schedule/talks/">talk schedule</a> and see which talks sound most interesting to you. This doesn’t mean you need to plan out all of the talks that you’re going to see, in every slot possible. But it helps to get an idea of which topics are going to be presented so that you can decide what you’re most interested in.</p>
<p>Getting the <a href="https://us.pycon.org/2024/attend/onsite/">PyCon US mobile app</a> will help you plan your schedule. This app lets you view the schedule for the talks and add reminders for the ones that you want to attend. If you’re having a hard time picking which talks to go to, you can come prepared with a question or problem that you need to solve. Doing this can help you focus on the topics that are important to you.</p>
<p>If you can, come a day early to check in and attend the opening reception. The line to check in on the first day is always long, so you’ll save time if you check in the day before. There’s also an opening reception that evening, so you can meet other attendees and speakers, as well as get a chance to check out the various sponsors and their booths.</p>
<p>If you’re brand-new to PyCon, the <a href="https://us.pycon.org/2024/events/newcomer-orientation/">Newcomer Orientation</a> can help you get caught up on what the conference involves and how you can participate.</p>
</div><h2><a href="https://realpython.com/pycon-guide/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/pycon-guide/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What Are CRUD Operations?</title>
<link>https://realpython.com/quizzes/crud-operations/</link>
<guid>https://realpython.com/quizzes/crud-operations/</guid>
<content:encoded><![CDATA[
<div> 关键词：CRUD operations, Python, concepts, techniques, quiz

总结：<br /><br />本文主要讨论了与CRUD操作相关的关键概念和技巧，通过这个测试，读者可以检验对这些内容的理解。在Python中，CRUD操作是非常常见且重要的，通过掌握相关技巧，可以更加高效地处理数据。在这个测试中，读者可以通过回顾关键概念和技巧来加深对CRUD操作的理解，希望读者能够通过这个测试提升自己的Python技能。CRUD操作包括创建(Create)、读取(Retrieve)、更新(Update)和删除(Delete)四个基本操作，是进行数据处理时必不可少的操作方式。通过不断练习和掌握相关技巧，读者可以在Python编程中更加游刃有余地进行CRUD操作。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/crud-operations/">CRUD Operations</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the key concepts and techniques related to CRUD operations. Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>HTML and CSS Foundations for Python Developers</title>
<link>https://realpython.com/courses/html-css-foundations/</link>
<guid>https://realpython.com/courses/html-css-foundations/</guid>
<content:encoded><![CDATA[
<div> HTML, CSS, Python, web development, websites

HTML和CSS是构建网站所必备的技能，Python程序员想要搭建网站必须掌握这两者。学习HTML和CSS可以让你更好地理解Django和Flask等Python web框架。即使你刚入门Python，掌握HTML和CSS也可以帮助你创建小型网站给朋友留下深刻印象。这个视频课程将教你如何构建基本的HTML文件、查看和检查HTML在浏览器中的显示、插入图片和页面链接、使用CSS样式网站、以可访问性为前提格式化HTML，并利用Python编写和解析HTML代码。<br /><br />总结: HTML和CSS是构建网站的基础，学习它们有助于理解Python web框架，通过本视频课程学习如何构建HTML文件、样式网站、并利用Python处理HTML代码。 <div>
<p>When you want to build websites as a Python programmer, there&rsquo;s no way around HTML and CSS.
Almost every website on the Internet is built with <strong>HTML markup</strong> to structure the page.
To make a website look nice, you can style HTML with <strong>CSS</strong>.</p>
<p>If you&rsquo;re interested in web development with Python, then knowing HTML and CSS will help you understand web frameworks like <strong>Django</strong> and <strong>Flask</strong> better.
But even if you&rsquo;re just getting started with Python, HTML and CSS can enable you to create small websites to impress your friends.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Structure a basic <strong>HTML</strong> file</li>
<li>View and inspect HTML in your <strong>browser</strong></li>
<li>Insert <strong>images</strong> and page <strong>links</strong></li>
<li>Style a website with <strong>CSS</strong></li>
<li>Format HTML with <strong>accessibility</strong> in mind</li>
<li>Use Python to <strong>write and parse</strong> HTML code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-14T14:00:00+00:00</pubDate>
</item>
<item>
<title>What Is the __pycache__ Folder in Python?</title>
<link>https://realpython.com/python-pycache/</link>
<guid>https://realpython.com/python-pycache/</guid>
<content:encoded><![CDATA[
<div> 缓存 文件夹  编译 字节码 导入 快速<br />
__pycache__ 文件夹是Python用来存储导入的模块的编译字节码的地方，以实现快速导入，从而加快脚本的启动时间。Python编译高级源代码为字节码，这使得解释器可以跳过重复步骤，节省时间。当你导入相同的模块多次时，Python会使用缓存的字节码和内存缓存机制，以减少导入模块的开销。通过测量从缓存加载模块与即时编译模块的导入时间差异，可以看到缓存的效果。总体来说，__pycache__文件夹的存在使得Python的模块导入更加高效。<br /><br />总结: <div>
<div><p>When you develop a self-contained Python script, you might not notice anything unusual about your directory structure. However, as soon as your project becomes more complex, you’ll often decide to extract parts of the functionality into additional <a href="https://realpython.com/python-modules-packages/">modules or packages</a>. That’s when you may start to see a <code>__pycache__</code> folder appearing out of nowhere next to your source files in seemingly random places:</p>
<div class="highlight"><pre><span></span><code>project/
│
├── mathematics/
│   │
<span class="hll">│   ├── __pycache__/
</span>│   │
│   ├── arithmetic/
│   │   ├── __init__.py
│   │   ├── add.py
│   │   └── sub.py
│   │
│   ├── geometry/
│   │   │
<span class="hll">│   │   ├── __pycache__/
</span>│   │   │
│   │   ├── __init__.py
│   │   └── shapes.py
│   │
│   └── __init__.py
│
└── calculator.py
</code></pre></div>
<p>Notice that the <code>__pycache__</code> folder can be present at different levels in your project’s directory tree when you have multiple subpackages nested in one another. At the same time, other packages or folders with your Python source files may not contain this mysterious cache directory.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To maintain a cleaner workspace, many <a href="https://realpython.com/python-ides-code-editors-guide/">Python IDEs and code editors</a> are configured out-of-the-box to hide the <code>__pycache__</code> folders from you, even if those folders exist on your file system.</p>
</div>
<p>You may encounter a similar situation after you clone a remote <a href="https://realpython.com/python-git-github-intro/">Git repository</a> with a Python project and run the underlying code. <strong>So, what causes the <code>__pycache__</code> folder to appear, and for what purpose?</strong></p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-pycache-code/">Click here to download the free sample code</a> that shows you how to work with the <strong>pycache</strong> folder in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “What Is the __pycache__ Folder in Python?” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-pycache/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What Is the __pycache__ Folder in Python?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/What-is-__pycache___Watermarked.0e2367687d70.jpg" style="background: #aae4b1;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-pycache/"><span class="my-0 h4">What Is the __pycache__ Folder in Python?</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll have the opportunity to test your knowledge of the __pycache__ folder, including when, where, and why Python creates these folders.</p>
    </div>
  </div>

</div>

<h2 id="in-short-it-makes-importing-python-modules-faster">In Short: It Makes Importing Python Modules Faster<a class="headerlink" href="https://realpython.com/atom.xml#in-short-it-makes-importing-python-modules-faster" title="Permanent link"></a></h2>
<p>Even though Python is an <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreted programming language</a>, its interpreter doesn’t operate directly on your Python code, which would be very slow. Instead, when you <a href="https://realpython.com/run-python-scripts/">run a Python script</a> or <a href="https://realpython.com/python-import/">import</a> a Python module, the interpreter compiles your high-level Python source code into <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a>, which is an intermediate binary representation of the code.</p>
<p>This bytecode enables the interpreter to skip recurring steps, such as <a href="https://realpython.com/cpython-source-code-guide/#lexing-and-parsing">lexing and parsing</a> the code into an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> and validating its correctness every time you run the same program. As long as the underlying source code hasn’t changed, Python can reuse the <a href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate representation</a>, which is immediately ready for execution. This saves time, speeding up your script’s startup time.</p>
<p>Remember that while loading the compiled bytecode from <code>__pycache__</code> makes Python modules import faster, it doesn’t affect their execution speed!</p>
<div class="card mb-3" id="collapse_cardd97415">
<div class="card-header border-0">
<p class="m-0">
    <button class="btn w-100"><span class="float-left">Bytecode vs Machine Code</span><span class="float-right text-muted">Show/Hide</span></button>
  </p>
</div>
<div class="collapse js-collapsible-section" id="collapsed97415">
<div class="card-body">
<p>Why bother with bytecode at all instead of compiling the code straight to the low-level <a href="https://en.wikipedia.org/wiki/Machine_code">machine code</a>? While machine code is what executes on the hardware, providing the ultimate performance, it’s not as <em>portable</em> or quick to produce as bytecode.</p>
<p>Machine code is a set of binary instructions understood by your specific CPU architecture, wrapped in a container format like <a href="https://en.wikipedia.org/wiki/.exe">EXE</a>, <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>, or <a href="https://en.wikipedia.org/wiki/Mach-O">Mach-O</a>, depending on the operating system. In contrast, bytecode provides a platform-independent abstraction layer and is typically quicker to compile.</p>
</div>
</div>
</div>
<p>Python uses local <code>__pycache__</code> folders to store the compiled bytecode of <strong>imported modules</strong> in your project. On subsequent runs, the interpreter will try to load precompiled versions of modules from these folders, provided they’re up-to-date with the corresponding source files. Note that this <a href="https://realpython.com/lru-cache-python/">caching</a> mechanism only gets triggered for modules you <em>import</em> in your code rather than executing as scripts in the terminal.</p>
<p>In addition to this <strong>on-disk bytecode caching</strong>, Python keeps an <strong>in-memory cache of modules</strong>, which you can access through the <a href="https://docs.python.org/3/library/sys.html#sys.modules"><code>sys.modules</code></a> dictionary. It ensures that when you import the same module multiple times from different places within your program, Python will use the already imported module without needing to reload or recompile it. Both mechanisms work together to reduce the overhead of importing Python modules.</p>
<p>Next, you’re going to find out exactly how much faster Python loads the cached bytecode as opposed to compiling the source code on the fly when you import a module.</p>
<h2 id="how-much-faster-is-loading-modules-from-cache">How Much Faster Is Loading Modules From Cache?<a class="headerlink" href="https://realpython.com/atom.xml#how-much-faster-is-loading-modules-from-cache" title="Permanent link"></a></h2>
<p>The caching happens behind the scenes and usually goes unnoticed since Python is quite rapid at compiling the bytecode. Besides, unless you often run short-lived Python scripts, the compilation step remains insignificant when compared to the total execution time. That said, without caching, the overhead associated with bytecode compilation could add up if you had lots of modules and imported them many times over.</p>
<p>To measure the difference in <strong>import time</strong> between a cached and uncached module, you can pass the <a href="https://realpython.com/python37-new-features/#developer-tricks"><code>-X importtime</code></a> option to the <code>python</code> command or set the equivalent <a href="https://docs.python.org/3.7/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME"><code>PYTHONPROFILEIMPORTTIME</code></a> environment variable. When this option is enabled, Python will display a table summarizing how long it took to import each module, including the cumulative time in case a module depends on other modules.</p>
<p>Suppose you had a <code>calculator.py</code> script that imports and calls a utility <a href="https://realpython.com/defining-your-own-python-function/">function</a> from a local <code>arithmetic.py</code> module:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">calculator.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">from</span> <span class="nn">arithmetic</span> <span class="kn">import</span> <span class="n">add</span>

<span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The imported module defines a single function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">arithmetic.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>As you can see, the main script delegates the addition of two numbers, three and four, to the <code>add()</code> function imported from the <code>arithmetic</code> module.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Even though you use the <code>from ... import</code> syntax, which only brings the specified symbol into your current <a href="https://realpython.com/python-namespaces-scope/">namespace</a>, Python reads and compiles the entire module anyway. Moreover, <a href="https://www.flake8rules.com/rules/F401.html">unused imports</a> would also trigger the compilation.</p>
</div>
<p>The first time you run your script, Python compiles and saves the bytecode of the module you imported into a local <code>__pycache__</code> folder. If such a folder doesn’t already exist, then Python automatically creates one before moving on. Now, when you execute your script again, Python should find and load the cached bytecode as long as you didn’t alter the associated source code.</p>
</div><h2><a href="https://realpython.com/python-pycache/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-pycache/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-13T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #204: Querying OpenStreetMaps via API &amp; Lazy Evaluation in Python</title>
<link>https://realpython.com/podcasts/rpp/204/</link>
<guid>https://realpython.com/podcasts/rpp/204/</guid>
<content:encoded><![CDATA[
<div> APIs, Python, OpenStreetMap, Practicing, Christopher Trudeau
总结:<br />
本文介绍了如何使用Python与APIs进行交互，主要是通过OpenStreetMap的数据来探索地球。Christopher Trudeau分享了本周的PyCoder's Weekly文章和项目，让读者有机会增加与APIs在Python中的实践经验。通过阅读本文，读者可以学习如何利用APIs和Python来获取数据并进行地理信息的探索。Christopher Trudeau的项目和文章也为读者提供了更多学习和实践的机会。 <div>
<p>Would you like to get more practice working with APIs in Python? How about exploring the globe using the data from OpenStreetMap? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-10T12:00:00+00:00</pubDate>
</item>
<item>
<title>PyTorch vs TensorFlow for Your Python Deep Learning Project</title>
<link>https://realpython.com/pytorch-vs-tensorflow/</link>
<guid>https://realpython.com/pytorch-vs-tensorflow/</guid>
<content:encoded><![CDATA[
<div> PyTorch TensorFlow Python deep learning <br />
PyTorch和TensorFlow是两个流行的Python深度学习库，它们在数据的图形数值计算方面相似，但有一些区别。TensorFlow是由Google开发的，拥有庞大的用户群体和生产级别的特点。TensorFlow 2.0引入了即时执行，使得代码更易编写和执行。相比之下，PyTorch更灵活且易于调试，操作更直观。选择合适的库取决于项目需求，TensorFlow适合用于生产环境和大规模部署，而PyTorch适合对模型进行实验和迭代。总体而言，两者都有其优势和适用范围，根据具体情况进行选择即可。 <br /><br />总结: <br />PyTorch和TensorFlow是两个流行的Python深度学习库，TensorFlow适合生产环境和大规模部署，PyTorch更适合实验和迭代。 <div>
<div><p>PyTorch vs TensorFlow: What’s the difference? Both are open-source Python libraries that use graphs to perform numerical computations on data in deep learning applications. Both are used extensively in academic research and commercial code. Both are extended by a variety of APIs, cloud computing platforms, and model repositories.</p>
<p>If they’re so similar, then how do you decide which one is best for your project?</p>
<p><strong>In this tutorial, you’ll learn:</strong></p>
<ul>
<li>What the differences are between <strong>PyTorch</strong> and <strong>TensorFlow</strong></li>
<li>What <strong>tools</strong> and <strong>resources</strong> are available for each</li>
<li>How to choose the <strong>best option</strong> for your specific use case</li>
</ul>
<p>You’ll start by taking a close look at both platforms, beginning with the slightly older TensorFlow. Then, you’ll explore PyTorch and some considerations to help you determine which choice is best for your project. Let’s get started!</p>
<div class="alert alert-warning">
<p><strong>Get Your Decision Guide:</strong> <a class="alert-link" href="https://realpython.com/bonus/pytorch-vs-tensorflow-update-pdf/">Click here to download the free decision guide</a> that will help you choose between PyTorch and TensorFlow for your Python deep learning project.</p>
</div>
<h2 id="what-is-tensorflow">What Is TensorFlow?<a class="headerlink" href="https://realpython.com/atom.xml#what-is-tensorflow" title="Permanent link"></a></h2>
<p>TensorFlow was developed by Google and released as open-source in 2015. It grew out of Google’s homegrown machine learning software, which was refactored and optimized for use in production.</p>
<p>The name “TensorFlow” describes how you organize and perform operations on data. The basic data structure for both TensorFlow and PyTorch is a <a href="https://en.wikipedia.org/wiki/Tensor">tensor</a>. When you use TensorFlow, you perform operations on the data in these tensors by building a <a href="https://www.quora.com/What-are-the-differences-between-Data-flow-model-and-State-machine-model">stateful dataflow graph</a>, kind of like a flowchart that remembers past events.</p>
<h3 id="who-uses-tensorflow">Who Uses TensorFlow?<a class="headerlink" href="https://realpython.com/atom.xml#who-uses-tensorflow" title="Permanent link"></a></h3>
<p>TensorFlow has a reputation for being a production-grade deep learning library. It has a large and active user base and a proliferation of official and third-party tools and platforms for training, deploying, and serving models.</p>
<p>After PyTorch was released in 2016, TensorFlow declined in popularity. But in late 2019, Google released <a href="https://blog.tensorflow.org/2019/09/tensorflow-20-is-now-available.html">TensorFlow 2.0</a>—a major update that simplified the library and made it more user-friendly, leading to renewed interest among the machine learning community. </p>
<h3 id="code-style-and-function">Code Style and Function<a class="headerlink" href="https://realpython.com/atom.xml#code-style-and-function" title="Permanent link"></a></h3>
<p>In TensorFlow 2.0, you can use <a href="https://www.tensorflow.org/guide/eager">eager execution</a>, which is how Python normally works. Eager execution evaluates operations immediately, so you can write your code using Python control flow rather than graph control flow. To see this in action, you’ll take a look at how you would multiply two tensors using both Tensorflow 1.0 and 2.0.</p>
<p>To start, here’s an example of how to multiply tensors using TensorFlow 2.0. With eager execution, all you need is <code>tf.math.multiply()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">1.</span><span class="p">],</span> <span class="p">[</span><span class="mf">3.</span><span class="p">],</span> <span class="p">[</span><span class="mf">5.</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>
<span class="go">&lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=</span>
<span class="go">array([[ 2.,  4.,  6.],</span>
<span class="go">       [ 6., 12., 18.],</span>
<span class="go">       [10., 20., 30.]], dtype=float32)&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>In this code, you declare your tensors using Python’s list notation, and <a href="https://www.tensorflow.org/api_docs/python/tf/math/multiply"><code>tf.math.multiply()</code></a> executes the <strong>element-wise multiplication</strong> immediately when you call it.</p>
<p>Before TensorFlow 2.0, you had to manually stitch together an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a> by making <code>tf.*</code> API calls. You then had to pass a set of output tensors and input tensors to a <code>session.run()</code> call and manually compile the model. </p>
<p>A <code>Session</code> object is a <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session">class for running TensorFlow operations</a>. It contains the environment in which <code>Tensor</code> objects are evaluated and <code>Operation</code> objects are executed, and it can own resources like <code>tf.Variable</code> objects. The most common way to use a <code>Session</code> is as a <a href="https://realpython.com/python-with-statement/">context manager</a>.</p>
<p>To see how a <code>Session</code> is used in this way, here’s an example of how you multiply two tensors using the old TensorFlow 1.0 method:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">disable_eager_execution</span><span class="p">()</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"x"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"y"</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">multiply</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">v1</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">m</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
<span class="gp">... </span>        <span class="n">multiply</span><span class="p">,</span> <span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">[[</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">]],</span> <span class="n">y</span><span class="p">:</span> <span class="p">[[</span><span class="mf">1.</span><span class="p">],</span> <span class="p">[</span><span class="mf">3.</span><span class="p">],</span> <span class="p">[</span><span class="mf">5.</span><span class="p">]]}</span>
<span class="gp">... </span>    <span class="p">)</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="go">[[ 2.  4.  6.]</span>
<span class="go"> [ 6. 12. 18.]</span>
<span class="go"> [10. 20. 30.]]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This code uses TensorFlow 2.x’s <code>tf.compat</code> API to access TensorFlow 1.x methods and disable eager execution. </p>
<p>You first declare the input tensors <code>x</code> and <code>y</code> using <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/placeholder"><code>tf.compat.v1.placeholder</code></a> tensor objects. Then you define the operation to perform on them. Note that nothing has been calculated at this point.</p>
<p>Next, using the <code>tf.Session</code> object as a context manager, you create a container to encapsulate the runtime environment and do the multiplication by feeding real values into the placeholders with a <code>feed_dict</code>. Finally, still inside the session, you <a href="https://realpython.com/python-print/"><code>print()</code></a> the result.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> Keep in mind that because TensorFlow 1.0 has been deprecated, it probably isn’t the best option for your future projects, and you should stick with using TensorFlow 2.0.</p>
</div>
</div><h2><a href="https://realpython.com/pytorch-vs-tensorflow/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/pytorch-vs-tensorflow/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>Flattening a List of Lists in Python</title>
<link>https://realpython.com/courses/flatten-list-of-lists/</link>
<guid>https://realpython.com/courses/flatten-list-of-lists/</guid>
<content:encoded><![CDATA[
<div> 列表、嵌套、扁平化、Python、数据处理<br />
本视频课程将教你如何在Python中将嵌套列表扁平化成一维列表。扁平化列表是指将多维列表（如矩阵）转换为一维列表的操作。在处理数据时，这是一种常见的操作。通过学习本课程，你可以掌握如何将嵌套列表中的数据转换为一维列表，从而更高效地处理数据。总结: 本视频课程教授如何在Python中对嵌套列表进行扁平化操作，将多维列表转换为一维列表，提高数据处理效率。 <div>
<p>Sometimes, when you&rsquo;re working with data, you may have the data as a list of nested lists. A common operation is to <strong>flatten</strong> this data into a one-dimensional list in Python. Flattening a list involves converting a multidimensional list, such as a matrix, into a one-dimensional list.</p>
<p>In this video course, you&rsquo;ll learn how to do that in Python.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-07T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News: What's New From April 2024</title>
<link>https://realpython.com/python-news-april-2024/</link>
<guid>https://realpython.com/python-news-april-2024/</guid>
<content:encoded><![CDATA[
<div> Python, release, features, improvements, PyCon US 2024
总结：<br /><br />Python的核心开发团队在2024年4月发布了3.13.0a6和3.12.3版本。3.13.0a6带来了多项新特性、改进和优化，是最后一个alpha版发布，不应用于生产环境。3.12.3版本有300多个提交用于安全改进和bug修复。PyCon US 2024正在征集志愿者。Python 3.13带来了默认行为、性能改进基础、垃圾回收器优化、内存使用减少等新特性。标准库有新的模块和计划移除许多废弃模块和类。详细变更列表可在文档中查看。下一个Python 3.13预发布版本将于5月7日发布。 <div>
<div><p>In April 2024, Python’s core development team released versions <strong>3.13.0a6</strong> and <strong>3.12.3</strong> of the language! The former received several exciting features, improvements, and optimizations, while the latter got more than 300 commits for security improvements and bug fixes.</p>
<p>The 3.13.0a6 release is the last alpha release. In the first half of May, the code will be frozen and won’t accept new features. Note that 3.13.0a6 is a <a href="https://realpython.com/python-pre-release/">pre-release</a>, so you shouldn’t use it for production environments. However, it provides a great way to try out some new and exciting language features.</p>
<p>There is also great news about PyCon US 2024, which opened its call for volunteers.</p>
<p>Let’s dive into the most exciting <strong>Python news</strong> from April 2024!</p>
<h2 id="python-3130-alpha-6-and-3123-arrive">Python 3.13.0 Alpha 6 and 3.12.3 Arrive<a class="headerlink" href="https://realpython.com/atom.xml#python-3130-alpha-6-and-3123-arrive" title="Permanent link"></a></h2>
<p>This April, Python <a href="https://blog.python.org/2024/04/python-3123-and-3130a6-released.html">released</a> its sixth <strong>alpha preview release</strong>, 3.13.0a6. This version is the last alpha release, as Python 3.13 will enter the <strong>beta phase</strong> on May 7. Once in beta, it won’t accept any new features. </p>
<p>Python 3.13 brings the following new features:</p>
<ul>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#improved-error-messages">Colorized exception tracebacks</a> are now the default behavior in the interactive interpreter or <a href="https://realpython.com/python-repl/">REPL</a>.</li>
<li>An <a href="https://docs.python.org/dev/whatsnew/3.13.html#experimental-jit-compiler">experimental JIT compiler</a> that provides the groundwork for significant performance improvements.</li>
<li>The garbage collector is now <a href="https://docs.python.org/dev/whatsnew/3.13.html#incremental-garbage-collection">incremental</a>, which should make the garbage collection process more efficient.</li>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#other-language-changes">Stripped indentation in docstrings</a> reduces memory usage and the size of <code>.pyc</code> files.</li>
</ul>
<p>Meanwhile, the standard library comes with these new features:</p>
<ul>
<li>The <a href="https://docs.python.org/dev/library/dbm.html"><code>dbm</code></a> module has a new <a href="https://docs.python.org/dev/whatsnew/3.13.html#id1"><code>dbm.sqlite3</code></a> backend for creating new files.</li>
<li><a href="https://peps.python.org/pep-0594/">PEP 594</a> scheduled removals of many deprecated modules: <code>aifc</code>, <code>audioop</code>, <code>chunk</code>, <code>cgi</code>, <code>cgitb</code>, <code>crypt</code>, <code>imghdr</code>, <code>mailcap</code>, <code>msilib</code>, <code>nis</code>, <code>nntplib</code>, <code>ossaudiodev</code>, <code>pipes</code>, <code>sndhdr</code>, <code>spwd</code>, <code>sunau</code>, <code>telnetlib</code>, <code>uu</code>, <code>xdrlib</code>, <code>lib2to3</code>.</li>
<li>Many deprecated classes, functions, and methods (dead batteries) were <a href="https://docs.python.org/dev/whatsnew/3.13.html#removed">removed</a>.</li>
<li><a href="https://docs.python.org/dev/whatsnew/3.13.html#deprecated">New deprecations</a> appeared, and many of them were scheduled for removal in Python 3.15 or 3.16.</li>
</ul>
<p>For a detailed list of changes, additions, and removals, you can check out the <a href="https://docs.python.org/3.12/whatsnew/changelog.html#python-3-13-0-alpha-6">Changelog</a> document. The next pre-release of Python 3.13 will be 3.13.0b1, which is currently scheduled for May 7.</p>
</div><h2><a href="https://realpython.com/python-news-april-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-april-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-06T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #203: Embarking on a Relaxed and Friendly Python Coding Journey</title>
<link>https://realpython.com/podcasts/rpp/203/</link>
<guid>https://realpython.com/podcasts/rpp/203/</guid>
<content:encoded><![CDATA[
<div> Python、coding、book、author、projects
<br />
作者Stephen Gruppetta的新书"The Python Coding Book"着重介绍了Python编程技巧，帮助读者提高Python编程水平。在学习Python过程中，很多人会感到压力，但建议通过编写小程序或项目来继续编码之旅。本书为读者提供了实用的Python编程技巧和指导，有助于他们更有效地学习和应用Python语言。总之，本书为想要提升Python编程技能的人提供了宝贵的学习资源和指导。总结： <div>
<p>Do you get stressed while trying to learn Python? Do you prefer to build small programs or projects as you continue your coding journey? This week on the show, Real Python author Stephen Gruppetta is here to talk about his new book, "The Python Coding Book."</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: The Python calendar Module</title>
<link>https://realpython.com/quizzes/python-calendar-module/</link>
<guid>https://realpython.com/quizzes/python-calendar-module/</guid>
<content:encoded><![CDATA[
<div> calendar module, functions, methods, quiz, Python <br />
<br />
总结: calendar模块是Python中用来处理日历的模块，提供了许多方法和函数可以帮助我们处理日期和时间。通过这篇文章，我们学习了如何使用calendar模块，并通过一个测验来检验理解。测验中涉及了calendar模块的基本功能和方法，帮助我们加深对其的理解。通过这篇文章，我们复习了calendar模块的重要功能，并且可以更加熟练地使用它。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/python-calendar-module/">creating calendars in Python</a> using the <code>calendar</code> module.</p>
<p>By working through this quiz, you&rsquo;ll revisit the fundamental functions and methods provided by the <code>calendar</code> module.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-02T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Sequences: A Comprehensive Guide</title>
<link>https://realpython.com/python-sequences/</link>
<guid>https://realpython.com/python-sequences/</guid>
<content:encoded><![CDATA[
<div> Python, sequence, characteristics, operations, methods

Python中的序列是一种数据结构，包含按顺序排列的项目，可以通过整数索引访问每个项目。序列具有长度，可以使用len()函数查找其元素数量。序列的元素可以根据其在序列中的位置使用整数索引访问。大多数序列具有特殊方法.__iter__()、.__len__()和.__getitem__()。这些方法为序列提供了迭代、长度和访问元素的功能。映射不是序列，因为映射不能通过整数索引访问元素。序列支持切片操作，可以通过索引范围获取子序列。总结: Python序列是包含按顺序排列的项目的数据结构，可以通过整数索引访问每个项目，具有特殊方法提供迭代、长度和访问元素功能，支持切片操作。 <div>
<div><p>A phrase you’ll often hear is that everything in Python is an object, and every object has a type. This points to the importance of data types in Python. However, often what an object can do is more important than what it is. So, it’s useful to discuss <em>categories</em> of data types and one of the main categories is Python’s <strong>sequence</strong>.</p>
<p><strong>In this tutorial, you’ll learn about:</strong></p>
<ul>
<li>Basic <strong>characteristics of a sequence</strong></li>
<li><strong>Operations</strong> that are <strong>common to most sequences</strong></li>
<li><strong>Special methods</strong> associated with sequences</li>
<li>Abstract base classes <strong><code>Sequence</code> and <code>MutableSequence</code></strong></li>
<li><strong>User-defined mutable and immutable sequences</strong> and how to create them</li>
</ul>
<p>This tutorial assumes that you’re familiar with <a href="https://realpython.com/python-data-types/">Python’s built-in data types</a> and with the <a href="https://realpython.com/python3-object-oriented-programming/">basics of object-oriented programming</a>.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-sequences-code/">Click here to download the free sample code</a> that you’ll use to learn about Python sequences in this comprehensive guide.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python Sequences: A Comprehensive Guide” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-sequences/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python Sequences: A Comprehensive Guide" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-Sequences_Watermarked.988c75bb60be.jpg" style="background: #e5c5ac;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-sequences/"><span class="my-0 h4">Python Sequences: A Comprehensive Guide</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of sequences in Python. You'll revisit the basic characteristics of a sequence, operations common to most sequences, special methods associated with sequences, and how to create user-defined mutable and immutable sequences.</p>
    </div>
  </div>

</div>

<h2 id="building-blocks-of-python-sequences">Building Blocks of Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#building-blocks-of-python-sequences" title="Permanent link"></a></h2>
<p>It’s likely you used a Python sequence the last time you wrote Python code, even if you don’t know it. The term <em>sequence</em> doesn’t refer to a specific data type but to a category of data types that share common characteristics.</p>
<h3 id="characteristics-of-python-sequences">Characteristics of Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#characteristics-of-python-sequences" title="Permanent link"></a></h3>
<p>A <a href="https://docs.python.org/3/glossary.html#term-sequence">sequence</a> is a data structure that contains items arranged in order, and you can access each item using an integer index that represents its position in the sequence. You can always find the length of a sequence. Here are some examples of sequences from Python’s basic built-in data types:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># List</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"USA"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">,</span> <span class="s2">"UK"</span><span class="p">,</span> <span class="s2">"Norway"</span><span class="p">,</span> <span class="s2">"Malta"</span><span class="p">,</span> <span class="s2">"India"</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">USA</span>
<span class="go">Canada</span>
<span class="go">UK</span>
<span class="go">Norway</span>
<span class="go">Malta</span>
<span class="go">India</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'USA'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Tuple</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span> <span class="o">=</span> <span class="s2">"USA"</span><span class="p">,</span> <span class="s2">"Canada"</span><span class="p">,</span> <span class="s2">"UK"</span><span class="p">,</span> <span class="s2">"Norway"</span><span class="p">,</span> <span class="s2">"Malta"</span><span class="p">,</span> <span class="s2">"India"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">USA</span>
<span class="go">Canada</span>
<span class="go">UK</span>
<span class="go">Norway</span>
<span class="go">Malta</span>
<span class="go">India</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">countries</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'USA'</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Strings</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country</span> <span class="o">=</span> <span class="s2">"India"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">country</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">I</span>
<span class="go">n</span>
<span class="go">d</span>
<span class="go">i</span>
<span class="go">a</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
<span class="go">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">'I'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Lists, tuples, and strings are among Python’s most basic data types. Even though they’re different types with distinct characteristics, they have some common traits. You can summarize the characteristics that define a Python sequence as follows:</p>
<ul>
<li>A sequence is an <a href="https://realpython.com/python-iterators-iterables/">iterable</a>, which means you can iterate through it.</li>
<li>A sequence has a length, which means you can pass it to <a href="https://realpython.com/len-python-function/"><code>len()</code></a> to get its number of elements.</li>
<li>An element of a sequence can be accessed based on its position in the sequence using an integer index. You can use the square bracket notation to index a sequence.</li>
</ul>
<p>There are other built-in data types in Python that also have all of these characteristics. One of these is the <a href="https://realpython.com/python-range/"><code>range</code> object</a>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">&lt;class 'range'&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">6</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="go">10</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">5</span>
<span class="go">6</span>
<span class="go">7</span>
<span class="go">8</span>
<span class="go">9</span>
<span class="go">10</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>You can iterate through a <code>range</code> object, which makes it iterable. You can also find its length using <code>len()</code> and fetch items through indexing. Therefore, a <code>range</code> object is also a sequence.</p>
<p>You can also verify that <a href="https://realpython.com/python-mutable-vs-immutable-types/"><code>bytes</code> and <code>bytearray</code> objects</a>, two of Python’s built-in data structures, are also sequences. Both are sequences of integers. A <code>bytes</code> sequence is immutable, while a <code>bytearray</code> is mutable.</p>
<h3 id="special-methods-associated-with-python-sequences">Special Methods Associated With Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#special-methods-associated-with-python-sequences" title="Permanent link"></a></h3>
<p>In Python, the key characteristics of a data type are determined using <a href="https://realpython.com/python-magic-methods/">special methods</a>, which are defined in the class definitions. The special methods associated with the properties of sequences are the following:</p>
<ul>
<li><strong><code>.__iter__()</code></strong>: This special method makes an object iterable using Python’s preferred iteration protocol. However, it’s possible for a class without an <code>.__iter__()</code> special method to create iterable objects if the class has a <code>.__getitem__()</code> special method that supports iteration. Most sequences have an <code>.__iter__()</code> special method, but it’s possible to have a sequence without this method.</li>
<li><strong><code>.__len__()</code></strong>: This special method defines the length of an object, which is normally the number of elements contained within it. The <code>len()</code> built-in function calls an object’s <code>.__len__()</code> special method. Every sequence has this special method.</li>
<li><strong><code>.__getitem__()</code></strong>: This special method enables you to access an item from a sequence. The square brackets notation can be used to fetch an item. The expression <code>countries[0]</code> is equivalent to <code>countries.__getitem__(0)</code>. For sequences, <code>.__getitem__()</code> should accept integer arguments starting from zero. Every sequence has this special method. This method can also ensure an object is iterable if the <code>.__iter__()</code> special method is missing.</li>
</ul>
<p>Therefore, all sequences have a <code>.__len__()</code> and a <code>.__getitem__()</code> special method and most also have <code>.__iter__()</code>.</p>
<p>However, it’s not sufficient for an object to have these special methods to be a sequence. For example, many mappings also have these three methods but mappings aren’t sequences.</p>
<p>A dictionary is an example of a mapping. You can find the length of a dictionary and iterate through its keys using a <code>for</code> loop or other iteration techniques. You can also fetch an item from a dictionary using the square brackets notation.</p>
<p>This characteristic is defined by <code>.__getitem__()</code>. However, <code>.__getitem__()</code> needs arguments that are dictionary keys and returns their matching values. You can’t index a dictionary using integers that refer to an item’s position in the dictionary. Therefore, dictionaries are not sequences.</p>
<h2 id="slicing-in-python-sequences">Slicing in Python Sequences<a class="headerlink" href="https://realpython.com/atom.xml#slicing-in-python-sequences" title="Permanent link"></a></h2>
</div><h2><a href="https://realpython.com/python-sequences/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-sequences/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-05-01T14:00:00+00:00</pubDate>
</item>
<item>
<title>Working With Global Variables in Python Functions</title>
<link>https://realpython.com/courses/global-variables-in-python-functions/</link>
<guid>https://realpython.com/courses/global-variables-in-python-functions/</guid>
<content:encoded><![CDATA[
<div> global variables, Python, functions, access, modify
<br />
在Python中理解全局变量及其工作原理，直接在函数内部访问全局变量，使用global关键字在函数内部修改和创建全局变量，使用globals()函数在函数内部访问、创建和修改全局变量，探讨避免在Python代码中使用全局变量的策略。
<br /><br />
总结: 在Python中，全局变量可以在整个程序中进行数据共享，但在函数内部使用全局变量时需要注意对其值进行访问和修改的区分。本课程将帮助您深入了解全局变量在Python中的工作原理，并提供了多种方法来访问、创建和修改全局变量，同时探讨了避免在Python代码中过度使用全局变量的策略。 <div>
<p>A <strong>global variable</strong> is a variable that you can use from any part of a program, including within <strong>functions</strong>. Using global variables inside your Python functions can be tricky. You&rsquo;ll need to differentiate between accessing and changing the values of the target global variable if you want your code to work correctly.</p>
<p>Global variables can play a fundamental role in many software projects because they enable data sharing across an entire program. However, you should use them judiciously to avoid issues.</p>
<p><strong>In this video course, you&rsquo;ll:</strong></p>
<ul>
<li>Understand <strong>global variables</strong> and how they work in Python</li>
<li><strong>Access</strong> global variables within your Python functions directly</li>
<li><strong>Modify</strong> and <strong>create</strong> global variables within functions using the <strong><code>global</code> keyword</strong></li>
<li><strong>Access</strong>, <strong>create</strong>, and <strong>modify</strong> global variables within your functions with the <strong><code>globals()</code> function</strong></li>
<li>Explore strategies to <strong>avoid using global variables</strong> in Python code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-30T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python's unittest: Writing Unit Tests for Your Code</title>
<link>https://realpython.com/python-unittest/</link>
<guid>https://realpython.com/python-unittest/</guid>
<content:encoded><![CDATA[
<div> unittest, TestCase class, assert methods, fixtures, TestSuite class

unittest是Python自带的测试框架，提供了TestCase类、assert方法、fixtures和TestSuite类等功能。TestCase类用于编写单元测试，通过编写以test开头的方法来测试代码的各种输入和结果。assert方法用于断言测试结果是否符合预期。fixtures用于处理测试前后的环境设置和清理。TestSuite类用于组织测试用例。通过这些功能，可以编写一致的单元测试，确保代码质量和健壮性。unittest可从命令行执行测试，并支持发现和运行测试套件。 <div>
<div><p>The Python <a href="https://docs.python.org/3/library/index.html">standard library</a> ships with a testing framework named <strong><code>unittest</code></strong>, which you can use to write automated tests for your code. The <code>unittest</code> package has an object-oriented approach where test cases derive from a base class, which has several useful methods.</p>
<p>The framework supports many features that will help you write consistent unit tests for your code. These features include test cases, fixtures, test suites, and test discovery capabilities.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Write <code>unittest</code> tests with the <strong><code>TestCase</code></strong> class</li>
<li>Explore the <strong>assert</strong> methods that <code>TestCase</code> provides</li>
<li>Use <code>unittest</code> from the <strong>command line</strong></li>
<li>Group test cases using the <strong><code>TestSuite</code></strong> class</li>
<li>Create <strong>fixtures</strong> to handle <strong>setup</strong> and <strong>teardown</strong> logic</li>
</ul>
<p>To get the most out of this tutorial, you should be familiar with some important Python concepts, such as <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>, <a href="https://realpython.com/inheritance-composition-python/">inheritance</a>, and <a href="https://realpython.com/python-assert-statement/">assertions</a>. Having a good understanding of code <a href="https://realpython.com/python-testing/">testing</a> is a plus.</p>
<div class="alert alert-warning">
<p><strong>Free Bonus:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-unittest-code/">Click here to download the free sample code</a> that shows you how to use Python’s unittest to write tests for your code.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Python's unittest: Writing Unit Tests for Your Code” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-unittest/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="Python's unittest: Writing Unit Tests for Your Code" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Python-unittest_Watermarked.f6549bba7422.jpg" style="background: #aadfe5;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-unittest/"><span class="my-0 h4">Python's unittest: Writing Unit Tests for Your Code</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of Python testing with the unittest framework from the standard library. With this knowledge, you'll be able to create basic tests, execute them, and find bugs before your users do.</p>
    </div>
  </div>

</div>

<h2 id="testing-your-python-code">Testing Your Python Code<a class="headerlink" href="https://realpython.com/atom.xml#testing-your-python-code" title="Permanent link"></a></h2>
<p><strong>Code testing</strong> or <a href="https://en.wikipedia.org/wiki/Software_testing">software testing</a> is a fundamental part of a modern software development cycle. Through code testing, you can verify that a given software project works as expected and fulfills its requirements. Testing enforces code quality and robustness.</p>
<p>You’ll do code testing during the development stage of an application or project. You’ll write tests that isolate sections of your code and verify its correctness. A well-written battery or suite of tests can also serve as documentation for the project at hand.</p>
<p>You’ll find several different concepts and techniques around testing. Most of them surpass the scope of this tutorial. However, <a href="https://en.wikipedia.org/wiki/Unit_testing">unit test</a> is an important and relevant concept. A unit test is a test that operates on an individual unit of software. A unit test aims to validate that the tested unit works as designed.</p>
<p>A <strong>unit</strong> is often a small part of a program that takes a few inputs and produces an output. <a href="https://realpython.com/defining-your-own-python-function/">Functions</a>, <a href="https://realpython.com/python-classes/#providing-behavior-with-methods">methods</a>, and other <a href="https://realpython.com/python-callable-instances/">callables</a> are good examples of units that you’d need to test.</p>
<p>In Python, there are several tools to help you write, organize, run, and automate your unit test. In the Python <a href="https://docs.python.org/3/library/index.html">standard library</a>, you’ll find two of these tools:</p>
<ol>
<li><code>doctest</code></li>
<li><code>unittest</code></li>
</ol>
<p>Python’s <code>doctest</code> module is a lightweight <a href="https://en.wikipedia.org/wiki/Test_automation#Framework_approach_in_automation">testing framework</a> that provides quick and straightforward <a href="https://en.wikipedia.org/wiki/Test_automation">test automation</a>. It can read the test cases from your project’s documentation and your code’s docstrings. This framework is shipped with the Python interpreter as part of the batteries-included philosophy.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into <code>doctest</code>, check out the <a href="https://realpython.com/python-doctest/">Python’s doctest: Document and Test Your Code at Once</a> tutorial.</p>
</div>
<p>The <code>unittest</code> <a href="https://realpython.com/python-modules-packages/#python-packages">package</a> is also a testing framework. However, it provides a more complete solution than <code>doctest</code>. In the following sections, you’ll learn and work with <a href="https://docs.python.org/3/library/unittest.html#module-unittest"><code>unittest</code></a> to create suitable unit tests for your Python code.</p>
<h2 id="getting-to-know-pythons-unittest">Getting to Know Python’s <code>unittest</code><a class="headerlink" href="https://realpython.com/atom.xml#getting-to-know-pythons-unittest" title="Permanent link"></a></h2>
<p>The <code>unittest</code> package provides a unit test framework inspired by <a href="https://en.wikipedia.org/wiki/JUnit">JUnit</a>, which is a unit test framework for the <a href="https://realpython.com/java-vs-python/">Java</a> language. The <code>unittest</code> framework is directly available in the standard library, so you don’t have to install anything to use this tool.</p>
<p>The framework uses an <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented</a> approach and supports some essential concepts that facilitate test creation, organization, preparation, and automation:</p>
<ul>
<li><strong>Test case</strong>: An individual unit of testing. It examines the output for a given input set.</li>
<li><strong>Test suite</strong>: A collection of test cases, test suites, or both. They’re grouped and executed as a whole.</li>
<li><strong>Test fixture</strong>: A group of actions required to set up an environment for testing. It also includes the teardown processes after the tests run.</li>
<li><strong>Test runner</strong>: A component that handles the execution of tests and communicates the results to the user.</li>
</ul>
<p>In the following sections, you’ll dive into using the <code>unittest</code> package to create test cases, suites of tests, fixtures, and, of course, run your tests.</p>
<h2 id="organizing-your-tests-with-the-testcase-class">Organizing Your Tests With the <code>TestCase</code> Class<a class="headerlink" href="https://realpython.com/atom.xml#organizing-your-tests-with-the-testcase-class" title="Permanent link"></a></h2>
<p>The <code>unittest</code> package defines the <code>TestCase</code> class, which is primarily designed for writing unit tests. To start writing your test cases, you just need to import the class and subclass it. Then, you’ll add methods whose names should begin with <code>test</code>. These methods will test a given unit of code using different inputs and check for the expected results.</p>
<p>Here’s a quick test case that tests the built-in <a href="https://realpython.com/python-absolute-value/"><code>abs()</code></a> function:</p>
</div><h2><a href="https://realpython.com/python-unittest/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-unittest/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-29T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #202: Pydantic Data Validation &amp; Python Web Security Practices</title>
<link>https://realpython.com/podcasts/rpp/202/</link>
<guid>https://realpython.com/podcasts/rpp/202/</guid>
<content:encoded><![CDATA[
<div> 验证, 验证, 数据, 安全, 开发者
总结:<br /><br />本文讨论了如何验证和验证Python网络应用程序中的数据。 作为开发者，应考虑使用工具和安全最佳实践来确保数据的准确性和安全性。 对数据进行验证和验证是确保应用程序安全和有效运行的关键步骤。 您可以使用各种工具和技术来验证用户输入并防止恶意数据输入。 开发者应当密切注意数据的来源，并实施适当的验证和验证规则以确保数据的完整性和安全性。 <div>
<p>How do you verify and validate the data coming into your Python web application? What tools and security best practices should you consider as a developer? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What Is the __pycache__ Folder in Python?</title>
<link>https://realpython.com/quizzes/python-pycache/</link>
<guid>https://realpython.com/quizzes/python-pycache/</guid>
<content:encoded><![CDATA[
<div> 关键词：Python项目，模块，包，__pycache__文件夹，维护

Python项目中随着代码的增长，通常会将代码组织成模块和包，以便更容易地进行维护和重用。在这个过程中，你会发现__pycache__文件夹突然出现在你的原始文件旁边，在各个位置上出现，有些让人感到意外。这个文件夹是Python的编译缓存文件夹，用于存储编译后的字节码，以提高程序的性能。虽然有时会让人感到突然，但它帮助加速Python程序的运行，并且不需要手动干预管理。要留意__pycache__文件夹的存在，以免误删或造成其他问题。整体来说，__pycache__文件夹在Python项目中起到一定的辅助作用，可以提高代码的执行效率。<br /><br />总结:Python项目中的模块和包的组织可以提高代码维护和重用。__pycache__文件夹存储编译后的字节码，加快程序运行速度。注意__pycache__文件夹的存在，以避免问题。 <div>
<p>As your Python project grows, you typically organize your code in modules and packages for easier maintenance and reusability. When you do that, you&rsquo;ll likely notice the sudden emergence of a <code>__pycache__</code> folder alongside your original files, popping up in various locations unexpectedly.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>What's Lazy Evaluation in Python?</title>
<link>https://realpython.com/python-lazy-evaluation/</link>
<guid>https://realpython.com/python-lazy-evaluation/</guid>
<content:encoded><![CDATA[
<div> lazy evaluation, expressions, eager evaluation, Python, examples

lazy evaluation是Python中的一种表达式处理方式，它延迟计算表达式的值直到真正需要这个值的时候。相反的是eager evaluation，即立即计算表达式的值。在Python中，一些表达式会立即计算，如使用加法运算符或调用标准函数；而另一些表达式会延迟计算，如使用range()函数生成的迭代器。延迟计算可以提高程序性能，减少内存占用，允许创建无限数据结构，并避免生成未使用的值。然而，延迟计算也会延迟错误的处理，使得调试变得更加困难。Python中的lazy evaluation提供了灵活性和效率的平衡。<br /><br />总结:lazy evaluation是Python中的一种表达式处理方式，可以延迟计算表达式的值，并提高程序性能。它可以通过range()函数等方式实现，允许创建无限数据结构，但可能会使调试更困难。 <div>
<div><p>Being lazy is not always a bad thing. Every line of code you write has at least one expression that Python needs to evaluate. Python lazy evaluation is when Python takes the lazy option and delays working out the value returned by an expression until that value is needed.</p>
<p>An <strong>expression</strong> in Python is a unit of code that evaluates to a value. Examples of expressions include object names, function calls, expressions with arithmetic operators, literals that create built-in object types such as lists, and more. However, not all statements are expressions. For example, <code>if</code> statements and <code>for</code> loop statements don’t return a value.</p>
<p>Python needs to evaluate every expression it encounters to use its value. In this tutorial, you’ll learn about the different ways Python evaluates these expressions. You’ll understand why some expressions are evaluated immediately, while others are evaluated later in the program’s execution. So, <strong>what’s lazy evaluation in Python?</strong></p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/python-lazy-evaluation-code/">Click here to download the free sample code</a> that shows you how to use lazy evaluation in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “What's Lazy Evaluation in Python?” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/python-lazy-evaluation/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="What's Lazy Evaluation in Python?" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/Eager-vs-Lazy-Evaluation-in-Python-Pros-and-Cons_Watermarked.15b852ab57a6.jpg" style="background: #ffc873;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/python-lazy-evaluation/"><span class="my-0 h4">What's Lazy Evaluation in Python?</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of the differences between lazy and eager evaluation in Python. By working through this quiz, you'll revisit how Python optimizes memory use and computational overhead by deciding when to compute values.</p>
    </div>
  </div>

</div>

<h2 id="in-short-python-lazy-evaluation-generates-objects-only-when-needed">In Short: Python Lazy Evaluation Generates Objects Only When Needed<a class="headerlink" href="https://realpython.com/atom.xml#in-short-python-lazy-evaluation-generates-objects-only-when-needed" title="Permanent link"></a></h2>
<p>An expression evaluates to a value. However, you can separate the type of evaluation of expressions into two types:</p>
<ol>
<li>Eager evaluation</li>
<li>Lazy evaluation</li>
</ol>
<p><strong>Eager evaluation</strong> refers to those cases when Python evaluates an expression as soon as it encounters it. Here are some examples of expressions that are evaluated eagerly:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="gp">&gt;&gt;&gt; </span><span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span>
<span class="linenos"> 2</span><span class="go">15</span>
<span class="linenos"> 3</span>
<span class="linenos"> 4</span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">random</span>
<span class="linenos"> 5</span><span class="gp">&gt;&gt;&gt; </span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="linenos"> 6</span><span class="go">4</span>
<span class="linenos"> 7</span>
<span class="linenos"> 8</span><span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="linenos"> 9</span><span class="go">[2, 4, 6, 8, 10]</span>
<span class="linenos">10</span><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="linenos">11</span><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
<span class="linenos">12</span><span class="go">[2, 4, 6, 8, 10]</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Interactive environments, such as the <a href="https://realpython.com/python-repl/">standard Python REPL</a> used in this example, display the value of an expression when the line only contains the expression. This code section shows a few examples of statements and expressions:</p>
<ul>
<li><strong>Lines 1 and 2</strong>: The first example includes the addition operator <code>+</code>, which Python evaluates as soon as it encounters it. The REPL shows the value <code>15</code>.</li>
<li><strong>Lines 4 to 6</strong>: The second example includes two lines:<ul>
<li>The <strong>import statement</strong> includes the keyword <code>import</code> followed by the name of a module. The module name <code>random</code> is evaluated eagerly. </li>
<li>The <strong>function call <code>random.randint()</code></strong> is evaluated eagerly, and its value is returned immediately. All standard functions are evaluated eagerly. You’ll learn about generator functions later, which behave differently.</li>
</ul>
</li>
<li><strong>Lines 8 to 12</strong>: The final example has three lines of code:<ul>
<li>The <strong>literal to create a list</strong> is an expression that’s evaluated eagerly. This expression contains several integer literals, which are themselves expressions evaluated immediately.</li>
<li>The <strong>assignment statement</strong> assigns the object created by the list literal to the name <code>numbers</code>. This statement is not an expression and doesn’t return a value. However, it includes the list literal on the right-hand side, which is an expression that’s evaluated eagerly.</li>
<li>The final line contains <strong>the name <code>numbers</code>,</strong> which is eagerly evaluated to return the list object.</li>
</ul>
</li>
</ul>
<p>The list you create in the final example is created in full when you define it. Python needs to allocate memory for the list and all its elements. This memory won’t be freed as long as this list exists in your program. The memory allocation in this example is small and won’t impact the program. However, larger objects require more memory, which can cause performance issues.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Lazy_evaluation">Lazy evaluation</a></strong> refers to cases when Python doesn’t work out the values of an expression immediately. Instead, the values are returned at the point when they’re required in the program. Lazy evaluation can also be referred to as <em>call-by-need</em>.</p>
<p>This delay of when the program evaluates an expression delays the use of resources to create the value, which can improve the performance of a program by spreading the time-consuming process across a longer time period. It also prevents values that will not be used in the program from being generated. This can occur when the program terminates or moves to another part of its execution before all the generated values are used. </p>
<p>When large datasets are created using lazily-evaluated expressions, the program doesn’t need to use memory to store the data structure’s contents. The values are only generated when they’re needed.</p>
<p>An example of lazy evaluation occurs within the <code>for</code> loop when you iterate using <code>range()</code>:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1_000_001</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"This is iteration </span><span class="si">{</span><span class="n">index</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>The <a href="https://realpython.com/python-range/">built-in <code>range()</code></a> is the constructor for Python’s <code>range</code> object. The <code>range</code> object does not store all of the one million integers it represents. Instead, the <code>for</code> loop creates a <code>range_iterator</code> from the <code>range</code> object, which generates the next number in the sequence when it’s needed. Therefore, the program never needs to have all the values stored in memory at the same time.</p>
<p>Lazy evaluation also allows you to create infinite data structures, such as a live stream of audio or video data that continuously updates with new information, since the program doesn’t need to store all the values in memory at the same time. Infinite data structures are not possible with eager evaluation since they can’t be stored in memory.</p>
<p>There are disadvantages to deferred evaluation. Any errors raised by an expression are also deferred to a later point in the program. This delay can make debugging harder.</p>
<p>The lazy evaluation of the integers represented by <code>range()</code> in a <code>for</code> loop is one example of lazy evaluation. You’ll learn about more examples in the following section of this tutorial.</p>
<h2 id="what-are-examples-of-lazy-evaluation-in-python">What Are Examples of Lazy Evaluation in Python?<a class="headerlink" href="https://realpython.com/atom.xml#what-are-examples-of-lazy-evaluation-in-python" title="Permanent link"></a></h2>
<p>In the previous section, you learned about using <code>range()</code> in a <code>for</code> loop, which leads to lazy evaluation of the integers represented by the <code>range</code> object. There are other expressions in Python that lead to lazy evaluation. In this section, you’ll explore the main ones.</p>
<h3 id="other-built-in-data-types">Other Built-In Data Types<a class="headerlink" href="https://realpython.com/atom.xml#other-built-in-data-types" title="Permanent link"></a></h3>
</div><h2><a href="https://realpython.com/python-lazy-evaluation/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-lazy-evaluation/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-24T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python Basics Exercises: Scopes</title>
<link>https://realpython.com/courses/python-basics-exercises-scopes/</link>
<guid>https://realpython.com/courses/python-basics-exercises-scopes/</guid>
<content:encoded><![CDATA[
<div> objects global LEGB return scope  
Python基础练习视频课程介绍如何理解Python中函数和循环的范围问题。通过识别对象范围、使用global关键字、探索LEGB规则以及在函数中使用返回语句，帮助学习者加深对范围概念的理解。范围是编程中比较困难理解的概念之一，本视频课程将提供更多练习机会。此视频课程是Python Basics系列的一部分，在学习前建议先查看相关系列。最后强调在整个课程中都会使用Python。.<br /><br />总结: 本视频课程讲解了如何理解Python函数和循环中的范围问题，包括识别对象范围、使用global关键字、探索LEGB规则以及函数中使用返回语句等内容。通过本课程的学习可以加深对范围概念的理解。 <div>
<p>On your Python journey, you&rsquo;ve worked with <a href="https://realpython.com/courses/python-basics-functions-loops/">functions and loops</a>. To fully understand functions and loops in Python, you need to be familiar with the issue of scope.</p>
<p><strong>In this Python Basics Exercises video course, you&rsquo;ll practice:</strong></p>
<ul>
<li>Identifying the <strong>scope</strong> of objects</li>
<li>Working with the <code>global</code> keyword</li>
<li>Exploring the <strong>LEGB rule</strong> for scope resolution</li>
<li>Using the <code>return</code> statement in a function</li>
</ul>
<p>Scope can be one of the more difficult programming concepts to understand, so in this video course, you&rsquo;ll get additional practice working with it.</p>
<p>This video course is part of the Python Basics series, which accompanies <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>. You can also check out the other <a href="https://realpython.com/learning-paths/python-basics/">Python Basics courses</a>. </p>
<p>Note that you&rsquo;ll be using <a href="https://realpython.com/python-idle/">IDLE</a> to <a href="https://realpython.com/interacting-with-python/">interact with Python</a> throughout this course. If you&rsquo;re just getting started, then you might want to check out <a href="https://realpython.com/courses/setting-up-python/">Python Basics: Setting Up Python</a> before diving into this course.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-23T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python Sequences: A Comprehensive Guide</title>
<link>https://realpython.com/quizzes/python-sequences/</link>
<guid>https://realpython.com/quizzes/python-sequences/</guid>
<content:encoded><![CDATA[
<div> 关键词: sequence, operations, methods, mutable, immutable
总结:<br /><br />这篇文章主要讨论了序列的基本特征、大多数序列共有的操作、与序列相关的特殊方法，以及如何创建用户定义的可变和不可变序列。通过这个测验，你将测试对序列的理解。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-sequences/">Python sequences</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit the basic characteristics of a sequence, operations common to most sequences, special methods associated with sequences, and how to create user-defined mutable and immutable sequences.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-23T12:00:00+00:00</pubDate>
</item>
<item>
<title>Write Unit Tests for Your Python Code With ChatGPT</title>
<link>https://realpython.com/chatgpt-unit-tests-python/</link>
<guid>https://realpython.com/chatgpt-unit-tests-python/</guid>
<content:encoded><![CDATA[
<div> ChatGPT, Unit Tests, Python, Testing, Efficiency<br />
<br />
提到在Python项目中编写良好的测试代码是很重要的，但写单元测试很难且耗时，因此开发者可能不喜欢写。本教程介绍了如何使用大型语言模型（LLMs）和ChatGPT来快速为Python代码创建完整的测试套件。使用ChatGPT可以高效生成基于规范或代码片段的单元测试，提高效率。同时，ChatGPT也能帮助改善测试覆盖率、减少错误、促进学习和培训开发人员。文章通过引导使用doctest、unittest和pytest等工具来展示如何使用ChatGPT编写Python代码的测试。总结: <div>
<div><p>Having a good battery of tests for your code may be a requirement for many Python projects. In practice, writing <strong>unit tests</strong> is hard and can take a lot of time and effort. Therefore, some developers don’t like to write them. However, with <strong>large language models</strong> (LLMs) and tools like <strong>ChatGPT</strong>, you can quickly create robust and complete sets of tests for your Python code.</p>
<p>In Python, you can use multiple different tools for writing tests. The most commonly used tools include <code>doctest</code>, <code>unittest</code>, and <code>pytest</code>. ChatGPT can be of great help in writing tests with any of these tools.</p>
<p><strong>In this tutorial, you’ll:</strong></p>
<ul>
<li>Prompt ChatGPT to create tests using <strong><code>doctest</code></strong></li>
<li>Use ChatGPT to write <strong><code>unittest</code></strong> tests, fixtures, and suites</li>
<li>Craft ChatGPT prompts to write <strong><code>pytest</code></strong> tests and fixtures</li>
<li>Use <strong>alternative prompts</strong> for cases where the code isn’t available</li>
</ul>
<p>To get the most out of this tutorial, you should <a href="https://realpython.com/chatgpt-coding-mentor-python/#set-up-your-chatgpt-coding-mentor">set up a ChatGPT account</a> and know the basics of interacting with this tool using <a href="https://realpython.com/practical-prompt-engineering/">prompt engineering</a>. You should also know the basics of how to <a href="https://realpython.com/python-testing/">test code</a> in Python.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/chatgpt-unit-tests-python/">Click here to download the free sample code</a> you’ll use to write unit tests for your Python code using ChatGPT.</p>
</div>
<h2 id="benefits-of-using-chatgpt-for-testing-python-code">Benefits of Using ChatGPT for Testing Python Code<a class="headerlink" href="https://realpython.com/atom.xml#benefits-of-using-chatgpt-for-testing-python-code" title="Permanent link"></a></h2>
<p>Having good and up-to-date <a href="https://realpython.com/python-testing/#unit-tests-vs-integration-tests">unit tests</a> for your code is a must for any Python project. Poorly tested code or code without tests may end up being unreliable and weak. With automated tests, you can ensure and show that your code works correctly in different scenarios. So, having tests is important from the technical and commercial point of view.</p>
<p>Writing good tests is hard and can take a lot of time. That’s why some developers don’t like to write them at all. Using <a href="https://en.wikipedia.org/wiki/Large_language_model">large language models (LLM)</a> like <a href="https://realpython.com/chatgpt-coding-mentor-python/">ChatGPT</a> can be a viable alternative for providing your projects and code with proper tests.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> You can use ChatGPT and other LLMs in many useful ways in the context of Python development. Check out the following resources for other use cases and useful insights:</p>
<ul>
<li><a href="https://realpython.com/chatgpt-coding-mentor-python/">ChatGPT: Your Personal Python Coding Mentor</a></li>
<li><a href="https://realpython.com/podcasts/rpp/174/">Episode 174: Considering ChatGPT’s Technical Review of a Programming Book</a></li>
<li><a href="https://realpython.com/document-python-code-with-chatgpt/">Document Your Python Code and Projects With ChatGPT</a></li>
<li><a href="https://realpython.com/practical-prompt-engineering/">Prompt Engineering: A Practical Example</a></li>
<li><a href="https://realpython.com/build-llm-rag-chatbot-with-langchain/">Build an LLM RAG Chatbot With LangChain</a></li>
</ul>
</div>
<p>Some of the benefits of using ChatGPT to write tests for your Python code include the following:</p>
<ul>
<li><strong>Efficiency and speed</strong>: It can generate unit tests based on specifications or code snippets. This possibility significantly reduces the time that you need to spend writing tests. So you can focus on writing application logic.</li>
<li><strong>Coverage improvement</strong>: It can suggest tests for edge cases or scenarios that developers might not immediately consider. This way, you can improve your code’s test <a href="https://coverage.readthedocs.io/">coverage</a>.</li>
<li><strong>Error reduction</strong>: It can reduce human error in writing repetitive or boilerplate test code.</li>
<li><strong>Learning and onboarding</strong>: It can serve as an educational tool for developers who are new to testing frameworks or unfamiliar with best practices in unit testing. The generated tests can help developers learn about testing patterns, <a href="https://realpython.com/python-assert-statement/">assertions</a>, and ways to effectively write tests.</li>
</ul>
<p>With ChatGPT, you can generate unit tests for your Python code in almost no time. However, you must note that even though the generated tests can look good, you should still review and possibly refine the generated tests.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> For this tutorial, you’ll use a free ChatGPT account that’s powered by the GPT-3.5 LLM. You can use this model for free with the default <a href="https://chat.openai.com/auth/login">web interface</a> by OpenAI. If you use a paid account with GPT-4, then your results might be more accurate and faster.</p>
<p>Additionally, you’ll use an individual chat thread for each major section in the tutorial. So you’ll use different threads for the <code>doctest</code>, <code>unittest</code>, and <code>pytest</code> sections.</p>
<p>Using a single chat thread to run all the examples in this tutorial may cause the chat to generate significantly different responses because of the past context, which includes previous prompts and responses.</p>
</div>
<p>In the following sections, you’ll learn the basics of using ChatGPT as an assistant for creating coherent unit tests for your Python projects using different test frameworks and libraries.</p>
<h2 id="writing-doctest-tests-with-chatgpt">Writing <code>doctest</code> Tests With ChatGPT<a class="headerlink" href="https://realpython.com/atom.xml#writing-doctest-tests-with-chatgpt" title="Permanent link"></a></h2>
<p>Python’s <a href="https://docs.python.org/3/library/doctest.html#module-doctest"><code>doctest</code></a> module provides a lightweight <strong>testing framework</strong> that you can use for <a href="https://en.wikipedia.org/wiki/Test_automation">test automation</a>. It can read the test cases from your project’s documentation and your code’s docstrings. This framework comes with the Python interpreter, so you’ll have it at your disposal with any Python installation, which is great.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> To dive deeper into how to use the <code>doctest</code> module for testing your code, check out <a href="https://realpython.com/python-doctest/">Python’s <code>doctest</code>: Document and Test Your Code at Once</a>.</p>
</div>
<p>With <code>doctest</code>, you can write code that provides examples of how your code works, simulating <a href="https://realpython.com/python-repl/">REPL</a> sessions. These examples work as documentation and also as test cases or unit tests. Each <code>doctest</code> test needs a statement or expression and an expected result.</p>
<p>You can use ChatGPT to help you out with writing <code>doctest</code> tests. First, you need some code to test. The following function tries to tackle the <a href="https://en.wikipedia.org/wiki/Fizz_buzz#Programming">FizzBuzz</a> challenge, where you return <code>"fizz"</code> for numbers divisible by three, <code>"buzz"</code> for those divisible by five, and <code>"fizz buzz"</code> for those divisible by both three and five.</p>
<p>Go ahead and create a <code>fizzbuzz.py</code> file and add the following code to it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    <span class="mr-2"><code style="color: inherit;">fizzbuzz.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This function works okay for numbers divisible by <code>3</code> or <code>5</code>. However, there is a slight issue with numbers that are divisible by both. Even though you know this, go ahead and start a new chat thread. Then, prompt ChatGPT to write <code>doctest</code> test for the function:</p>
<blockquote>
<p><strong>You:</strong> Write <code>doctest</code> tests for the following function:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p><strong>ChatGPT:</strong></p>
<p>Certainly! The function you’ve provided implements a basic FizzBuzz algorithm but with a slight logical error. The check for divisibility by <code>15</code> should come before checks for <code>3</code> and <code>5</code>, as every number divisible by <code>15</code> is also divisible by both <code>3</code> and <code>5</code>, but your current order will never reach the <code>"fizz buzz"</code> case. Here’s a corrected version of your function with the logical order fixed, followed by <code>doctest</code> tests for it:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""</span>
<span class="sd">    Returns 'fizz' if number is divisible by 3,</span>
<span class="sd">    'buzz' if number is divisible by 5,</span>
<span class="sd">    'fizz buzz' if number is divisible by 15,</span>
<span class="sd">    and the number itself otherwise.</span>

<span class="sd">    &gt;&gt;&gt; fizzbuzz(3)</span>
<span class="sd">    'fizz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(5)</span>
<span class="sd">    'buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(15)</span>
<span class="sd">    'fizz buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(4)</span>
<span class="sd">    4</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(30)</span>
<span class="sd">    'fizz buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(9)</span>
<span class="sd">    'fizz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(10)</span>
<span class="sd">    'buzz'</span>
<span class="sd">    &gt;&gt;&gt; fizzbuzz(2)</span>
<span class="sd">    2</span>
<span class="sd">    """</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz buzz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"fizz"</span>
    <span class="k">elif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">"buzz"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">number</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To use these <code>doctest</code> tests, you’ll need to include them in the docstring of your function as shown above. Then, you can run the tests with the <code>doctest</code> module by adding the following to your script:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">doctest</span>
    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This code will automatically run the tests defined in the docstrings when you execute the Python file. Remember, the corrected order of conditions in the function ensures that numbers divisible by both <code>3</code> and <code>5</code> return <code>"fizz buzz"</code>, which is crucial for the FizzBuzz logic.</p>
</blockquote>
<p>Wow! That great! The chat not only wrote the <code>doctest</code> tests for you. It also fixed the issue, explained important concepts around <code>doctest</code>, and provided instructions on how to run the tests. Note that the tests cover both regular and edge cases, which is pretty convenient.</p>
</div><h2><a href="https://realpython.com/chatgpt-unit-tests-python/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/chatgpt-unit-tests-python/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-22T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #201: Decoupling Systems to Get Closer to the Data</title>
<link>https://realpython.com/podcasts/rpp/201/</link>
<guid>https://realpython.com/podcasts/rpp/201/</guid>
<content:encoded><![CDATA[
<div> decoupled data processing system, benefits, reusable queries, backend data platforms, Ibis<br />
<br />
Ibis是一个Python dataframe库，可以帮助用户构建可移植的查询，适用于各种后端数据平台。使用decoupled data processing system可以实现数据处理的解耦，提高灵活性和可维护性。通过编写可重用的查询，用户可以轻松地在不同的后端数据平台上执行相同的操作，简化了开发过程，并提高了代码的可移植性和重用性。总之，借助Ibis这样的工具，用户可以更高效地处理数据，并在不同平台之间实现数据查询和处理的可移植性。 <br /><br />总结: <div>
<p>What are the benefits of using a decoupled data processing system? How do you write reusable queries for a variety of backend data platforms? This week on the show, Phillip Cloud, the lead maintainer of Ibis, will discuss this portable Python dataframe library.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Python's unittest: Writing Unit Tests for Your Code</title>
<link>https://realpython.com/quizzes/python-unittest/</link>
<guid>https://realpython.com/quizzes/python-unittest/</guid>
<content:encoded><![CDATA[
<div> unittest framework, Python, testing, code, quiz
<br />
Python的测试是一个庞大的主题，可能会有很多复杂性，但并不需要很困难。你可以通过几个简单的步骤为应用程序创建简单的测试，然后逐步完善它们。这篇文章主要测试你对Python的unittest框架测试理解的程度。祝你好运！
<br /><br />总结: Python的测试可以通过unittest框架进行，可以简单地从几个简单步骤开始撰写测试代码，逐步完善。测试并不需要复杂化，只需掌握基本概念即可。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of testing your Python code with the <a href="https://realpython.com/python-unittest/">unittest framework</a>.</p>
<p>Testing in Python is a huge topic and can come with a lot of complexity, but it doesn&rsquo;t need to be hard. You can create simple tests for your application in a few easy steps and then build on them from there.</p>
<p>With this quiz, you can check your understanding of testing with Python&rsquo;s <code>unittest</code> framework. Good luck!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-19T12:00:00+00:00</pubDate>
</item>
<item>
<title>How to Format Floats Within F-Strings in Python</title>
<link>https://realpython.com/how-to-python-f-string-format-float/</link>
<guid>https://realpython.com/how-to-python-f-string-format-float/</guid>
<content:encoded><![CDATA[
<div> f-string, float, format specifier, rounding, significant figures<br />
<br />
要点1: f-string是Python中用于格式化字符串的一种方式，可以在字符串中嵌入变量、表达式等动态内容。<br />
要点2: 使用格式化说明符可以控制浮点数的显示方式，例如控制小数位数。<br />
要点3: 通过在替换字段中添加格式化说明符来实现浮点数的格式化，例如使用`.2f`可以将浮点数保留两位小数。<br />
要点4: 格式化说明符还可以用于控制显著数字的显示方式，使用`g`来显示特定位数的显著数字。<br />
要点5: 在使用f-string时要注意安全问题，避免受到SQL注入等攻击，以及了解Python版本对f-string的支持程度。<br />
<br />
总结: f-string是一种方便的字符串格式化方式，在Python中可用格式化说明符对浮点数进行控制，包括小数位数和显著数字的显示。然而，在使用时需要注意安全性问题和Python版本的兼容性。 <div>
<div><p>You’ll often need to format and round a Python <a href="https://docs.python.org/3/library/functions.html#float"><code>float</code></a> to display the results of your calculations neatly within strings. In earlier versions of Python, this was a messy thing to do because you needed to round your numbers <em>first</em> and then use either string concatenation or the <a href="https://realpython.com/python-string-formatting/#1-old-style-string-formatting-operator">old string formatting</a> technique to do this for you. </p>
<p>Since Python 3.6, the <a href="https://peps.python.org/pep-0498/">literal string interpolation</a>, more commonly known as a <strong>formatted string literal</strong> or <strong><a href="https://realpython.com/python-f-strings/">f-string</a></strong>, allows you to customize the content of your strings in a more readable way.</p>
<p>An f-string is a literal string prefixed with a lowercase or uppercase letter <code>f</code> and contains zero or more <strong>replacement fields</strong> enclosed within a pair of curly braces <code>{...}</code>. Each field contains an <strong>expression</strong> that produces a value. You can calculate the field’s content, but you can also use function calls or even variables.</p>
<p>While most strings have a constant value, f-strings are evaluated at runtime. This makes it possible for you to pass different data into the replacement fields of the same f-string and produce different output. This extensibility of f-strings makes them a great way to embed dynamic content neatly inside strings. However, even though f-strings have largely replaced the earlier methods, they do have their short-comings.</p>
<p>For example, one of the most common attacks performed on a <a href="https://en.wikipedia.org/wiki/Relational_database">relational database</a> is a <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection</a> attack. Often, users provide parameters to SQL queries, and if the query is formed within an f-string, it may be possible to damage a database by passing in rogue commands. F-strings can also be used in a <a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">denial-of-service</a> attack by attacking <a href="https://realpython.com/python-logging/">Python’s logging module</a> code.</p>
<p>In older versions of Python, f-strings had a number of <a href="https://realpython.com/python312-f-strings/#f-strings-had-some-limitations-before-python-312">other limitations</a> that were only fixed with <a href="https://realpython.com/python312-f-strings/">Python version 3.12</a>. This version is used throughout this tutorial.</p>
<p>Take a look at the example below. It shows you how to embed the result of a calculation within an f-string:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"One third, expressed as a float is: </span><span class="si">{</span><span class="mi">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'One third, expressed as a float is: 0.3333333333333333'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Without any explicit rounding, once an expression has produced its value it’ll be inserted into the string using a default number of decimal places. Here, the result is shown to sixteen decimal places, which, in most cases, is more precision than you’ll ever need. So you’ll likely want to round your final answer to a more practical number of digits.</p>
<p>In this tutorial, you’ll learn how to use a Python f-string to format floats to meet your requirements.</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/how-to-python-f-string-format-float-code/">Click here to download the free sample code and exercise solutions </a>you’ll use for learning how to format floats within f-strings in Python.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><strong><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span> Take the Quiz:</strong> Test your knowledge with our interactive “Format Floats Within F-Strings” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr />

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="https://realpython.com/quizzes/format-floats-within-f-strings/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img alt="How to Format Floats Within F-Strings in Python" class="card-img-top m-0 p-0 embed-responsive-item rounded" height="1080" src="https://files.realpython.com/media/How-to-Display-a-Fixed-Amount-of-Digits-in-a-String_Watermarked.9c8579fa6ac2.jpg" style="background: #ff7e74;" width="1920" />


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light"><span class="icon baseline scale2x"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a class="stretched-link" href="https://realpython.com/quizzes/format-floats-within-f-strings/"><span class="my-0 h4">Format Floats Within F-Strings</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you'll test your understanding of how to format floats within f-strings in Python. This knowledge will let you control the precision and appearance of floating-point numbers when you incorporate them into formatted strings.</p>
    </div>
  </div>

</div>

<h2 id="how-to-format-and-round-a-float-within-a-python-f-string">How to Format and Round a Float Within a Python F-String<a class="headerlink" href="https://realpython.com/atom.xml#how-to-format-and-round-a-float-within-a-python-f-string" title="Permanent link"></a></h2>
<p>To format a <code>float</code> for neat display within a Python f-string, you can use a <strong>format specifier</strong>. In its most basic form, this allows you to define the <strong>precision</strong>, or number of decimal places, the <code>float</code> will be displayed with.</p>
<p>The code below displays the same calculation as before, only it’s displayed more neatly:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"One third, rounded to two decimal places is: </span><span class="si">{</span><span class="mi">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">3</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">"</span>
<span class="go">'One third, rounded to two decimal places is: 0.33'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>To use Python’s format specifiers in a replacement field, you separate them from the expression with a colon (<code>:</code>). As you can see, your <code>float</code> has been <a href="https://realpython.com/python-rounding/">rounded</a> to two decimal places. You achieved this by adding the format specifier <code>.2f</code> into the replacement field. The <code>2</code> is the precision, while the lowercase <code>f</code> is an example of a <strong>presentation type</strong>. You’ll see more of these later.</p>
<div class="alert alert-primary">
<p><strong>Note:</strong> When you use a format specifier, you don’t actually change the underlying number. You only improve its display.</p>
</div>
<p>Python’s f-strings also have their own <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">mini-language</a> that allows you to format your output in a variety of different ways. Although this tutorial will focus on rounding, this is certainly not the only thing you can use them for. As you’ll see later, their mini-language is also used in other string formatting techniques.</p>
<p>In addition to displaying the result of calculations, the precision part of a format specifier can also be applied directly to variables and the return values of function calls:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">total_price</span><span class="p">(</span><span class="n">cost</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">cost</span> <span class="o">*</span> <span class="mf">1.2</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">cost_price</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tax</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">"£</span><span class="si">{</span><span class="mi">1000</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2"> + £</span><span class="si">{</span><span class="n">cost_price</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">tax</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2"> = £</span><span class="si">{</span><span class="n">total_price</span><span class="p">(</span><span class="n">cost_price</span><span class="p">)</span><span class="si">:</span><span class="s2">,.2f</span><span class="si">}</span><span class="s2">"</span>
</span><span class="go">'£1,000.00 + £200.00 = £1,200.00'</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This time, you’ve used multiple replacement fields in the same string. The first one formats a literal number, the second formats the result of a calculation, while the third formats the return value from a function call. Also, by inserting a comma (<code>,</code>) before the decimal point (<code>.</code>) in the format specifier, you add a thousands separator to your final output.</p>
<p>In everyday use, you display numbers with a fixed amount of decimals, but when performing scientific or engineering calculations, you may prefer to format them using <a href="https://en.wikipedia.org/wiki/Significant_figures">significant figures</a>. Your results are then assumed to be accurate to the number of significant figures you display them with.</p>
<p>If you want to round numbers to significant figures, you use the lowercase letter <code>g</code> in the format specifier. You can also use an uppercase <code>G</code>, but this automatically switches the format to scientific notation for large numbers.</p>
<p>Suppose you have a circle with a radius of 10.203 meters. To work out the area, you could use this code:</p>
</div><h2><a href="https://realpython.com/how-to-python-f-string-format-float/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/how-to-python-f-string-format-float/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-17T14:00:00+00:00</pubDate>
</item>
<item>
<title>Using raise for Effective Exceptions</title>
<link>https://realpython.com/courses/using-raise-for-effective-exceptions/</link>
<guid>https://realpython.com/courses/using-raise-for-effective-exceptions/</guid>
<content:encoded><![CDATA[
<div> raise statement, exceptions, handle errors, robust programs, best practices
<br />
提到Python中的raise语句，教会如何处理异常情况，提高程序的健壮性和代码质量。课程将教授如何使用raise语句来引发异常，在何时选择引发异常，在Python中引发异常的常见用例，以及在Python代码中引发异常时应用最佳实践。<br /><br />总结: 学会使用raise语句引发异常，有效处理错误和异常情况，开发更加健壮的程序，遵循引发异常的最佳实践。 <div>
<p>In your Python journey, you&rsquo;ll come across situations where you need to signal that something is going wrong in your code. For example, maybe a file doesn&rsquo;t exist, a network or database connection fails, or your code gets invalid input. A common approach to tackle these issues is to <strong>raise an exception</strong>, notifying the user that an error has occurred. That&rsquo;s what Python&rsquo;s <code>raise</code> statement is for.</p>
<p>Learning about the <code>raise</code> statement allows you to effectively handle errors and exceptional situations in your code. This way, you&rsquo;ll develop more robust programs and higher-quality code.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Raise exceptions in Python using the <strong><code>raise</code></strong> statement</li>
<li>Decide <strong>which exceptions</strong> to raise and <strong>when</strong> to raise them in your code</li>
<li>Explore common <strong>use cases</strong> for raising exceptions in Python</li>
<li>Apply <strong>best practices</strong> for raising exceptions in your Python code</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-16T14:00:00+00:00</pubDate>
</item>
<item>
<title>Build a Blog Using Django, GraphQL, and Vue</title>
<link>https://realpython.com/python-django-blog/</link>
<guid>https://realpython.com/python-django-blog/</guid>
<content:encoded><![CDATA[
<div> Django, GraphQL, Vue, blog, CRUD <br />
<br />
要点1: 本教程将教你如何使用Django、GraphQL和Vue构建博客应用的后端和前端。<br />
要点2: 你将学习如何将Django模型转换为GraphQL API，并在浏览器中使用Vue消费该API。<br />
要点3: 项目概述包括创建一个包含作者、文章和标签的简单博客应用。<br />
要点4: 在构建博客的后端时，你将使用Django和GraphQL，之后用Vue展示数据。<br />
要点5: 教程建议先了解Web应用概念，了解Django、Vue和JSON的基础知识。 <br /><br />总结: 本教程将教你如何使用Django、GraphQL和Vue构建博客应用的后端和前端。你将学习如何将Django模型转换为GraphQL API，并在浏览器中使用Vue消费该API。项目概述包括创建一个包含作者、文章和标签的简单博客应用。在构建博客的后端时，你将使用Django和GraphQL，之后用Vue展示数据。教程建议先了解Web应用概念，了解Django、Vue和JSON的基础知识。 <div>
<div><p>Are you a regular Django user? Do you find yourself wanting to decouple your back end and front end? Do you want to handle data persistence in the API while you display the data in a single-page app (SPA) in the browser using a JavaScript framework like React or Vue? </p>
<p>If you answered yes to any of these questions, then you’re in luck. This tutorial will take you through the process of building a Django blog back end and a <a href="https://vuejs.org/">Vue</a> front end, using <a href="https://graphql.org/">GraphQL</a> to communicate between them.</p>
<p><a href="https://realpython.com/intermediate-python-project-ideas/">Projects</a> are an effective way to learn and solidify concepts. This tutorial is structured as a step-by-step project so you can learn in a hands-on way and take breaks as needed.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Translate your <strong>Django models</strong> into a <strong>GraphQL API</strong></li>
<li>Run the <strong>Django server</strong> and a <strong>Vue application</strong> on your computer at the same time</li>
<li>Administer your blog posts in the <strong>Django admin</strong></li>
<li>Consume a GraphQL API in Vue to <strong>show data in the browser</strong></li>
</ul>
<p>You can download all the source code you’ll use to build your Django blog application by clicking the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/django-vue-graphql/">Click here to download the free sample code</a> that you’ll use to build a blog using Django, GraphQL, and Vue.</p>
</div>
<h2 id="demo-a-django-blog-admin-a-graphql-api-and-a-vue-front-end">Demo: A Django Blog Admin, a GraphQL API, and a Vue Front End<a class="headerlink" href="https://realpython.com/atom.xml#demo-a-django-blog-admin-a-graphql-api-and-a-vue-front-end" title="Permanent link"></a></h2>
<p><a href="https://realpython.com/build-a-blog-from-scratch-django/">Blog applications</a> are a common starter project because they involve create, read, update, and delete (CRUD) operations. In this project, you’ll use the Django admin to do the heavy CRUD lifting and you’ll focus on providing a GraphQL API for your blog data.</p>
<p>You’ll use <a href="https://vuejs.org/">Vue.js 3</a> and its <a href="https://vuejs.org/glossary/#composition-api">composition API</a> for the front end of your blog. Vue lets you create dynamic interfaces pretty smoothly, thanks to its reactive data binding and easy-to-manage components. Plus, since you’re dealing with data from a GraphQL API, you can leverage the Vue Apollo plugin.</p>
<p>Here’s a demonstration of the completed project in action:</p>
<figure>
  <div class="embed-responsive embed-responsive-16by9 rounded mb-3 border">
    
  </div>

</figure>

<p>Next, you’ll make sure you have all the necessary background information and tools before you dive in and build your blog application.</p>
<h2 id="project-overview">Project Overview<a class="headerlink" href="https://realpython.com/atom.xml#project-overview" title="Permanent link"></a></h2>
<p>For this project, you’ll create a small blogging application with some rudimentary features:</p>
<ul>
<li><strong>Authors</strong> can write many posts.</li>
<li><strong>Posts</strong> can have many tags and can be either published or unpublished.</li>
</ul>
<p>You’ll build the back end of this blog in Django, complete with an admin for adding new blog content. Then you’ll expose the content data as a GraphQL API and use Vue to display that data in the browser.</p>
<p>You’ll accomplish this in several high-level steps. At the end of each step, you’ll find a link to the source code for that stage of the project.</p>
<p>If you’re curious about how the source code for each step looks, then you can click the link below:</p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/django-vue-graphql/">Click here to download the free sample code</a> that you’ll use to build a blog using Django, GraphQL, and Vue.</p>
</div>
<h2 id="prerequisites">Prerequisites<a class="headerlink" href="https://realpython.com/atom.xml#prerequisites" title="Permanent link"></a></h2>
<p>You’ll be best equipped for this tutorial if you already have a solid foundation in some web application concepts. You should understand how <a href="https://realpython.com/python-requests/">HTTP requests and responses</a> and APIs work. You can check out <a href="https://realpython.com/python-api/">Python &amp; APIs: A Winning Combo for Reading Public Data</a> to understand the details of using GraphQL APIs vs REST APIs.</p>
<p>Because you’ll use Django to build the back end for your blog, you’ll want to be familiar with <a href="https://realpython.com/django-setup/">starting a Django project</a> and <a href="https://realpython.com/customize-django-admin-python/">customizing the Django admin</a>. If you haven’t used Django much before, you might also want to try building another Django-only project first. For a good introduction, check out <a href="https://realpython.com/get-started-with-django-1/">Get Started with Django Part 1: Build a Portfolio App</a>.</p>
<p>And because you’ll be using Vue on the front end, some experience with <a href="https://realpython.com/python-vs-javascript/">JavaScript</a> will also help. If you’ve only used a JavaScript framework like <a href="https://jquery.com/">jQuery</a> in the past, the <a href="https://vuejs.org/guide/introduction.html">Vue introduction</a> is a good foundation.</p>
<p>Familiarity with JSON is also important because GraphQL queries are JSON-like and return data in JSON format. You can read about <a href="https://realpython.com/python-json/">Working with JSON Data in Python</a> for an introduction.</p>
</div><h2><a href="https://realpython.com/python-django-blog/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-django-blog/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-15T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Write Pythonic and Clean Code With namedtuple</title>
<link>https://realpython.com/quizzes/python-namedtuple/</link>
<guid>https://realpython.com/quizzes/python-namedtuple/</guid>
<content:encoded><![CDATA[
<div> namedtuple, features, Pythonic code, data structure, quiz
总结:<br /><br />这篇文章主要介绍了namedtuple的创建、特性、使用以及与其他数据结构的比较，通过完成测试来加深对namedtuple的理解。namedtuple是一种方便创建小型不可变数据对象的工具，具有类似于元组的访问方式和命名字段的优点。可以通过namedtuple实例编写Pythonic代码，提高代码的可读性和易用性，尤其适合于简单的数据结构。在选择数据结构时，需要根据需求和代码风格来决定是否使用namedtuple。 <div>
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-namedtuple/">Python&rsquo;s <code>namedtuple()</code></a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to create <code>namedtuple</code> classes, identify and take advantage of the cool features of <code>namedtuple</code>, use <code>namedtuple</code> instances to write Pythonic code, and decide when to use a <code>namedtuple</code> over a similar data structure.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #200: Avoiding Error Culture and Getting Help Inside Python</title>
<link>https://realpython.com/podcasts/rpp/200/</link>
<guid>https://realpython.com/podcasts/rpp/200/</guid>
<content:encoded><![CDATA[
<p>What is error culture, and how do you avoid it within your organization? How do you navigate alert and notification fatigue? Hey, it's episode #200! Real Python's editor-in-chief, Dan Bader, joins us this week to celebrate. Christopher Trudeau also returns to bring another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: What's Lazy Evaluation in Python?</title>
<link>https://realpython.com/quizzes/python-lazy-evaluation/</link>
<guid>https://realpython.com/quizzes/python-lazy-evaluation/</guid>
<content:encoded><![CDATA[
<p>Lazy evaluation is a programming concept where the evaluation of an expression is deferred until its value is actually needed. This can lead to performance enhancements by avoiding unnecessary calculations, and it can also allow for the creation of potentially infinite data structures. As you embark on this quiz, you&rsquo;ll test your knowledge of lazy evaluation in Python and learn how to apply this concept to write cleaner and more efficient code.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Format Floats Within F-Strings</title>
<link>https://realpython.com/quizzes/format-floats-within-f-strings/</link>
<guid>https://realpython.com/quizzes/format-floats-within-f-strings/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/how-to-python-f-string-format-float/">How to Format Floats Within F-Strings in Python</a>.</p>
<p>You&rsquo;ll often need to format and round a Python <code>float</code> to display the results of your calculations neatly within strings. While there are several ways to format numbers in Python, formatted string literals or <a href="https://realpython.com/python-f-strings/">f-strings</a> are usually the most frequent choice in modern Python programs. Knowing how to use f-strings effectively can make your code more readable and concise.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-12T12:00:00+00:00</pubDate>
</item>
<item>
<title>Pydantic: Simplifying Data Validation in Python</title>
<link>https://realpython.com/python-pydantic/</link>
<guid>https://realpython.com/python-pydantic/</guid>
<content:encoded><![CDATA[
<div><p>Pydantic is a powerful data validation and settings management library for Python, engineered to enhance the robustness and reliability of your codebase. From basic tasks, such as checking whether a variable is an integer, to more complex tasks, like ensuring highly-nested dictionary keys and values have the correct data types, Pydantic can handle just about any data validation scenario with minimal boilerplate code.</p>
<p><strong>In this tutorial, you’ll learn how to:</strong></p>
<ul>
<li>Work with <strong>data schemas</strong> with Pydantic’s <code>BaseModel</code></li>
<li>Write <strong>custom validators</strong> for complex use cases</li>
<li><strong>Validate function arguments</strong> with Pydantic’s <code>@validate_call</code></li>
<li>Manage settings and <strong>configure applications</strong> with <code>pydantic-settings</code></li>
</ul>
<p>Throughout this tutorial, you’ll get hands-on examples of Pydantic’s functionalities, and by the end you’ll have a solid foundation for your own validation use cases. Before starting this tutorial, you’ll benefit from having an intermediate understanding of Python and <a href="https://realpython.com/python3-object-oriented-programming/">object-oriented programming</a>. </p>
<div class="alert alert-warning">
<p><strong>Get Your Code:</strong> <a class="alert-link" href="https://realpython.com/bonus/pydantic-simplifying-data-validation-in-python/">Click here to download the free sample code</a> that you’ll use to help you learn how Pydantic can help you simplify data validation in Python.</p>
</div>
<h2 id="pythons-pydantic-library">Python’s Pydantic Library<a class="headerlink" href="https://realpython.com/atom.xml#pythons-pydantic-library" title="Permanent link"></a></h2>
<p>One of Python’s main attractions is that it’s a dynamically typed language. Dynamic typing means that variable types are determined at runtime, unlike statically typed languages where they are explicitly declared at compile time. While dynamic typing is great for rapid development and ease of use, you often need more robust type checking and data validation for real-world applications. This is where Python’s Pydantic library has you covered.</p>
<p>Pydantic has quickly gained popularity, and it’s now the most widely used data validation library for Python. In this first section, you’ll get an overview of Pydantic and a preview of the library’s powerful features. You’ll also learn how to install Pydantic along with the additional dependencies you’ll need for this tutorial.</p>
<h3 id="getting-familiar-with-pydantic">Getting Familiar With Pydantic<a class="headerlink" href="https://realpython.com/atom.xml#getting-familiar-with-pydantic" title="Permanent link"></a></h3>
<p>Pydantic is a powerful Python library that leverages <a href="https://realpython.com/python-type-checking/">type hints</a> to help you easily validate and serialize your data schemas. This makes your code more robust, readable, concise, and easier to debug. Pydantic also integrates well with many popular static typing tools and IDEs, which allows you to catch schema issues before running your code.</p>
<p>Some of Pydantic’s distinguishing features include:</p>
<ul>
<li>
<p><strong>Customization</strong>: There’s almost no limit to the kinds of data you can validate with Pydantic. From primitive Python types to highly nested data structures, Pydantic lets you validate and serialize nearly any Python object.</p>
</li>
<li>
<p><strong>Flexibility</strong>: Pydantic gives you control over how strict or lax you want to be when validating your data. In some cases, you might want to coerce incoming data to the correct type. For example, you could accept data that’s intended to be a float but is received as an integer. In other cases, you might want to strictly enforce the data types you’re receiving. Pydantic enables you to do either. </p>
</li>
<li>
<p><strong>Serialization</strong>: You can serialize and deserialize Pydantic objects as <a href="https://realpython.com/python-dicts/">dictionaries</a> and <a href="https://realpython.com/python-json/">JSON</a> strings. This means that you can seamlessly convert your Pydantic objects to and from JSON. This capability has led to self-documenting APIs and integration with just about any tool that supports JSON schemas.</p>
</li>
<li>
<p><strong>Performance</strong>: Thanks to its core validation logic written in <a href="https://www.rust-lang.org/">Rust</a>, Pydantic is exceptionally fast. This performance advantage gives you swift and reliable data processing, especially in high-throughput applications such as REST APIs that need to scale to a large number of requests.</p>
</li>
<li>
<p><strong>Ecosystem and Industry Adoption</strong>: Pydantic is a dependency of <a href="https://docs.pydantic.dev/2.0/why/#ecosystem">many popular Python libraries</a> such as <a href="https://realpython.com/fastapi-python-web-apis/">FastAPI</a>, <a href="https://realpython.com/build-llm-rag-chatbot-with-langchain/">LangChain</a>, and <a href="https://realpython.com/polars-python/">Polars</a>. It’s also used by most of the <a href="https://docs.pydantic.dev/2.0/why/#using-pydantic">largest tech companies</a> and throughout many other industries. This is a testament to Pydantic’s community support, reliability, and resilience.</p>
</li>
</ul>
<p>These are a few key features that make Pydantic an attractive data validation library, and you’ll get to see these in action throughout this tutorial. Up next, you’ll get an overview of how to install Pydantic along with its various dependencies.</p>
<h3 id="installing-pydantic">Installing Pydantic<a class="headerlink" href="https://realpython.com/atom.xml#installing-pydantic" title="Permanent link"></a></h3>
<p>Pydantic is available on <a href="https://pypi.org/">PyPI</a>, and you can install it with <a href="https://realpython.com/what-is-pip/">pip</a>. Open a terminal or command prompt, create a new virtual environment, and then run the following command to install Pydantic:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pydantic
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>This command will install the latest version of Pydantic from PyPI onto your machine. To verify that the installation was successful, start a <a href="https://realpython.com/python-repl/">Python REPL</a> and import Pydantic:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pydantic</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>If the import runs without error, then you’ve successfully installed Pydantic, and you now have the core of Pydantic installed on your system.</p>
<h3 id="adding-optional-dependencies">Adding Optional Dependencies<a class="headerlink" href="https://realpython.com/atom.xml#adding-optional-dependencies" title="Permanent link"></a></h3>
<p>You can install optional dependencies with Pydantic as well. For example, you’ll be working with email validation in this tutorial, and you can include these dependencies in your install:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span><span class="s2">"pydantic[email]"</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>Pydantic has a separate package for <a href="https://docs.pydantic.dev/latest/concepts/pydantic_settings/">settings management</a>, which you’ll also cover in this tutorial. To install this, run the following command:</p>
<div class="codeblock mb-3 w-100">
  <div class="codeblock__header d-flex justify-content-between codeblock--yellow">
    <span class="mr-2 noselect">Shell</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></span>
      
    </div>
  </div>
  <div>
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp gp-VirtualEnv">(venv)</span> <span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>pydantic-settings
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span></button>
    
      <span class="small"><span class="icon baseline mr-1 text-success"><svg xmlns="http://www.w3.org/2000/svg"><use></use></svg></span>Copied!</span>
    
    
  </div>
</div>
<p>With that, you’ve installed all the dependencies you’ll need for this tutorial, and you’re ready to start exploring Pydantic. You’ll start by covering models—Pydantic’s primary way of defining data schemas.</p>
</div><h2><a href="https://realpython.com/python-pydantic/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-pydantic/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-10T14:00:00+00:00</pubDate>
</item>
<item>
<title>Generating QR Codes With Python</title>
<link>https://realpython.com/courses/generating-qr-codes/</link>
<guid>https://realpython.com/courses/generating-qr-codes/</guid>
<content:encoded><![CDATA[
<p>From restaurant e-menus to airline boarding passes, <strong>QR codes</strong> have numerous applications that impact your day-to-day life and enrich the user&rsquo;s experience. Wouldn&rsquo;t it be great to make them look good, too? With the help of this video course, you&rsquo;ll learn how to use Python to generate beautiful QR codes for your personal use case. </p>
<p>In its most basic format, a QR code contains black squares and dots on a white background, with information that any smartphone or device with a dedicated QR scanner can decode. Unlike a traditional bar code, which holds information horizontally, a QR code holds the data in two dimensions, and it can hold over a hundred times more information.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li><strong>Generate</strong> a basic black-and-white QR code</li>
<li>Change the <strong>size</strong> and <strong>margins</strong> of the QR code</li>
<li>Create <strong>colorful</strong> QR codes</li>
<li><strong>Rotate</strong> the QR code</li>
<li>Replace the static background with an <strong>animated GIF</strong></li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-09T14:00:00+00:00</pubDate>
</item>
<item>
<title>Python News: What's New From March 2024</title>
<link>https://realpython.com/python-news-march-2024/</link>
<guid>https://realpython.com/python-news-march-2024/</guid>
<content:encoded><![CDATA[
<div><p>While many people went hunting for <a href="https://realpython.com/courses/finding-python-easter-eggs/">Easter eggs</a>, the Python community stayed active through March 2024. The free-threaded Python project reached a new milestone, and you can now experiment with disabling the GIL in your interpreter.</p>
<p>The Python Software Foundation does a great job supporting the language with limited resources. They’ve now announced a new position that will support users of PyPI. NumPy is an old workhorse in the data science space. The library is getting a big facelift, and the first release candidate of NumPy 2 is now available.</p>
<p>Dive in to learn more about last month’s most important Python news. </p>
<h2 id="free-threaded-python-reaches-an-important-milestone">Free-Threaded Python Reaches an Important Milestone<a class="headerlink" href="https://realpython.com/atom.xml#free-threaded-python-reaches-an-important-milestone" title="Permanent link"></a></h2>
<p>Python’s <a href="https://realpython.com/python-gil/">global interpreter lock</a> (GIL) has been part of the CPython implementation since the early days. The lock simplifies a lot of the code under the hood of the language, but also causes some issues with <a href="https://realpython.com/python-parallel-processing/">parallel processing</a>.</p>
<p>Over the years, there have been <a href="https://realpython.com/python-parallel-processing/#the-gil-ensures-thread-safety-of-the-python-internals">many attempts</a> to remove the GIL. However, until <a href="https://peps.python.org/pep-0703/">PEP 703</a> was <a href="https://realpython.com/python-news-october-2023/#pep-703-accepted-one-step-closer-to-python-without-the-gil">accepted by the steering council last year</a>, none had been successful.</p>
<p>The PEP describes how the GIL can be removed based on experimental work done by <a href="https://github.com/colesbury">Sam Gross</a>. It suggests that what’s now called <strong>free-threaded Python</strong> is activated through a build option. In time, this free-threaded Python is expected to become the default version of CPython, but for now, it’s only meant for testing and experiments.</p>
<p>When free-threaded Python is ready for bigger audiences, the GIL will still be enabled by default. You can then set an environment variable or add a command-line option to try out free-threaded Python:</p>
</div><h2><a href="https://realpython.com/python-news-march-2024/?utm_source=realpython&amp;utm_medium=rss">Read the full article at https://realpython.com/python-news-march-2024/ »</a></h2>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-08T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #199: Leveraging Documents and Data to Create a Custom LLM Chatbot</title>
<link>https://realpython.com/podcasts/rpp/199/</link>
<guid>https://realpython.com/podcasts/rpp/199/</guid>
<content:encoded><![CDATA[
<p>How do you customize a LLM chatbot to address a collection of documents and data? What tools and techniques can you use to build embeddings into a vector database? This week on the show, Calvin Hendryx-Parker is back to discuss developing an AI-powered, Large Language Model-driven chat interface.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-05T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Build Command-Line Interfaces With Python's argparse</title>
<link>https://realpython.com/quizzes/command-line-interfaces-python-argparse/</link>
<guid>https://realpython.com/quizzes/command-line-interfaces-python-argparse/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/command-line-interfaces-python-argparse/">Creating Command-line Interfaces in Python with argparse</a>.</p>
<p>Command-line apps may not be common in the general user&rsquo;s space, but they&rsquo;re present in development, data science, systems administration, and many other operations. Every command-line app needs a user-friendly <a href="https://en.wikipedia.org/wiki/Command-line_interface">command-line interface (CLI)</a> so that you can interact with the app itself. In Python, you can create full-featured CLIs with the <code>argparse</code> module from the standard library.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-03T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Deep Learning: PyTorch vs Tensorflow</title>
<link>https://realpython.com/courses/deep-learning-pytorch-tensorflow/</link>
<guid>https://realpython.com/courses/deep-learning-pytorch-tensorflow/</guid>
<content:encoded><![CDATA[
<p>PyTorch vs TensorFlow: What&rsquo;s the difference? Both are open source Python libraries that use graphs to perform numerical computation on data. Both are used extensively in academic research and commercial code. Both are extended by a variety of APIs, cloud computing platforms, and model repositories.</p>
<p>If they&rsquo;re so similar, then which one is best for your project?</p>
<p><strong>In this video course, you&rsquo;ll learn:</strong></p>
<ul>
<li>What the differences are between <strong>PyTorch</strong> and <strong>TensorFlow</strong></li>
<li>What <strong>tools</strong> and <strong>resources</strong> are available for each</li>
<li>How to choose the <strong>best option</strong> for your specific use case</li>
</ul>
<p>You&rsquo;ll start by taking a close look at both platforms, beginning with the slightly older TensorFlow, before exploring some considerations that can help you determine which choice is best for your project. Let&rsquo;s get started!</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-04-02T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #198: Build a Video Game With Python Turtle &amp; Visualize Data in Seaborn</title>
<link>https://realpython.com/podcasts/rpp/198/</link>
<guid>https://realpython.com/podcasts/rpp/198/</guid>
<content:encoded><![CDATA[
<p>Can you build a Space Invaders clone using Python's built-in turtle module? What advantages does the Seaborn data visualization library provide compared to Matplotlib? Christopher Trudeau is back on the show this week, along with special guest Real Python core team member Bartosz Zaczyński. We're sharing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-29T12:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: A Practical Introduction to Web Scraping in Python</title>
<link>https://realpython.com/quizzes/python-web-scraping-practical-introduction/</link>
<guid>https://realpython.com/quizzes/python-web-scraping-practical-introduction/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of
<a href="https://realpython.com/python-web-scraping-practical-introduction/">Web Scraping in Python</a>.</p>
<p>By working through this quiz, you&rsquo;ll revisit how to parse website data using string methods and regular expressions, how to parse website data using an HTML parser, and how to interact with forms and other website components.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-27T12:00:00+00:00</pubDate>
</item>
<item>
<title>Finding Python Easter Eggs</title>
<link>https://realpython.com/courses/finding-python-easter-eggs/</link>
<guid>https://realpython.com/courses/finding-python-easter-eggs/</guid>
<content:encoded><![CDATA[
<p>In this <strong>Code Conversation</strong>, you&rsquo;ll follow a chat between Philipp and Bartosz as they go on an Easter egg hunt. Along the way, you&rsquo;ll:</p>
<ul>
<li>Learn about Easter egg hunt traditions</li>
<li>Uncover the first Easter egg in software</li>
<li>Explore Easter eggs in Python</li>
</ul>
<p>There won&rsquo;t be many code examples in this Code Conversation, so you can lean back and join Philipp and Bartosz on their Easter egg hunt.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-26T14:00:00+00:00</pubDate>
</item>
<item>
<title>Quiz: Get Started With Django: Build a Portfolio App</title>
<link>https://realpython.com/quizzes/get-started-with-django/</link>
<guid>https://realpython.com/quizzes/get-started-with-django/</guid>
<content:encoded><![CDATA[
<p>In this quiz, you&rsquo;ll test your understanding of <a href="https://realpython.com/learning-paths/django-web-development/">Django</a>. By working through this quiz, you&rsquo;ll revisit the steps you need to <a href="https://realpython.com/get-started-with-django-1/">get started with Django</a>.</p>
<p>You&rsquo;ll touch on topics that will help you create a fully functioning web application and revisit some of the most important features of Django.</p>
<p>You&rsquo;ll also investigate the architecture of a Django site, remember how to set up a new Django project with multiple apps, build models and views, and create and connect Django templates.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-26T12:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #197: Using Python in Bioinformatics and the Laboratory</title>
<link>https://realpython.com/podcasts/rpp/197/</link>
<guid>https://realpython.com/podcasts/rpp/197/</guid>
<content:encoded><![CDATA[
<p>How is Python being used to automate processes in the laboratory? How can it speed up scientific work with DNA sequencing? This week on the show, Chemical Engineering PhD Student Parsa Ghadermazi is here to discuss Python in bioinformatics.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-22T12:00:00+00:00</pubDate>
</item>
<item>
<title>SQLite and SQLAlchemy in Python: Move Your Data Beyond Flat Files</title>
<link>https://realpython.com/courses/sqlite-sqlalchemy-python-beyond-flat-files/</link>
<guid>https://realpython.com/courses/sqlite-sqlalchemy-python-beyond-flat-files/</guid>
<content:encoded><![CDATA[
<p>All programs process data in one form or another, and many need to be able to save and retrieve that data from one invocation to the next. Python, <a href="https://www.sqlite.org/index.html">SQLite</a>, and <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> give your programs database functionality, allowing you to store data in a single file without the need for a database server.</p>
<p>You can achieve similar results using <a href="https://en.wikipedia.org/wiki/Flat-file_database">flat files</a> in any number of formats, including CSV, JSON, XML, and even custom formats. Flat files are often human-readable text files&mdash;though they can also be binary data&mdash;with a structure that can be parsed by a computer program. You&rsquo;ll explore using SQL databases and flat files for data storage and manipulation and learn how to decide which approach is right for your program.</p>
<p><strong>In this video course, you&rsquo;ll learn how to use:</strong></p>
<ul>
<li><strong>Flat files</strong> for data storage</li>
<li><strong>SQL</strong> to improve access to persistent data</li>
<li><strong>SQLite</strong> for data storage</li>
<li><strong>SQLAlchemy</strong> to work with data as Python objects</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-19T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #196: Exploring Duck Typing in Python &amp; Dynamics of Monkey Patching</title>
<link>https://realpython.com/podcasts/rpp/196/</link>
<guid>https://realpython.com/podcasts/rpp/196/</guid>
<content:encoded><![CDATA[
<p>What are the advantages of determining the type of an object by how it behaves? What coding circumstances are not a good fit for duck typing? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-15T12:00:00+00:00</pubDate>
</item>
<item>
<title>Python Basics Exercises: Dictionaries</title>
<link>https://realpython.com/courses/basics-exercises-dictionaries/</link>
<guid>https://realpython.com/courses/basics-exercises-dictionaries/</guid>
<content:encoded><![CDATA[
<p>In plain English, a dictionary is a book containing the definitions of words. Each entry in a dictionary has two parts: the word being defined, and its definition.</p>
<p><strong>Python dictionaries</strong>, like lists and tuples, store a collection of objects. However, instead of storing objects in a sequence, dictionaries hold
information in pairs of data called <strong>key-value pairs</strong>. That is, each object in a dictionary has two parts: a <strong>key</strong> and a <strong>value</strong>. Each key is assigned a single value, which defines the relationship between the two sets.</p>
<p><strong>In this video course, you&rsquo;ll practice:</strong></p>
<ul>
<li>What a dictionary <strong>is</strong> and how it&rsquo;s <strong>structured</strong></li>
<li>How dictionaries <strong>differ</strong> from other data structures</li>
<li>How to <strong>define</strong> and <strong>use</strong> dictionaries in your own code</li>
</ul>
<p>This video course is part of the Python Basics series, which accompanies <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>. You can also check out the other <a href="https://realpython.com/learning-paths/python-basics/">Python Basics courses</a>. </p>
<p>Note that you&rsquo;ll be using <a href="https://realpython.com/python-idle/">IDLE</a> to <a href="https://realpython.com/interacting-with-python/">interact with Python</a> throughout this course.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-12T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #195: Building a Healthy Developer Mindset While Learning Python</title>
<link>https://realpython.com/podcasts/rpp/195/</link>
<guid>https://realpython.com/podcasts/rpp/195/</guid>
<content:encoded><![CDATA[
<p>How do you get yourself unstuck when facing a programming problem? How do you develop a positive developer mindset while learning Python? This week on the show, Bob Belderbos from Pybites is here to talk about learning Python and building healthy developer habits.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-08T12:00:00+00:00</pubDate>
</item>
<item>
<title>Creating Asynchronous Tasks With Celery and Django</title>
<link>https://realpython.com/courses/asynchronous-tasks-celery-django/</link>
<guid>https://realpython.com/courses/asynchronous-tasks-celery-django/</guid>
<content:encoded><![CDATA[
<p>You&rsquo;ve built a shiny <strong>Django</strong> app and want to release it to the public, but you&rsquo;re worried about time-intensive tasks that are part of your app&rsquo;s workflow. You don&rsquo;t want your users to have a negative experience navigating your app. You can integrate <strong>Celery</strong> to help with that.</p>
<p>Celery is a <strong>distributed task queue</strong> for UNIX systems. It allows you to offload work from your Python app. Once you integrate Celery into your app, you can send time-intensive tasks to Celery&rsquo;s task queue. That way, your web app can continue to respond quickly to users while Celery completes expensive operations asynchronously in the background.</p>
<p><strong>In this video course, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Recognize <strong>effective use cases</strong> for Celery</li>
<li>Differentiate between <strong>Celery beat</strong> and <strong>Celery workers</strong></li>
<li><strong>Integrate Celery and Redis</strong> in a Django project</li>
<li>Set up <strong>asynchronous tasks</strong> that run independently of your Django app</li>
<li>Refactor Django code to <strong>run a task with Celery</strong> instead</li>
</ul>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-05T14:00:00+00:00</pubDate>
</item>
<item>
<title>The Real Python Podcast – Episode #194: Automate Tasks With Python &amp; Building a Small Search Engine</title>
<link>https://realpython.com/podcasts/rpp/194/</link>
<guid>https://realpython.com/podcasts/rpp/194/</guid>
<content:encoded><![CDATA[
<p>What are the typical computer tasks you do manually every week? Could you automate those tasks with a Python script? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>
        <hr />
        <p><em>[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href="https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>
]]></content:encoded>
<pubDate>2024-03-01T12:00:00+00:00</pubDate>
</item>
</channel>
</rss>